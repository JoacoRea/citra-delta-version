// shader: 8DD9, 29769686DF99D914

layout(triangles) in;
layout(triangle_strip, max_vertices=3) out;

layout(location=1) out vec4 primary_color;
layout(location=2) out vec2 texcoord0;
layout(location=3) out vec2 texcoord1;
layout(location=4) out vec2 texcoord2;
layout(location=5) out float texcoord0_w;
layout(location=6) out vec4 normquat;
layout(location=7) out vec3 view;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

layout(location=0) in vec4 vs_out_attr0[];
layout(location=1) in vec4 vs_out_attr1[];
layout(location=2) in vec4 vs_out_attr2[];
layout(location=3) in vec4 vs_out_attr3[];
layout(location=4) in vec4 vs_out_attr4[];
layout(location=5) in vec4 vs_out_attr5[];
struct Vertex {
    vec4 attributes[6];
};

vec4 GetVertexQuaternion(Vertex vtx) {
    return vec4(vtx.attributes[1].x, vtx.attributes[1].y, vtx.attributes[1].z, vtx.attributes[1].w);
}

void EmitVtx(Vertex vtx, bool quats_opposite) {
    vec4 vtx_pos = vec4(vtx.attributes[0].x, vtx.attributes[0].y, vtx.attributes[0].z, vtx.attributes[0].w);
    gl_Position = vtx_pos;
#if !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)
    gl_ClipDistance[0] = -vtx_pos.z;
    gl_ClipDistance[1] = dot(clip_coef, vtx_pos);
#endif // !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)

    vec4 vtx_quat = GetVertexQuaternion(vtx);
    normquat = mix(vtx_quat, -vtx_quat, bvec4(quats_opposite));

    vec4 vtx_color = vec4(vtx.attributes[2].x, vtx.attributes[2].y, vtx.attributes[2].z, vtx.attributes[2].w);
    primary_color = clamp(vtx_color, vec4(0), vec4(1));

    texcoord0 = vec2(vtx.attributes[3].x, vtx.attributes[3].y);
    texcoord1 = vec2(vtx.attributes[5].x, vtx.attributes[5].y);

    texcoord0_w = vtx.attributes[3].w;
    view = vec3(vtx.attributes[4].x, vtx.attributes[4].y, vtx.attributes[4].z);
    texcoord2 = vec2(vtx.attributes[5].z, vtx.attributes[5].w);

    EmitVertex();
}

bool AreQuaternionsOpposite(vec4 qa, vec4 qb) {
    return (dot(qa, qb) < 0.0);
}

void EmitPrim(Vertex vtx0, Vertex vtx1, Vertex vtx2) {
    EmitVtx(vtx0, false);
    EmitVtx(vtx1, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx1)));
    EmitVtx(vtx2, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx2)));
    EndPrimitive();
}

void main() {
    Vertex prim_buffer[3];
    prim_buffer[0].attributes = vec4[6](vs_out_attr0[0], vs_out_attr1[0], vs_out_attr2[0], vs_out_attr3[0], vs_out_attr4[0], vs_out_attr5[0]);
    prim_buffer[1].attributes = vec4[6](vs_out_attr0[1], vs_out_attr1[1], vs_out_attr2[1], vs_out_attr3[1], vs_out_attr4[1], vs_out_attr5[1]);
    prim_buffer[2].attributes = vec4[6](vs_out_attr0[2], vs_out_attr1[2], vs_out_attr2[2], vs_out_attr3[2], vs_out_attr4[2], vs_out_attr5[2]);
    EmitPrim(prim_buffer[0], prim_buffer[1], prim_buffer[2]);
}
// reference: A0CB59480533AF6A, 29769686DF99D914
// shader: 8B31, F3E1ED67E9AEC446

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 106u;
while (true) {
switch (jmp_to) {
case 106u:
sub_1();
vs_out_attr3 = uniforms.f[12].yxwz + vs_in_reg1.yxyx;
vs_out_attr5 = uniforms.f[13].yxwz + vs_in_reg1.yxyx;
vs_out_attr2 = uniforms.f[80];
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = uniforms.f[13] + vs_in_reg0;
vs_out_attr2 = mul_s(uniforms.f[12], vs_in_reg3);
vs_out_attr3 = uniforms.f[17].xyyy + vs_in_reg1.xyyy;
vs_out_attr5.xy = (uniforms.f[17].zwww + vs_in_reg1.zwww).xy;
vs_out_attr5.zw = (uniforms.f[18].xyxy + vs_in_reg2.xyxy).zw;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[16], vs_in_reg0.xyxy);
reg_tmp12 = uniforms.f[13] + reg_tmp12;
vs_out_attr2 = uniforms.f[12];
reg_tmp14 = mul_s(uniforms.f[15], vs_in_reg1);
reg_tmp13 = uniforms.f[93].yyyy + reg_tmp12.zwww;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp13);
reg_tmp14.y = (uniforms.f[14].wwww + reg_tmp14).y;
reg_tmp13 = mul_s(uniforms.f[14], reg_tmp13);
vs_out_attr0.xy = (reg_tmp12.xyyy).xy;
vs_out_attr0.zw = (uniforms.f[93].xxxy).zw;
vs_out_attr3.xyz = (reg_tmp13 + reg_tmp14).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[12], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[13].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[14].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_4();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 494u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 500u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264423296BE44, F3E1ED67E9AEC446
// shader: 8B30, 91A9C3AB64B00F52
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 819AC291158E8266, 91A9C3AB64B00F52
// program: F3E1ED67E9AEC446, 29769686DF99D914, 91A9C3AB64B00F52
// shader: 8B30, 466ABE576AF91F18
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb) + (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 527FDA221DB330C9, 466ABE576AF91F18
// program: F3E1ED67E9AEC446, 29769686DF99D914, 466ABE576AF91F18
// shader: 8B31, CED7D673F808D965

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 113u;
while (true) {
switch (jmp_to) {
case 113u:
vs_out_attr0 = uniforms.f[13] + vs_in_reg0;
vs_out_attr2 = mul_s(uniforms.f[12], vs_in_reg3);
vs_out_attr3 = uniforms.f[17].xyyy + vs_in_reg1.xyyy;
vs_out_attr5.xy = (uniforms.f[17].zwww + vs_in_reg1.zwww).xy;
vs_out_attr5.zw = (uniforms.f[18].xyxy + vs_in_reg2.xyxy).zw;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[16], vs_in_reg0.xyxy);
reg_tmp12 = uniforms.f[13] + reg_tmp12;
vs_out_attr2 = uniforms.f[12];
reg_tmp14 = mul_s(uniforms.f[15], vs_in_reg1);
reg_tmp13 = uniforms.f[93].yyyy + reg_tmp12.zwww;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp13);
reg_tmp14.y = (uniforms.f[14].wwww + reg_tmp14).y;
reg_tmp13 = mul_s(uniforms.f[14], reg_tmp13);
vs_out_attr0.xy = (reg_tmp12.xyyy).xy;
vs_out_attr0.zw = (uniforms.f[93].xxxy).zw;
vs_out_attr3.xyz = (reg_tmp13 + reg_tmp14).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[12], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[13].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[14].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_4();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 494u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 500u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B2644296BE8CCD, CED7D673F808D965
// shader: 8B30, 3195BF5BA5FA14CE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 00310758D62EA1D1, 3195BF5BA5FA14CE
// program: CED7D673F808D965, 29769686DF99D914, 3195BF5BA5FA14CE
// shader: 8B30, C85CBC708A5C98C5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4AFD38CA11A85E49, C85CBC708A5C98C5
// program: CED7D673F808D965, 29769686DF99D914, C85CBC708A5C98C5
// shader: 8B31, 66EE681BE47060DB

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 133u;
while (true) {
switch (jmp_to) {
case 133u:
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[12], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[13].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[14].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_4();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 494u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 500u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264422FE5C8DF, 66EE681BE47060DB
// shader: 8B30, 80A333D644D6BABC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EA2F7B88300DF27C, 80A333D644D6BABC
// program: 66EE681BE47060DB, 29769686DF99D914, 80A333D644D6BABC
// shader: 8B30, AEBDF325C19C6461
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E2197300DF27C, AEBDF325C19C6461
// program: 66EE681BE47060DB, 29769686DF99D914, AEBDF325C19C6461
// shader: 8B31, A04AAA662AA0571E

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_4() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_5();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_5() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_0() {
uint jmp_to = 417u;
while (true) {
switch (jmp_to) {
case 417u:
sub_1();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_4();
sub_6();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
// reference: F2B2644283528114, A04AAA662AA0571E
// shader: 8B30, 06A462AD4F315107
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 31866A77B9DEA6BC, 06A462AD4F315107
// program: A04AAA662AA0571E, 29769686DF99D914, 06A462AD4F315107
// shader: 8B31, 25831E40F9585075

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_15();
bool sub_8();
bool sub_14();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_9();
bool sub_7();
bool sub_1();
bool sub_0();
bool sub_12();
bool sub_10();
bool sub_11();
bool sub_13();

bool exec_shader() {
sub_0();
return true;
}

bool sub_15() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_14() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_9() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_7() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_1() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_7();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_0() {
uint jmp_to = 304u;
while (true) {
switch (jmp_to) {
case 304u:
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_1();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_1();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
sub_9();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_10();
} else {
sub_11();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_12();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_8();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_10();
} else {
sub_11();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_10() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_11() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_13() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B26442120D1659, 25831E40F9585075
// shader: 8B30, 7580CE23642E8337
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A0361ACC0F605967, 7580CE23642E8337
// program: 25831E40F9585075, 29769686DF99D914, 7580CE23642E8337
// shader: 8B31, 732A3537A3AA3E5B

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_6();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_0() {
uint jmp_to = 432u;
while (true) {
switch (jmp_to) {
case 432u:
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_3();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_6();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_6();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
// reference: F2B26442D8F110AD, 732A3537A3AA3E5B
// shader: 8B30, E38536B65C2108A5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E8DCE8FFB5E8CB96, E38536B65C2108A5
// program: 732A3537A3AA3E5B, 29769686DF99D914, E38536B65C2108A5
// shader: 8B30, 2A881FA6D735842C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 11776C80B77D2EC0, 2A881FA6D735842C
// program: 25831E40F9585075, 29769686DF99D914, 2A881FA6D735842C
// shader: 8B30, F1E1E21E098B21D2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 599D9EB30DF5BC31, F1E1E21E098B21D2
// program: 732A3537A3AA3E5B, 29769686DF99D914, F1E1E21E098B21D2
// shader: 8B31, A6007D3EDBCE2781

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_6();
bool sub_12();
bool sub_17();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_6() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 148u;
while (true) {
switch (jmp_to) {
case 148u:
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_3();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_3();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_3();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_3();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 494u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 500u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B2644274465966, A6007D3EDBCE2781
// shader: 8B30, DE27EBFE5AD58922
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 003107583B474E9A, DE27EBFE5AD58922
// program: A6007D3EDBCE2781, 29769686DF99D914, DE27EBFE5AD58922
// shader: 8B30, 27C795293D1F7251
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 31866A775E711B78, 27C795293D1F7251
// program: A04AAA662AA0571E, 29769686DF99D914, 27C795293D1F7251
// shader: 8B30, E0244D477EC39C66
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 57E90DBD80D4D2AD, E0244D477EC39C66
// program: A04AAA662AA0571E, 29769686DF99D914, E0244D477EC39C66
// shader: 8B31, 9B54FF16E580361C

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 165u;
while (true) {
switch (jmp_to) {
case 165u:
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_4();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 500u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264421D5AC962, 9B54FF16E580361C
// shader: 8B30, 28B252EFC1B2DC46
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E21977A9B4B6A, 28B252EFC1B2DC46
// program: 9B54FF16E580361C, 29769686DF99D914, 28B252EFC1B2DC46
// shader: 8B30, A7EDE1AEDB02979A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 030DC4B67A9B4B6A, A7EDE1AEDB02979A
// program: 9B54FF16E580361C, 29769686DF99D914, A7EDE1AEDB02979A
// shader: 8B30, A4AC86D05568DCAB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.aaa), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 94572C0152FBDD43, A4AC86D05568DCAB
// program: 9B54FF16E580361C, 29769686DF99D914, A4AC86D05568DCAB
// shader: 8B30, 2A9D454212F8DEB0
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 819AC291F2213FA2, 2A9D454212F8DEB0
// program: F3E1ED67E9AEC446, 29769686DF99D914, 2A9D454212F8DEB0
// shader: 8B30, 80F6B89DDB1060F4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb) + (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 527FDA22FA1C8D0D, 80F6B89DDB1060F4
// program: F3E1ED67E9AEC446, 29769686DF99D914, 80F6B89DDB1060F4
// shader: 8B30, 70D64BCC7EE00637
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (const_color[2].a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2E6F2C710C7890EB, 70D64BCC7EE00637
// program: CED7D673F808D965, 29769686DF99D914, 70D64BCC7EE00637
// shader: 8B30, 4AA466291F472EEC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7D75BC0267FD8C6B, 4AA466291F472EEC
// program: 25831E40F9585075, 29769686DF99D914, 4AA466291F472EEC
// shader: 8B30, 627CF2772236C44F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 359F4E31DD751E9A, 627CF2772236C44F
// program: 732A3537A3AA3E5B, 29769686DF99D914, 627CF2772236C44F
// shader: 8B30, 1F89A7ADC2A7837F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A9484A83B7B073EB, 1F89A7ADC2A7837F
// program: A04AAA662AA0571E, 29769686DF99D914, 1F89A7ADC2A7837F
// shader: 8B30, 7C110C094A4DB684
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A9484A83501FCE2F, 7C110C094A4DB684
// program: A04AAA662AA0571E, 29769686DF99D914, 7C110C094A4DB684
// shader: 8B30, C57CD65AC6CD92A4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 003107587B17A503, C57CD65AC6CD92A4
// program: CED7D673F808D965, 29769686DF99D914, C57CD65AC6CD92A4
// shader: 8B30, 6B08A8F2E3D97E01
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4AFD38CABC915A9B, 6B08A8F2E3D97E01
// program: CED7D673F808D965, 29769686DF99D914, 6B08A8F2E3D97E01
// shader: 8B30, 00986C2BFC4DEA75
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EA2F7B889D34F6AE, 00986C2BFC4DEA75
// program: 66EE681BE47060DB, 29769686DF99D914, 00986C2BFC4DEA75
// shader: 8B30, 15A142540A4F529A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E21979D34F6AE, 15A142540A4F529A
// program: 66EE681BE47060DB, 29769686DF99D914, 15A142540A4F529A
// shader: 8B31, 7D0E137D17488E58

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_16();
bool sub_10();
bool sub_15();
bool sub_5();
bool sub_6();
bool sub_7();
bool sub_2();
bool sub_3();
bool sub_4();
bool sub_9();
bool sub_8();
bool sub_1();
bool sub_0();
bool sub_13();
bool sub_11();
bool sub_12();
bool sub_14();

bool exec_shader() {
sub_0();
return true;
}

bool sub_16() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_7() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_4() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_8() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_5();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_1() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
sub_5();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_0() {
uint jmp_to = 295u;
while (true) {
switch (jmp_to) {
case 295u:
sub_1();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_1();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_8();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_8();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
sub_4();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_13();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_14();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_16();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_5();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_13() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_11() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_12() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_14() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264421CD7E6F0, 7D0E137D17488E58
// shader: 8B30, 08E40F4B2EC07328
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3B60B8522D35BCC9, 08E40F4B2EC07328
// program: 7D0E137D17488E58, 29769686DF99D914, 08E40F4B2EC07328
// reference: 00310758C0E2C821, DE27EBFE5AD58922
// shader: 8B30, 11078579C3829754
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0031075831811C15, 11078579C3829754
// program: CED7D673F808D965, 29769686DF99D914, 11078579C3829754
// shader: 8B30, 1A57C495DCC9B737
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4AFD38CAF607E38D, 1A57C495DCC9B737
// program: CED7D673F808D965, 29769686DF99D914, 1A57C495DCC9B737
// shader: 8B30, C1236ECD85DFB8D9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EA2F7B88D7A24FB8, C1236ECD85DFB8D9
// program: 66EE681BE47060DB, 29769686DF99D914, C1236ECD85DFB8D9
// shader: 8B30, 2E339CAA400EDFFB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E2197D7A24FB8, 2E339CAA400EDFFB
// program: 66EE681BE47060DB, 29769686DF99D914, 2E339CAA400EDFFB
// shader: 8B30, A57E2E42DA6EA50B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 030DC4B6300DF27C, A57E2E42DA6EA50B
// program: 9B54FF16E580361C, 29769686DF99D914, A57E2E42DA6EA50B
// shader: 8B31, BD6F29B021AA95AD

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_5();
bool sub_6();
bool sub_2();
bool sub_9();
bool sub_3();
bool sub_4();
bool sub_7();
bool sub_8();
bool sub_1();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_5() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_9() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_4() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_7() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_8();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_8() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_1() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
bool sub_0() {
uint jmp_to = 400u;
while (true) {
switch (jmp_to) {
case 400u:
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_1();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_2();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_5();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_6();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_7();
sub_9();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_6();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_6();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
// reference: F2B26442EA4E1110, BD6F29B021AA95AD
// shader: 8B30, 99D0B953BF908601
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E3D6537FDDB726D3, 99D0B953BF908601
// program: BD6F29B021AA95AD, 29769686DF99D914, 99D0B953BF908601
// shader: 8B31, 0E07593EF870A384

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_5();
bool sub_6();
bool sub_7();
bool sub_2();
bool sub_3();
bool sub_4();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_7() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_4() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 184u;
while (true) {
switch (jmp_to) {
case 184u:
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_4();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_5();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_4();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_5();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_5();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_5();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_5();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
sub_5();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_4();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_5();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_5();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
sub_5();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B26442EC0B9AFB, 0E07593EF870A384
// shader: 8B30, D51A4397B89F4FC2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E21977674D1E4, D51A4397B89F4FC2
// program: 0E07593EF870A384, 29769686DF99D914, D51A4397B89F4FC2
// shader: 8B30, 36B7E73333B9FDD4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 00310758D18B87B9, 36B7E73333B9FDD4
// program: A6007D3EDBCE2781, 29769686DF99D914, 36B7E73333B9FDD4
// shader: 8B30, 157D03EC0D7090DF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5099181CD085AC21, 157D03EC0D7090DF
// program: 25831E40F9585075, 29769686DF99D914, 157D03EC0D7090DF
// reference: 00310758177D45AD, DE27EBFE5AD58922
// shader: 8B30, C2BE47ADF67503C8
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 918740CAA281FD15, C2BE47ADF67503C8
// program: 25831E40F9585075, 29769686DF99D914, C2BE47ADF67503C8
// shader: 8B31, C25988132E1A18BE

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_15();
bool sub_8();
bool sub_14();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_9();
bool sub_7();
bool sub_1();
bool sub_0();
bool sub_12();
bool sub_10();
bool sub_11();
bool sub_13();

bool exec_shader() {
sub_0();
return true;
}

bool sub_15() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_14() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_9() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_7() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_1() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_7();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_0() {
uint jmp_to = 309u;
while (true) {
switch (jmp_to) {
case 309u:
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_1();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
sub_9();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_10();
} else {
sub_11();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_12();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_8();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_8();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_10();
} else {
sub_11();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_10() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_11() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_13() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264426DC8C7C1, C25988132E1A18BE
// shader: 8B30, 49424AD092F8FA7D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C4F0C528F9F7B3EA, 49424AD092F8FA7D
// program: C25988132E1A18BE, 29769686DF99D914, 49424AD092F8FA7D
// shader: 8B31, C85D29A0651118CB

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_3();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 145u;
while (true) {
switch (jmp_to) {
case 145u:
sub_1();
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
if (uniforms.b[14]) {
jmp_to = 494u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_2();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_4();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_2();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 494u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 500u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264420B8388FE, C85D29A0651118CB
// program: C85D29A0651118CB, 29769686DF99D914, DE27EBFE5AD58922
// shader: 8B30, A741142BE90828FF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E2197671D9E7C, A741142BE90828FF
// program: 0E07593EF870A384, 29769686DF99D914, A741142BE90828FF
// shader: 8B30, 62CF20AD9C3B5F15
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 22C80BA9AFB377E7, 62CF20AD9C3B5F15
// program: BD6F29B021AA95AD, 29769686DF99D914, 62CF20AD9C3B5F15
// shader: 8B31, 88924C5D7CCF8608

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_2();
bool sub_3();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 466u;
while (true) {
switch (jmp_to) {
case 466u:
sub_1();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
// reference: F2B264420AC830A5, 88924C5D7CCF8608
// shader: 8B30, 6BE3CE77B67206F7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6778CDB1347C11FF, 6BE3CE77B67206F7
// program: 88924C5D7CCF8608, 29769686DF99D914, 6BE3CE77B67206F7
// shader: 8B30, CE594AD09F974E1D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 32D2C6481E8DCEA7, CE594AD09F974E1D
// program: 732A3537A3AA3E5B, 29769686DF99D914, CE594AD09F974E1D
// shader: 8B30, E6BA48B44EC7BDFE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D96DB2F918096FE4, E6BA48B44EC7BDFE
// program: 732A3537A3AA3E5B, 29769686DF99D914, E6BA48B44EC7BDFE
// shader: 8B31, D3DE5FEDC7338677

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_6();
bool sub_12();
bool sub_17();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_6() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 177u;
while (true) {
switch (jmp_to) {
case 177u:
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_3();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_3();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_3();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_3();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B26442393C8943, D3DE5FEDC7338677
// shader: 8B30, 3874910AF92BADFE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4C516198B08213F0, 3874910AF92BADFE
// program: D3DE5FEDC7338677, 29769686DF99D914, 3874910AF92BADFE
// reference: 349E2197B08213F0, A741142BE90828FF
// shader: 8B30, C400ED05281D2130
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6778CDB125155E67, C400ED05281D2130
// program: 88924C5D7CCF8608, 29769686DF99D914, C400ED05281D2130
// shader: 8B30, 071A1A4EAF62F8F6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BDC5B4A6B3D7B870, 071A1A4EAF62F8F6
// program: BD6F29B021AA95AD, 29769686DF99D914, 071A1A4EAF62F8F6
// shader: 8B30, 2A440E20C4952052
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0E8AFFC5BEE53282, 2A440E20C4952052
// program: 25831E40F9585075, 29769686DF99D914, 2A440E20C4952052
// shader: 8B30, E772CD1DAF49803B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A7A6F32AB3D7B870, E772CD1DAF49803B
// program: BD6F29B021AA95AD, 29769686DF99D914, E772CD1DAF49803B
// shader: 8B30, 125F00CEF8C4C674
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 14E9B849BEE53282, 125F00CEF8C4C674
// program: 25831E40F9585075, 29769686DF99D914, 125F00CEF8C4C674
// shader: 8B30, BEF11EF828E220B8
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 419E3DABE5937C7D, BEF11EF828E220B8
// program: C25988132E1A18BE, 29769686DF99D914, BEF11EF828E220B8
// shader: 8B30, EA24950E3BB060E0
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E21635322818DE68, EA24950E3BB060E0
// program: 88924C5D7CCF8608, 29769686DF99D914, EA24950E3BB060E0
// shader: 8B30, 18A9F78A77BE46C6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B7BC3ECB02E90130, 18A9F78A77BE46C6
// program: 732A3537A3AA3E5B, 29769686DF99D914, 18A9F78A77BE46C6
// shader: 8B30, BAFBCBE72A601339
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5C034A7A046DA073, BAFBCBE72A601339
// program: 732A3537A3AA3E5B, 29769686DF99D914, BAFBCBE72A601339
// shader: 8B30, 0AD9D9B10F9DFFB6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E2163532397191F0, 0AD9D9B10F9DFFB6
// program: 88924C5D7CCF8608, 29769686DF99D914, 0AD9D9B10F9DFFB6
// shader: 8B30, 8917ED875EE04B7E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: DF169F1B5DB54031, 8917ED875EE04B7E
// program: BD6F29B021AA95AD, 29769686DF99D914, 8917ED875EE04B7E
// shader: 8B30, 84B8DA0248F24614
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6C59D4785087CAC3, 84B8DA0248F24614
// program: 25831E40F9585075, 29769686DF99D914, 84B8DA0248F24614
// shader: 8B30, 094A050E9E05E7D6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E40E0762CE1B17A3, 094A050E9E05E7D6
// program: BD6F29B021AA95AD, 29769686DF99D914, 094A050E9E05E7D6
// shader: 8B30, CB9BFAB90255B7BE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 57414C01C3299D51, CB9BFAB90255B7BE
// program: 25831E40F9585075, 29769686DF99D914, CB9BFAB90255B7BE
// shader: 8B30, 0D4834986A3F51C2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0236C9E3985FD3AE, 0D4834986A3F51C2
// program: C25988132E1A18BE, 29769686DF99D914, 0D4834986A3F51C2
// shader: 8B30, 14AD6E13B350CA9E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A1BEC17A44BD3E23, 14AD6E13B350CA9E
// program: 88924C5D7CCF8608, 29769686DF99D914, 14AD6E13B350CA9E
// shader: 8B30, 28845B5A96DBED37
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F414CA837F25AEE3, 28845B5A96DBED37
// program: 732A3537A3AA3E5B, 29769686DF99D914, 28845B5A96DBED37
// shader: 8B30, 7516BDCEFB27B5F6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1FABBE3279A10FA0, 7516BDCEFB27B5F6
// program: 732A3537A3AA3E5B, 29769686DF99D914, 7516BDCEFB27B5F6
// shader: 8B30, 6041087D3618CD72
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 445870D4DD176E37, 6041087D3618CD72
// program: BD6F29B021AA95AD, 29769686DF99D914, 6041087D3618CD72
// shader: 8B30, B5DC2908B8361BA7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F7173BB7D025E4C5, B5DC2908B8361BA7
// program: 25831E40F9585075, 29769686DF99D914, B5DC2908B8361BA7
// shader: 8B30, 6745427FF46C4B12
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 587FE8C12AAE9F4D, 6745427FF46C4B12
// program: BD6F29B021AA95AD, 29769686DF99D914, 6745427FF46C4B12
// shader: 8B30, B37B5CE0DD9653C7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EB30A3A2279C15BF, B37B5CE0DD9653C7
// program: 25831E40F9585075, 29769686DF99D914, B37B5CE0DD9653C7
// shader: 8B30, 932042F95F01B47B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BE4726407CEA5B40, 932042F95F01B47B
// program: C25988132E1A18BE, 29769686DF99D914, 932042F95F01B47B
// shader: 8B30, 3FB2BCEA4A9F722B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1DCF2ED9A008B6CD, 3FB2BCEA4A9F722B
// program: 88924C5D7CCF8608, 29769686DF99D914, 3FB2BCEA4A9F722B
// shader: 8B30, 0F850BF40EEF024D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 486525209B90260D, 0F850BF40EEF024D
// program: 732A3537A3AA3E5B, 29769686DF99D914, 0F850BF40EEF024D
// shader: 8B30, B162AC63C4D12803
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A3DA51919D14874E, B162AC63C4D12803
// program: 732A3537A3AA3E5B, 29769686DF99D914, B162AC63C4D12803
// shader: 8B30, 1D79FE3C2A142B59
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 918740CA67FD8C6B, 1D79FE3C2A142B59
// program: 25831E40F9585075, 29769686DF99D914, 1D79FE3C2A142B59
// shader: 8B30, 0A7415C0B2500F9F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D96DB2F9DD751E9A, 0A7415C0B2500F9F
// program: 732A3537A3AA3E5B, 29769686DF99D914, 0A7415C0B2500F9F
// shader: 8B30, A34D918965B8C743
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A04C7CC1C8113840, A34D918965B8C743
// program: 25831E40F9585075, 29769686DF99D914, A34D918965B8C743
// shader: 8B30, 76DD4BA37615A24C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E8A68EF27299AAB1, 76DD4BA37615A24C
// program: 732A3537A3AA3E5B, 29769686DF99D914, 76DD4BA37615A24C
// shader: 8B30, 27FF1E4BF44E7B4A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1BE0458E765B2A11, 27FF1E4BF44E7B4A
// program: 66EE681BE47060DB, 29769686DF99D914, 27FF1E4BF44E7B4A
// shader: 8B30, 039AC3F9D7DEF32C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C5511F91765B2A11, 039AC3F9D7DEF32C
// program: 66EE681BE47060DB, 29769686DF99D914, 039AC3F9D7DEF32C
// shader: 8B30, 0F36ED0AFED0ED6A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].aaa) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 528D93E861A40320, 0F36ED0AFED0ED6A
// program: 66EE681BE47060DB, 29769686DF99D914, 0F36ED0AFED0ED6A
// shader: 8B30, F4A87E4919C96830
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1BE0458E91F497D5, F4A87E4919C96830
// program: 66EE681BE47060DB, 29769686DF99D914, F4A87E4919C96830
// shader: 8B30, CBC6EF4678E60EDD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C5511F9191F497D5, CBC6EF4678E60EDD
// program: 66EE681BE47060DB, 29769686DF99D914, CBC6EF4678E60EDD
// shader: 8B30, 4ECBBA2DAFFCD82B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A1BEC17A55D471BB, 4ECBBA2DAFFCD82B
// program: 88924C5D7CCF8608, 29769686DF99D914, 4ECBBA2DAFFCD82B
// shader: 8B30, 1DCB09FB108D1687
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor0.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1DCF2ED9B161F955, 1DCB09FB108D1687
// program: 88924C5D7CCF8608, 29769686DF99D914, 1DCB09FB108D1687
// shader: 8B30, 7DDEF281CE82A614
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 918740CA14D62818, 7DDEF281CE82A614
// program: 25831E40F9585075, 29769686DF99D914, 7DDEF281CE82A614
// shader: 8B30, DAFBBC46C018B62C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C4F0C5284FA066E7, DAFBBC46C018B62C
// program: C25988132E1A18BE, 29769686DF99D914, DAFBBC46C018B62C
// shader: 8B30, 0FC6803530CDBEDF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 22C80BA919E4A2EA, 0FC6803530CDBEDF
// program: BD6F29B021AA95AD, 29769686DF99D914, 0FC6803530CDBEDF
// program: C85D29A0651118CB, 29769686DF99D914, 36B7E73333B9FDD4
// shader: 8B31, 8C6F3BFC16CB64A7

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_9();
bool sub_4();
bool sub_8();
bool sub_12();
bool sub_5();
bool sub_6();
bool sub_10();
bool sub_11();
bool sub_1();
bool sub_2();
bool sub_3();
bool sub_0();
bool sub_7();

bool exec_shader() {
sub_0();
return true;
}

bool sub_9() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_4() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_8() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_10() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_11();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_11() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 364u;
while (true) {
switch (jmp_to) {
case 364u:
sub_1();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_7();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_9();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_4();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_10();
sub_12();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_4();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_4();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_7() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264422966D4FD, 8C6F3BFC16CB64A7
// shader: 8B30, 9E61A74253C586EA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 21698BCA6BB72BAB, 9E61A74253C586EA
// program: 8C6F3BFC16CB64A7, 29769686DF99D914, 9E61A74253C586EA
// shader: 8B30, 4A79C6552AC1772C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (const_color[3].rgb) + (const_color[3].aaa), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[4].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (combiner_buffer.rgb);
float alpha_output_5 = byteround(clamp((last_tex_env_out.r) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8A7F59D4BFB6F176, 4A79C6552AC1772C
// program: A04AAA662AA0571E, 29769686DF99D914, 4A79C6552AC1772C
// shader: 8B30, 8DCA7FD95A18E24E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D96DB2F9AE5EBAE9, 8DCA7FD95A18E24E
// program: 732A3537A3AA3E5B, 29769686DF99D914, 8DCA7FD95A18E24E
// shader: 8B30, E96B12D6ABAD183B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5099181C66D2792C, E96B12D6ABAD183B
// program: 25831E40F9585075, 29769686DF99D914, E96B12D6ABAD183B
// shader: 8B30, 19188844F456799D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D792449A5E1E18BA, 19188844F456799D
// program: 7D0E137D17488E58, 29769686DF99D914, 19188844F456799D
// shader: 8B30, CFC68A14A0BB656C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].aaa) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 528D93E8860BBEE4, CFC68A14A0BB656C
// program: 66EE681BE47060DB, 29769686DF99D914, CFC68A14A0BB656C
// shader: 8B30, 38BFEE1DE7A14381
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4C5161987674D1E4, 38BFEE1DE7A14381
// program: D3DE5FEDC7338677, 29769686DF99D914, 38BFEE1DE7A14381
// shader: 8B30, F2B3E20D302C1B32
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1873EA2FDC5AEBDD, F2B3E20D302C1B32
// program: 732A3537A3AA3E5B, 29769686DF99D914, F2B3E20D302C1B32
// shader: 8B30, 2D167899F5FD8004
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FD64DD3314D62818, 2D167899F5FD8004
// program: 25831E40F9585075, 29769686DF99D914, 2D167899F5FD8004
// shader: 8B30, 8B83D786D07682A3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B58E2F00AE5EBAE9, 8B83D786D07682A3
// program: 732A3537A3AA3E5B, 29769686DF99D914, 8B83D786D07682A3
// shader: 8B30, E3EFF588EBAE4FB0
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BB71D9635E1E18BA, E3EFF588EBAE4FB0
// program: 7D0E137D17488E58, 29769686DF99D914, E3EFF588EBAE4FB0
// shader: 8B30, 8E9CB450F7FA2FA4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 57E90DBD677B6F69, 8E9CB450F7FA2FA4
// program: 732A3537A3AA3E5B, 29769686DF99D914, 8E9CB450F7FA2FA4
// shader: 8B30, 08192C012F8A5B82
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 852875873B228ABF, 08192C012F8A5B82
// program: 9B54FF16E580361C, 29769686DF99D914, 08192C012F8A5B82
// shader: 8B30, E2CA2A293AD856E1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (const_color[2].a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2E6F2C71EBD72D2F, E2CA2A293AD856E1
// program: CED7D673F808D965, 29769686DF99D914, E2CA2A293AD856E1
// shader: 8DD9, 2B3CA2D56E434357

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)
layout(points) in;
layout(triangle_strip, max_vertices=30) out;
layout(location=1) out vec4 primary_color;
layout(location=2) out vec2 texcoord0;
layout(location=3) out vec2 texcoord1;
layout(location=4) out vec2 texcoord2;
layout(location=5) out float texcoord0_w;
layout(location=6) out vec4 normquat;
layout(location=7) out vec3 view;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

layout(location=0) in vec4 vs_out_attr0[];
layout(location=1) in vec4 vs_out_attr1[];
layout(location=2) in vec4 vs_out_attr2[];
layout(location=3) in vec4 vs_out_attr3[];
layout(location=4) in vec4 vs_out_attr4[];
layout(location=5) in vec4 vs_out_attr5[];

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms gs_uniforms
layout(binding=3, std140) uniform gs_config {
    pica_uniforms uniforms;
};
struct Vertex {
    vec4 attributes[6];
};

vec4 GetVertexQuaternion(Vertex vtx) {
    return vec4(vtx.attributes[1].x, vtx.attributes[1].y, vtx.attributes[1].z, vtx.attributes[1].w);
}

void EmitVtx(Vertex vtx, bool quats_opposite) {
    vec4 vtx_pos = vec4(vtx.attributes[0].x, vtx.attributes[0].y, vtx.attributes[0].z, vtx.attributes[0].w);
    gl_Position = vtx_pos;
#if !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)
    gl_ClipDistance[0] = -vtx_pos.z;
    gl_ClipDistance[1] = dot(clip_coef, vtx_pos);
#endif // !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)

    vec4 vtx_quat = GetVertexQuaternion(vtx);
    normquat = mix(vtx_quat, -vtx_quat, bvec4(quats_opposite));

    vec4 vtx_color = vec4(vtx.attributes[2].x, vtx.attributes[2].y, vtx.attributes[2].z, vtx.attributes[2].w);
    primary_color = clamp(vtx_color, vec4(0), vec4(1));

    texcoord0 = vec2(vtx.attributes[3].x, vtx.attributes[3].y);
    texcoord1 = vec2(vtx.attributes[5].x, vtx.attributes[5].y);

    texcoord0_w = vtx.attributes[3].w;
    view = vec3(vtx.attributes[4].x, vtx.attributes[4].y, vtx.attributes[4].z);
    texcoord2 = vec2(vtx.attributes[5].z, vtx.attributes[5].w);

    EmitVertex();
}

bool AreQuaternionsOpposite(vec4 qa, vec4 qb) {
    return (dot(qa, qb) < 0.0);
}

void EmitPrim(Vertex vtx0, Vertex vtx1, Vertex vtx2) {
    EmitVtx(vtx0, false);
    EmitVtx(vtx1, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx1)));
    EmitVtx(vtx2, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx2)));
    EndPrimitive();
}

Vertex output_buffer;
Vertex prim_buffer[3];
uint vertex_id = 0u;
bool prim_emit = false;
bool winding = false;
void setemit(uint vertex_id_, bool prim_emit_, bool winding_);
void emit();
void main() {
    output_buffer.attributes[0] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[1] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[2] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[3] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[4] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[5] = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}

void setemit(uint vertex_id_, bool prim_emit_, bool winding_) {
    vertex_id = vertex_id_;
    prim_emit = prim_emit_;
    winding = winding_;
}
void emit() {
    prim_buffer[vertex_id] = output_buffer;
    if (prim_emit) {
        if (winding) {
            EmitPrim(prim_buffer[1], prim_buffer[0], prim_buffer[2]);
            winding = false;
        } else {
            EmitPrim(prim_buffer[0], prim_buffer[1], prim_buffer[2]);
        }
    }
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_0();
bool sub_1();
bool sub_2();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_7();
bool sub_8();
bool sub_9();
bool sub_10();

bool exec_shader() {
sub_0();
return true;
}

bool sub_0() {
uint jmp_to = 1106u;
while (true) {
switch (jmp_to) {
case 1106u:
reg_tmp0.xy = (uniforms.f[42].xyyy).xy;
reg_tmp13 = uniforms.f[12];
reg_tmp14 = uniforms.f[18];
reg_tmp15 = uniforms.f[24];
reg_tmp10 = reg_tmp13 + -reg_tmp14;
reg_tmp11 = reg_tmp14 + -reg_tmp15;
reg_tmp12 = reg_tmp15 + -reg_tmp13;
reg_tmp7.x = dot_3(reg_tmp10.xyz, reg_tmp10.xyz);
reg_tmp8.x = dot_3(reg_tmp11.xyz, reg_tmp11.xyz);
reg_tmp9.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.x = rsq_s(reg_tmp7.x);
reg_tmp14.x = rsq_s(reg_tmp8.x);
reg_tmp15.x = rsq_s(reg_tmp9.x);
reg_tmp10 = mul_s(reg_tmp10, reg_tmp13.xxxx);
reg_tmp11 = mul_s(reg_tmp11, reg_tmp14.xxxx);
reg_tmp12 = mul_s(reg_tmp12, reg_tmp15.xxxx);
reg_tmp7 = uniforms.f[12];
reg_tmp8 = uniforms.f[18];
reg_tmp9 = uniforms.f[24];
reg_tmp10.xyz = (mul_s(uniforms.f[42].zzww, reg_tmp10.xyzz)).xyz;
reg_tmp11.xyz = (mul_s(uniforms.f[42].zzww, reg_tmp11.xyzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[42].zzww, reg_tmp12.xyzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp10.xyzz, uniforms.f[43].xxxx, reg_tmp7.xyzz)).xyz;
reg_tmp14.xyz = (fma_s(reg_tmp11.xyzz, uniforms.f[43].xxxx, reg_tmp8.xyzz)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp12.xyzz, uniforms.f[43].xxxx, reg_tmp9.xyzz)).xyz;
reg_tmp10 = uniforms.f[43];
reg_tmp4.xz = (mul_s(uniforms.f[42].xyyy, reg_tmp10.xxxx)).xz;
reg_tmp5.xz = (mul_s(uniforms.f[42].xyyy, reg_tmp10.xxxx)).xz;
reg_tmp6.xz = (mul_s(uniforms.f[42].xyyy, reg_tmp10.xxxx)).xz;
reg_tmp7 = reg_tmp4.xxxx;
reg_tmp8 = reg_tmp5.xxxx;
reg_tmp9 = reg_tmp6.xxxx;
reg_tmp13 = fma_s(reg_tmp7, uniforms.f[33], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp8, uniforms.f[33], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9, uniforms.f[33], reg_tmp15);
reg_tmp13.z = (reg_tmp13.zzzz + reg_tmp4.zzzz).z;
reg_tmp14.z = (reg_tmp14.zzzz + reg_tmp5.zzzz).z;
reg_tmp15.z = (reg_tmp15.zzzz + reg_tmp6.zzzz).z;
reg_tmp10.w = (uniforms.f[90].yyyy).w;
reg_tmp11.w = (uniforms.f[90].yyyy).w;
reg_tmp12.w = (uniforms.f[90].yyyy).w;
reg_tmp13.w = (uniforms.f[90].yyyy).w;
reg_tmp14.w = (uniforms.f[90].yyyy).w;
reg_tmp15.w = (uniforms.f[90].yyyy).w;
reg_tmp13.xyz = (uniforms.f[32].xyzz + reg_tmp13.xyzz).xyz;
reg_tmp14.xyz = (uniforms.f[32].xyzz + reg_tmp14.xyzz).xyz;
reg_tmp15.xyz = (uniforms.f[32].xyzz + reg_tmp15.xyzz).xyz;
reg_tmp10.xyz = (-uniforms.f[31] + reg_tmp13.xyzz).xyz;
reg_tmp11.xyz = (-uniforms.f[31] + reg_tmp14.xyzz).xyz;
reg_tmp12.xyz = (-uniforms.f[31] + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (mul_s(uniforms.f[91].zzzz, reg_tmp10.xyzz)).xyz;
reg_tmp14.xyz = (mul_s(uniforms.f[91].zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp15.xyz = (mul_s(uniforms.f[91].zzzz, reg_tmp12.xyzz)).xyz;
reg_tmp10.xyz = (uniforms.f[90].wwww + reg_tmp13.xyzz).xyz;
reg_tmp11.xyz = (uniforms.f[90].wwww + reg_tmp14.xyzz).xyz;
reg_tmp12.xyz = (uniforms.f[90].wwww + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (floor(reg_tmp10.xyzz)).xyz;
reg_tmp13.xyz = (reg_tmp10.xyzz + -reg_tmp13).xyz;
reg_tmp14.xyz = (floor(reg_tmp11.xyzz)).xyz;
reg_tmp14.xyz = (reg_tmp11.xyzz + -reg_tmp14).xyz;
reg_tmp15.xyz = (floor(reg_tmp12.xyzz)).xyz;
reg_tmp15.xyz = (reg_tmp12.xyzz + -reg_tmp15).xyz;
reg_tmp10.xyz = (-uniforms.f[90].wwww + reg_tmp13.xyzz).xyz;
reg_tmp11.xyz = (-uniforms.f[90].wwww + reg_tmp14.xyzz).xyz;
reg_tmp12.xyz = (-uniforms.f[90].wwww + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (mul_s(uniforms.f[92].zzzz, reg_tmp10.xyzz)).xyz;
reg_tmp14.xyz = (mul_s(uniforms.f[92].zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp15.xyz = (mul_s(uniforms.f[92].zzzz, reg_tmp12.xyzz)).xyz;
reg_tmp7.xyz = (uniforms.f[31] + reg_tmp13.xyzz).xyz;
reg_tmp8.xyz = (uniforms.f[31] + reg_tmp14.xyzz).xyz;
reg_tmp9.xyz = (uniforms.f[31] + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (reg_tmp7.xyzz).xyz;
reg_tmp14.xyz = (reg_tmp8.xyzz).xyz;
reg_tmp15.xyz = (reg_tmp9.xyzz).xyz;
reg_tmp10.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp10.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp10.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp14);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp14);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp14);
reg_tmp12.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp12.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp12.z = dot_s(uniforms.f[6], reg_tmp15);
reg_tmp13 = reg_tmp10;
reg_tmp14 = reg_tmp11;
reg_tmp15 = reg_tmp12;
reg_tmp7.x = (uniforms.f[34].xxxx).x;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[41].xxxx, reg_tmp13.xxxx)).x;
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[41].xxxx, reg_tmp14.xxxx)).x;
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[41].xxxx, reg_tmp15.xxxx)).x;
reg_tmp7.y = (uniforms.f[34].xxxx).y;
reg_tmp8.y = (uniforms.f[34].xxxx).y;
reg_tmp9.y = (uniforms.f[34].xxxx).y;
reg_tmp10.w = (uniforms.f[34].zzzz).w;
reg_tmp4.w = (-reg_tmp13.zzzz).w;
reg_tmp4.w = (reg_tmp4.wwww + -reg_tmp10.wwww).w;
reg_tmp13.w = (uniforms.f[90].yyyy + -reg_tmp4.wwww).w;
reg_tmp4.w = (min_s(uniforms.f[90].yyyy, reg_tmp13.wwww)).w;
reg_tmp13.w = (max_s(uniforms.f[90].xxxx, reg_tmp4.wwww)).w;
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[41].yyyy, reg_tmp13.yyyy)).y;
reg_tmp4.w = (-reg_tmp13.zzzz).w;
reg_tmp5.w = (uniforms.f[34].yyyy).w;
reg_tmp6.w = (reg_tmp4.wwww + -reg_tmp5.wwww).w;
reg_tmp5.w = (min_s(uniforms.f[90].yyyy, reg_tmp6.wwww)).w;
reg_tmp4.w = (max_s(uniforms.f[90].xxxx, reg_tmp5.wwww)).w;
reg_tmp14.w = (reg_tmp4.wwww).w;
reg_tmp10.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
reg_tmp4.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, false, false);
emit();
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[41].wwww, reg_tmp13.yyyy)).y;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[41].zzzz, reg_tmp13.xxxx)).x;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[40].yyyy, reg_tmp13.yyyy)).y;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[40].xxxx, reg_tmp13.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(1u, false, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].xxxx;
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[40].wwww, reg_tmp13.yyyy)).y;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[40].zzzz, reg_tmp13.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
setemit(2u, true, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, true, true);
emit();
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[41].yyyy, reg_tmp14.yyyy)).y;
reg_tmp4.w = (-reg_tmp14.zzzz).w;
reg_tmp5.w = (uniforms.f[34].yyyy).w;
reg_tmp6.w = (reg_tmp4.wwww + -reg_tmp5.wwww).w;
reg_tmp5.w = (min_s(uniforms.f[90].yyyy, reg_tmp6.wwww)).w;
reg_tmp4.w = (max_s(uniforms.f[90].xxxx, reg_tmp5.wwww)).w;
reg_tmp14.w = (reg_tmp4.wwww).w;
reg_tmp11.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
reg_tmp5.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
setemit(0u, false, false);
emit();
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[41].wwww, reg_tmp14.yyyy)).y;
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[41].zzzz, reg_tmp14.xxxx)).x;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[40].yyyy, reg_tmp14.yyyy)).y;
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[40].xxxx, reg_tmp14.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
setemit(1u, false, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].xxxx;
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[40].wwww, reg_tmp14.yyyy)).y;
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[40].zzzz, reg_tmp14.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
setemit(2u, true, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
setemit(0u, true, true);
emit();
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[41].yyyy, reg_tmp15.yyyy)).y;
reg_tmp4.w = (-reg_tmp15.zzzz).w;
reg_tmp5.w = (uniforms.f[34].yyyy).w;
reg_tmp6.w = (reg_tmp4.wwww + -reg_tmp5.wwww).w;
reg_tmp5.w = (min_s(uniforms.f[90].yyyy, reg_tmp6.wwww)).w;
reg_tmp4.w = (max_s(uniforms.f[90].xxxx, reg_tmp5.wwww)).w;
reg_tmp14.w = (reg_tmp4.wwww).w;
reg_tmp12.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
reg_tmp6.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, false);
emit();
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[41].wwww, reg_tmp15.yyyy)).y;
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[41].zzzz, reg_tmp15.xxxx)).x;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[40].yyyy, reg_tmp15.yyyy)).y;
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[40].xxxx, reg_tmp15.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].xxxx;
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[40].wwww, reg_tmp15.yyyy)).y;
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[40].zzzz, reg_tmp15.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
setemit(2u, true, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, true);
emit();
if (uniforms.b[14]) {
jmp_to = 2456u; break;
}
reg_tmp0.xy = (uniforms.f[42].xyyy).xy;
reg_tmp13 = uniforms.f[12];
reg_tmp14 = uniforms.f[18];
reg_tmp15 = uniforms.f[24];
reg_tmp10 = reg_tmp13 + -reg_tmp14;
reg_tmp11 = reg_tmp14 + -reg_tmp15;
reg_tmp12 = reg_tmp15 + -reg_tmp13;
reg_tmp7.x = dot_3(reg_tmp10.xyz, reg_tmp10.xyz);
reg_tmp8.x = dot_3(reg_tmp11.xyz, reg_tmp11.xyz);
reg_tmp9.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.x = rsq_s(reg_tmp7.x);
reg_tmp14.x = rsq_s(reg_tmp8.x);
reg_tmp15.x = rsq_s(reg_tmp9.x);
reg_tmp10 = mul_s(reg_tmp10, reg_tmp13.xxxx);
reg_tmp11 = mul_s(reg_tmp11, reg_tmp14.xxxx);
reg_tmp12 = mul_s(reg_tmp12, reg_tmp15.xxxx);
reg_tmp7 = uniforms.f[12];
reg_tmp8 = uniforms.f[18];
reg_tmp9 = uniforms.f[24];
reg_tmp10.xyz = (mul_s(uniforms.f[42].zzww, reg_tmp10.xyzz)).xyz;
reg_tmp11.xyz = (mul_s(uniforms.f[42].zzww, reg_tmp11.xyzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[42].zzww, reg_tmp12.xyzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp10.xyzz, uniforms.f[43].xxxx, reg_tmp7.xyzz)).xyz;
reg_tmp14.xyz = (fma_s(reg_tmp11.xyzz, uniforms.f[43].xxxx, reg_tmp8.xyzz)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp12.xyzz, uniforms.f[43].xxxx, reg_tmp9.xyzz)).xyz;
reg_tmp10 = uniforms.f[43];
reg_tmp4.xz = (mul_s(uniforms.f[42].xyyy, reg_tmp10.xxxx)).xz;
reg_tmp5.xz = (mul_s(uniforms.f[42].xyyy, reg_tmp10.xxxx)).xz;
reg_tmp6.xz = (mul_s(uniforms.f[42].xyyy, reg_tmp10.xxxx)).xz;
reg_tmp7 = reg_tmp4.xxxx;
reg_tmp8 = reg_tmp5.xxxx;
reg_tmp9 = reg_tmp6.xxxx;
reg_tmp13 = fma_s(reg_tmp7, uniforms.f[33], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp8, uniforms.f[33], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9, uniforms.f[33], reg_tmp15);
reg_tmp13.z = (reg_tmp13.zzzz + reg_tmp4.zzzz).z;
reg_tmp14.z = (reg_tmp14.zzzz + reg_tmp5.zzzz).z;
reg_tmp15.z = (reg_tmp15.zzzz + reg_tmp6.zzzz).z;
reg_tmp10.w = (uniforms.f[90].yyyy).w;
reg_tmp11.w = (uniforms.f[90].yyyy).w;
reg_tmp12.w = (uniforms.f[90].yyyy).w;
reg_tmp13.w = (uniforms.f[90].yyyy).w;
reg_tmp14.w = (uniforms.f[90].yyyy).w;
reg_tmp15.w = (uniforms.f[90].yyyy).w;
reg_tmp13.xyz = (uniforms.f[32].xyzz + reg_tmp13.xyzz).xyz;
reg_tmp14.xyz = (uniforms.f[32].xyzz + reg_tmp14.xyzz).xyz;
reg_tmp15.xyz = (uniforms.f[32].xyzz + reg_tmp15.xyzz).xyz;
reg_tmp10.xyz = (-uniforms.f[31] + reg_tmp13.xyzz).xyz;
reg_tmp11.xyz = (-uniforms.f[31] + reg_tmp14.xyzz).xyz;
reg_tmp12.xyz = (-uniforms.f[31] + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (mul_s(uniforms.f[91].zzzz, reg_tmp10.xyzz)).xyz;
reg_tmp14.xyz = (mul_s(uniforms.f[91].zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp15.xyz = (mul_s(uniforms.f[91].zzzz, reg_tmp12.xyzz)).xyz;
reg_tmp10.xyz = (uniforms.f[90].wwww + reg_tmp13.xyzz).xyz;
reg_tmp11.xyz = (uniforms.f[90].wwww + reg_tmp14.xyzz).xyz;
reg_tmp12.xyz = (uniforms.f[90].wwww + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (floor(reg_tmp10.xyzz)).xyz;
reg_tmp13.xyz = (reg_tmp10.xyzz + -reg_tmp13).xyz;
reg_tmp14.xyz = (floor(reg_tmp11.xyzz)).xyz;
reg_tmp14.xyz = (reg_tmp11.xyzz + -reg_tmp14).xyz;
reg_tmp15.xyz = (floor(reg_tmp12.xyzz)).xyz;
reg_tmp15.xyz = (reg_tmp12.xyzz + -reg_tmp15).xyz;
reg_tmp10.xyz = (-uniforms.f[90].wwww + reg_tmp13.xyzz).xyz;
reg_tmp11.xyz = (-uniforms.f[90].wwww + reg_tmp14.xyzz).xyz;
reg_tmp12.xyz = (-uniforms.f[90].wwww + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (mul_s(uniforms.f[92].zzzz, reg_tmp10.xyzz)).xyz;
reg_tmp14.xyz = (mul_s(uniforms.f[92].zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp15.xyz = (mul_s(uniforms.f[92].zzzz, reg_tmp12.xyzz)).xyz;
reg_tmp7.xyz = (uniforms.f[31] + reg_tmp13.xyzz).xyz;
reg_tmp8.xyz = (uniforms.f[31] + reg_tmp14.xyzz).xyz;
reg_tmp9.xyz = (uniforms.f[31] + reg_tmp15.xyzz).xyz;
reg_tmp13.xyz = (reg_tmp7.xyzz).xyz;
reg_tmp14.xyz = (reg_tmp8.xyzz).xyz;
reg_tmp15.xyz = (reg_tmp9.xyzz).xyz;
reg_tmp10.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp10.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp10.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp14);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp14);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp14);
reg_tmp12.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp12.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp12.z = dot_s(uniforms.f[6], reg_tmp15);
reg_tmp13 = reg_tmp10;
reg_tmp14 = reg_tmp11;
reg_tmp15 = reg_tmp12;
reg_tmp7.x = (uniforms.f[34].xxxx).x;
reg_tmp7.y = (uniforms.f[34].xxxx).y;
reg_tmp8.y = (uniforms.f[34].xxxx).y;
reg_tmp9.y = (uniforms.f[34].xxxx).y;
reg_tmp10.w = (uniforms.f[34].zzzz).w;
reg_tmp4.w = (-reg_tmp13.zzzz).w;
reg_tmp4.w = (reg_tmp4.wwww + -reg_tmp10.wwww).w;
reg_tmp13.w = (uniforms.f[90].yyyy + -reg_tmp4.wwww).w;
reg_tmp4.w = (min_s(uniforms.f[90].yyyy, reg_tmp13.wwww)).w;
reg_tmp13.w = (max_s(uniforms.f[90].xxxx, reg_tmp4.wwww)).w;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[37].xxxx, reg_tmp13.xxxx)).x;
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[37].yyyy, reg_tmp13.yyyy)).y;
reg_tmp4.w = (-reg_tmp13.zzzz).w;
reg_tmp5.w = (uniforms.f[34].yyyy).w;
reg_tmp6.w = (reg_tmp4.wwww + -reg_tmp5.wwww).w;
reg_tmp5.w = (min_s(uniforms.f[90].yyyy, reg_tmp6.wwww)).w;
reg_tmp4.w = (max_s(uniforms.f[90].xxxx, reg_tmp5.wwww)).w;
reg_tmp14.w = (min_s(reg_tmp13.wwww, reg_tmp4.wwww)).w;
reg_tmp10.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
reg_tmp4.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, false, false);
emit();
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[38].yyyy, reg_tmp13.yyyy)).y;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[38].xxxx, reg_tmp13.xxxx)).x;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[35].yyyy, reg_tmp13.yyyy)).y;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[35].xxxx, reg_tmp13.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(1u, false, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].xxxx;
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
reg_tmp10.y = (fma_s(reg_tmp7.yyyy, uniforms.f[36].yyyy, reg_tmp13.yyyy)).y;
reg_tmp10.x = (fma_s(reg_tmp7.xxxx, uniforms.f[36].xxxx, reg_tmp13.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
reg_tmp4.xyz = (reg_tmp10.xyzz).xyz;
setemit(2u, true, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, true, true);
emit();
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[37].xxxx, reg_tmp14.xxxx)).x;
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[37].yyyy, reg_tmp14.yyyy)).y;
reg_tmp4.w = (-reg_tmp14.zzzz).w;
reg_tmp5.w = (uniforms.f[34].yyyy).w;
reg_tmp6.w = (reg_tmp4.wwww + -reg_tmp5.wwww).w;
reg_tmp5.w = (min_s(uniforms.f[90].yyyy, reg_tmp6.wwww)).w;
reg_tmp4.w = (max_s(uniforms.f[90].xxxx, reg_tmp5.wwww)).w;
reg_tmp14.w = (min_s(reg_tmp13.wwww, reg_tmp4.wwww)).w;
reg_tmp11.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
reg_tmp5.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
setemit(0u, false, false);
emit();
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[38].yyyy, reg_tmp14.yyyy)).y;
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[38].xxxx, reg_tmp14.xxxx)).x;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[35].yyyy, reg_tmp14.yyyy)).y;
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[35].xxxx, reg_tmp14.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
setemit(1u, false, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].xxxx;
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
reg_tmp11.y = (fma_s(reg_tmp8.yyyy, uniforms.f[36].yyyy, reg_tmp14.yyyy)).y;
reg_tmp11.x = (fma_s(reg_tmp7.xxxx, uniforms.f[36].xxxx, reg_tmp14.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
reg_tmp5.xyz = (reg_tmp11.xyzz).xyz;
setemit(2u, true, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp5);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp5);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp5);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp5);
setemit(0u, true, true);
emit();
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[37].xxxx, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[37].yyyy, reg_tmp15.yyyy)).y;
reg_tmp4.w = (-reg_tmp15.zzzz).w;
reg_tmp5.w = (uniforms.f[34].yyyy).w;
reg_tmp6.w = (reg_tmp4.wwww + -reg_tmp5.wwww).w;
reg_tmp5.w = (min_s(uniforms.f[90].yyyy, reg_tmp6.wwww)).w;
reg_tmp4.w = (max_s(uniforms.f[90].xxxx, reg_tmp5.wwww)).w;
reg_tmp14.w = (min_s(reg_tmp13.wwww, reg_tmp4.wwww)).w;
reg_tmp12.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
reg_tmp6.w = (uniforms.f[90].yyyy).w;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, false);
emit();
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[38].yyyy, reg_tmp15.yyyy)).y;
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[38].xxxx, reg_tmp15.xxxx)).x;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
output_buffer.attributes[2].w = (reg_tmp14.wwww).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[90].wwww, reg_tmp14.wwww)).xyz;
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[35].yyyy, reg_tmp15.yyyy)).y;
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[35].xxxx, reg_tmp15.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].xxxx;
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
reg_tmp12.y = (fma_s(reg_tmp9.yyyy, uniforms.f[36].yyyy, reg_tmp15.yyyy)).y;
reg_tmp12.x = (fma_s(reg_tmp7.xxxx, uniforms.f[36].xxxx, reg_tmp15.xxxx)).x;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
reg_tmp6.xyz = (reg_tmp12.xyzz).xyz;
setemit(2u, true, false);
emit();
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, true);
emit();
if (uniforms.b[14]) {
jmp_to = 2456u; break;
}
reg_tmp7 = uniforms.f[12];
reg_tmp13.xyz = (uniforms.f[13].xyzz).xyz;
reg_tmp8.w = (uniforms.f[13].wwww).w;
reg_tmp8.xyz = (mul_s(uniforms.f[34].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp9.w = (uniforms.f[34].yyyy).w;
reg_tmp9.z = (uniforms.f[34].zzzz).z;
reg_tmp4 = mul_s(uniforms.f[34].wwww, reg_tmp8.wwww);
bool_regs = greaterThan(uniforms.f[90].ww, reg_tmp4.xx);
if (bool_regs.x) {
sub_1();
} else {
sub_2();
}
reg_tmp15 = reg_tmp12 + -reg_tmp11;
reg_tmp15 = fma_s(reg_tmp15, reg_tmp10, reg_tmp11);
reg_tmp15.xyz = (fma_s(reg_tmp8.xyzz, reg_tmp8.wwww, reg_tmp7.xyzz)).xyz;
reg_tmp11.xy = (uniforms.f[90].xxxx).xy;
reg_tmp11.z = (reg_tmp9.wwww).z;
reg_tmp12.xyz = (fma_s(reg_tmp13.xyzz, reg_tmp9.zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp10.xyz = (mul_s(reg_tmp12.xyzz, reg_tmp8.wwww)).xyz;
reg_tmp4.xyz = (fma_s(reg_tmp10.xyzz, reg_tmp8.wwww, reg_tmp15.xyzz)).xyz;
reg_tmp4.w = (reg_tmp7.wwww).w;
reg_tmp12.xyz = (mul_s(uniforms.f[90].wwww, reg_tmp8.xyzz)).xyz;
reg_tmp11.xyz = (reg_tmp10.xyzz + reg_tmp12.xyzz).xyz;
reg_tmp14.x = dot_s(reg_tmp11.xyzz, reg_tmp11.xyzz);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp14.xyz = (mul_s(reg_tmp11.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.w = (uniforms.f[90].xxxx).w;
reg_tmp5.x = dot_s(uniforms.f[4], reg_tmp4);
reg_tmp5.y = dot_s(uniforms.f[5], reg_tmp4);
reg_tmp5.z = dot_s(uniforms.f[6], reg_tmp4);
reg_tmp5.w = (reg_tmp4.wwww).w;
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (-uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (-uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (-uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].xxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(2u, true, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (-uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, false);
emit();
reg_tmp7 = uniforms.f[18];
reg_tmp13.xyz = (uniforms.f[19].xyzz).xyz;
reg_tmp8.w = (uniforms.f[19].wwww).w;
reg_tmp8.xyz = (mul_s(uniforms.f[34].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp8.xyzz, reg_tmp8.wwww, reg_tmp7.xyzz)).xyz;
reg_tmp11.xy = (uniforms.f[90].xxxx).xy;
reg_tmp11.z = (reg_tmp9.wwww).z;
reg_tmp12.xyz = (fma_s(reg_tmp13.xyzz, reg_tmp9.zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp10.xyz = (mul_s(reg_tmp12.xyzz, reg_tmp8.wwww)).xyz;
reg_tmp4.xyz = (fma_s(reg_tmp10.xyzz, reg_tmp8.wwww, reg_tmp15.xyzz)).xyz;
reg_tmp4.w = (reg_tmp7.wwww).w;
reg_tmp12.xyz = (mul_s(uniforms.f[90].wwww, reg_tmp8.xyzz)).xyz;
reg_tmp11.xyz = (reg_tmp10.xyzz + reg_tmp12.xyzz).xyz;
reg_tmp14.x = dot_s(reg_tmp11.xyzz, reg_tmp11.xyzz);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp14.xyz = (mul_s(reg_tmp11.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.w = (uniforms.f[90].xxxx).w;
reg_tmp5.x = dot_s(uniforms.f[4], reg_tmp4);
reg_tmp5.y = dot_s(uniforms.f[5], reg_tmp4);
reg_tmp5.z = dot_s(uniforms.f[6], reg_tmp4);
reg_tmp5.w = (reg_tmp4.wwww).w;
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (-uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (-uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (-uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].xxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(2u, true, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (-uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, false);
emit();
reg_tmp7 = uniforms.f[24];
reg_tmp13.xyz = (uniforms.f[25].xyzz).xyz;
reg_tmp8.w = (uniforms.f[25].wwww).w;
reg_tmp8.xyz = (mul_s(uniforms.f[34].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp8.xyzz, reg_tmp8.wwww, reg_tmp7.xyzz)).xyz;
reg_tmp11.xy = (uniforms.f[90].xxxx).xy;
reg_tmp11.z = (reg_tmp9.wwww).z;
reg_tmp12.xyz = (fma_s(reg_tmp13.xyzz, reg_tmp9.zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp10.xyz = (mul_s(reg_tmp12.xyzz, reg_tmp8.wwww)).xyz;
reg_tmp4.xyz = (fma_s(reg_tmp10.xyzz, reg_tmp8.wwww, reg_tmp15.xyzz)).xyz;
reg_tmp4.w = (reg_tmp7.wwww).w;
reg_tmp12.xyz = (mul_s(uniforms.f[90].wwww, reg_tmp8.xyzz)).xyz;
reg_tmp11.xyz = (reg_tmp10.xyzz + reg_tmp12.xyzz).xyz;
reg_tmp14.x = dot_s(reg_tmp11.xyzz, reg_tmp11.xyzz);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp14.xyz = (mul_s(reg_tmp11.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.w = (uniforms.f[90].xxxx).w;
reg_tmp5.x = dot_s(uniforms.f[4], reg_tmp4);
reg_tmp5.y = dot_s(uniforms.f[5], reg_tmp4);
reg_tmp5.z = dot_s(uniforms.f[6], reg_tmp4);
reg_tmp5.w = (reg_tmp4.wwww).w;
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (-uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (-uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (-uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].xxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(2u, true, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.x = (uniforms.f[30].xxxx + reg_tmp6.xxxx).x;
reg_tmp6.y = (-uniforms.f[30].yyyy + reg_tmp6.yyyy).y;
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, false);
emit();
if (uniforms.b[14]) {
jmp_to = 2456u; break;
}
reg_tmp7 = uniforms.f[12];
reg_tmp13.xyz = (uniforms.f[13].xyzz).xyz;
reg_tmp8.w = (uniforms.f[13].wwww).w;
reg_tmp8.xyz = (mul_s(uniforms.f[34].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp9.w = (uniforms.f[34].yyyy).w;
reg_tmp9.z = (uniforms.f[34].zzzz).z;
reg_tmp4 = mul_s(uniforms.f[34].wwww, reg_tmp8.wwww);
bool_regs = greaterThan(uniforms.f[90].ww, reg_tmp4.xx);
if (bool_regs.x) {
sub_3();
} else {
sub_4();
}
reg_tmp15 = reg_tmp12 + -reg_tmp11;
reg_tmp15 = fma_s(reg_tmp15, reg_tmp10, reg_tmp11);
reg_tmp15.xyz = (fma_s(reg_tmp8.xyzz, reg_tmp8.wwww, reg_tmp7.xyzz)).xyz;
reg_tmp11.xy = (uniforms.f[90].xxxx).xy;
reg_tmp11.z = (reg_tmp9.wwww).z;
reg_tmp12.xyz = (fma_s(reg_tmp13.xyzz, reg_tmp9.zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp10.xyz = (mul_s(reg_tmp12.xyzz, reg_tmp8.wwww)).xyz;
reg_tmp4.xyz = (fma_s(reg_tmp10.xyzz, reg_tmp8.wwww, reg_tmp15.xyzz)).xyz;
reg_tmp4.w = (reg_tmp7.wwww).w;
reg_tmp12.xyz = (mul_s(uniforms.f[90].wwww, reg_tmp8.xyzz)).xyz;
reg_tmp11.xyz = (reg_tmp10.xyzz + reg_tmp12.xyzz).xyz;
reg_tmp14.x = dot_s(reg_tmp11.xyzz, reg_tmp11.xyzz);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp14.xyz = (mul_s(reg_tmp11.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.w = (uniforms.f[90].xxxx).w;
reg_tmp5.x = dot_s(uniforms.f[4], reg_tmp4);
reg_tmp5.y = dot_s(uniforms.f[5], reg_tmp4);
reg_tmp5.z = dot_s(uniforms.f[6], reg_tmp4);
reg_tmp5.w = (reg_tmp4.wwww).w;
reg_tmp10.x = dot_s(uniforms.f[4], reg_tmp14);
reg_tmp10.y = dot_s(uniforms.f[5], reg_tmp14);
reg_tmp10.z = dot_s(uniforms.f[6], reg_tmp14);
reg_tmp12 = uniforms.f[90].xxxx;
reg_tmp12.z = (uniforms.f[90].zzzz).z;
reg_tmp13.xyz = (mul_s(reg_tmp12.yzxx, reg_tmp10.zxyy)).xyz;
reg_tmp13.xyz = (fma_s(-reg_tmp10.yzxx, reg_tmp12.zxyy, reg_tmp13)).xyz;
reg_tmp11.xyz = (mul_s(uniforms.f[30].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp13.xyz = (reg_tmp10.xyzz).xyz;
reg_tmp10.xyz = (mul_s(uniforms.f[30].yyyy, reg_tmp13.xyzz)).xyz;
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].xxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(2u, true, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, false);
emit();
reg_tmp7 = uniforms.f[18];
reg_tmp13.xyz = (uniforms.f[19].xyzz).xyz;
reg_tmp8.w = (uniforms.f[19].wwww).w;
reg_tmp8.xyz = (mul_s(uniforms.f[34].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp8.xyzz, reg_tmp8.wwww, reg_tmp7.xyzz)).xyz;
reg_tmp11.xy = (uniforms.f[90].xxxx).xy;
reg_tmp11.z = (reg_tmp9.wwww).z;
reg_tmp12.xyz = (fma_s(reg_tmp13.xyzz, reg_tmp9.zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp10.xyz = (mul_s(reg_tmp12.xyzz, reg_tmp8.wwww)).xyz;
reg_tmp4.xyz = (fma_s(reg_tmp10.xyzz, reg_tmp8.wwww, reg_tmp15.xyzz)).xyz;
reg_tmp4.w = (reg_tmp7.wwww).w;
reg_tmp12.xyz = (mul_s(uniforms.f[90].wwww, reg_tmp8.xyzz)).xyz;
reg_tmp11.xyz = (reg_tmp10.xyzz + reg_tmp12.xyzz).xyz;
reg_tmp14.x = dot_s(reg_tmp11.xyzz, reg_tmp11.xyzz);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp14.xyz = (mul_s(reg_tmp11.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.w = (uniforms.f[90].xxxx).w;
reg_tmp5.x = dot_s(uniforms.f[4], reg_tmp4);
reg_tmp5.y = dot_s(uniforms.f[5], reg_tmp4);
reg_tmp5.z = dot_s(uniforms.f[6], reg_tmp4);
reg_tmp5.w = (reg_tmp4.wwww).w;
reg_tmp10.x = dot_s(uniforms.f[4], reg_tmp14);
reg_tmp10.y = dot_s(uniforms.f[5], reg_tmp14);
reg_tmp10.z = dot_s(uniforms.f[6], reg_tmp14);
reg_tmp12 = uniforms.f[90].xxxx;
reg_tmp12.z = (uniforms.f[90].zzzz).z;
reg_tmp13.xyz = (mul_s(reg_tmp12.yzxx, reg_tmp10.zxyy)).xyz;
reg_tmp13.xyz = (fma_s(-reg_tmp10.yzxx, reg_tmp12.zxyy, reg_tmp13)).xyz;
reg_tmp11.xyz = (mul_s(uniforms.f[30].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp13.xyz = (reg_tmp10.xyzz).xyz;
reg_tmp10.xyz = (mul_s(uniforms.f[30].yyyy, reg_tmp13.xyzz)).xyz;
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].xxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(2u, true, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, false);
emit();
reg_tmp7 = uniforms.f[24];
reg_tmp13.xyz = (uniforms.f[25].xyzz).xyz;
reg_tmp8.w = (uniforms.f[25].wwww).w;
reg_tmp8.xyz = (mul_s(uniforms.f[34].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp8.xyzz, reg_tmp8.wwww, reg_tmp7.xyzz)).xyz;
reg_tmp11.xy = (uniforms.f[90].xxxx).xy;
reg_tmp11.z = (reg_tmp9.wwww).z;
reg_tmp12.xyz = (fma_s(reg_tmp13.xyzz, reg_tmp9.zzzz, reg_tmp11.xyzz)).xyz;
reg_tmp10.xyz = (mul_s(reg_tmp12.xyzz, reg_tmp8.wwww)).xyz;
reg_tmp4.xyz = (fma_s(reg_tmp10.xyzz, reg_tmp8.wwww, reg_tmp15.xyzz)).xyz;
reg_tmp4.w = (reg_tmp7.wwww).w;
reg_tmp12.xyz = (mul_s(uniforms.f[90].wwww, reg_tmp8.xyzz)).xyz;
reg_tmp11.xyz = (reg_tmp10.xyzz + reg_tmp12.xyzz).xyz;
reg_tmp14.x = dot_s(reg_tmp11.xyzz, reg_tmp11.xyzz);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp14.xyz = (mul_s(reg_tmp11.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.w = (uniforms.f[90].xxxx).w;
reg_tmp5.x = dot_s(uniforms.f[4], reg_tmp4);
reg_tmp5.y = dot_s(uniforms.f[5], reg_tmp4);
reg_tmp5.z = dot_s(uniforms.f[6], reg_tmp4);
reg_tmp5.w = (reg_tmp4.wwww).w;
reg_tmp10.x = dot_s(uniforms.f[4], reg_tmp14);
reg_tmp10.y = dot_s(uniforms.f[5], reg_tmp14);
reg_tmp10.z = dot_s(uniforms.f[6], reg_tmp14);
reg_tmp12 = uniforms.f[90].xxxx;
reg_tmp12.z = (uniforms.f[90].zzzz).z;
reg_tmp13.xyz = (mul_s(reg_tmp12.yzxx, reg_tmp10.zxyy)).xyz;
reg_tmp13.xyz = (fma_s(-reg_tmp10.yzxx, reg_tmp12.zxyy, reg_tmp13)).xyz;
reg_tmp11.xyz = (mul_s(uniforms.f[30].xxxx, reg_tmp13.xyzz)).xyz;
reg_tmp13.xyz = (reg_tmp10.xyzz).xyz;
reg_tmp10.xyz = (mul_s(uniforms.f[30].yyyy, reg_tmp13.xyzz)).xyz;
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].xyyy;
output_buffer.attributes[5] = uniforms.f[90].xxxx;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].yyyy;
output_buffer.attributes[5] = uniforms.f[90].yyyy;
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(1u, false, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].xxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(2u, true, true);
emit();
reg_tmp6 = reg_tmp5;
reg_tmp6.xy = (reg_tmp6.xyyy + reg_tmp11.xyyy).xy;
reg_tmp6.xy = (reg_tmp6.xyyy + -reg_tmp10.xyyy).xy;
output_buffer.attributes[3] = uniforms.f[90].yxxx;
output_buffer.attributes[2] = reg_tmp15;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp6);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp6);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp6);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp6);
setemit(0u, true, false);
emit();
if (uniforms.b[14]) {
jmp_to = 2456u; break;
}
reg_tmp13 = uniforms.f[12];
reg_tmp5 = uniforms.f[36].xyyy + -reg_tmp13.xyyy;
reg_tmp5.z = (uniforms.f[90].xxxx).z;
reg_tmp6.x = dot_3(reg_tmp5.xyz, reg_tmp5.xyz);
reg_tmp6.x = rsq_s(reg_tmp6.x);
reg_tmp6.xyz = (mul_s(reg_tmp5.xyzz, reg_tmp6.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp6.xyzz, uniforms.f[91].zzzz, reg_tmp13)).xyz;
reg_tmp14.xyz = (reg_tmp6.xyzz).xyz;
reg_tmp4.z = (uniforms.f[90].xxxx).z;
reg_tmp4.xy = (-uniforms.f[36].xyyy + reg_tmp13.xyyy).xy;
reg_tmp5.x = dot_3(reg_tmp4.xyz, reg_tmp4.xyz);
reg_tmp5.y = rsq_s(reg_tmp5.x);
reg_tmp5.z = rcp_s(reg_tmp5.y);
reg_tmp4.x = (uniforms.f[31].xxxx).x;
reg_tmp4.y = (mul_s(uniforms.f[30].xxxx, reg_tmp4.xxxx)).y;
reg_tmp4.z = (mul_s(uniforms.f[33].xxxx, reg_tmp5.zzzz)).z;
reg_tmp5.x = (fma_s(reg_tmp4.zzzz, uniforms.f[91].yyyy, reg_tmp4.yyyy)).x;
reg_tmp4.x = rcp_s(uniforms.f[92].y);
reg_tmp6.x = (mul_s(reg_tmp5.xxxx, reg_tmp4.xxxx)).x;
reg_tmp5.y = (floor(reg_tmp6.xxxx)).y;
reg_tmp4.x = (mul_s(uniforms.f[92].yyyy, reg_tmp5.yyyy)).x;
reg_tmp6.x = (reg_tmp5.xxxx + -reg_tmp4.xxxx).x;
reg_tmp5.x = (-uniforms.f[91].yyyy + reg_tmp6.xxxx).x;
reg_tmp4 = uniforms.f[95];
reg_tmp6 = uniforms.f[94];
reg_tmp7.z = (mul_s(reg_tmp5.xxxx, reg_tmp5.xxxx)).z;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp4.xyyy, reg_tmp4.zwww)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp6.xyyy)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp6.zwww)).xy;
reg_tmp4 = uniforms.f[93];
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp4.xyyy)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp4.zwww)).xy;
reg_tmp7.y = (mul_s(reg_tmp7.yyyy, reg_tmp5.xxxx)).y;
reg_tmp4.y = (uniforms.f[14].xxxx).y;
reg_tmp4.x = (mul_s(uniforms.f[32].xxxx, reg_tmp4.yyyy)).x;
reg_tmp13.z = (fma_s(reg_tmp7.xxxx, reg_tmp4.xxxx, uniforms.f[12].zzzz)).z;
reg_tmp14.z = (fma_s(reg_tmp8.xxxx, reg_tmp4.xxxx, uniforms.f[12].zzzz)).z;
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.w = (reg_tmp13.wwww).w;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp11);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp11);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp11);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp11);
output_buffer.attributes[4] = -reg_tmp11;
output_buffer.attributes[1].xyz = (uniforms.f[90].yxxx).xyz;
output_buffer.attributes[1].w = (uniforms.f[90].xxxx).w;
output_buffer.attributes[2] = uniforms.f[14];
reg_tmp5 = uniforms.f[37];
reg_tmp6 = uniforms.f[38];
output_buffer.attributes[3] = uniforms.f[15] + reg_tmp5;
output_buffer.attributes[5] = uniforms.f[17] + reg_tmp6;
setemit(0u, false, false);
emit();
reg_tmp13 = uniforms.f[18];
reg_tmp5 = uniforms.f[36].xyyy + -reg_tmp13.xyyy;
reg_tmp5.z = (uniforms.f[90].xxxx).z;
reg_tmp6.x = dot_3(reg_tmp5.xyz, reg_tmp5.xyz);
reg_tmp6.x = rsq_s(reg_tmp6.x);
reg_tmp6.xyz = (mul_s(reg_tmp5.xyzz, reg_tmp6.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp6.xyzz, uniforms.f[91].zzzz, reg_tmp13)).xyz;
reg_tmp14.xyz = (reg_tmp6.xyzz).xyz;
reg_tmp4.z = (uniforms.f[90].xxxx).z;
reg_tmp4.xy = (-uniforms.f[36].xyyy + reg_tmp13.xyyy).xy;
reg_tmp5.x = dot_3(reg_tmp4.xyz, reg_tmp4.xyz);
reg_tmp5.y = rsq_s(reg_tmp5.x);
reg_tmp5.z = rcp_s(reg_tmp5.y);
reg_tmp4.x = (uniforms.f[31].xxxx).x;
reg_tmp4.y = (mul_s(uniforms.f[30].xxxx, reg_tmp4.xxxx)).y;
reg_tmp4.z = (mul_s(uniforms.f[33].xxxx, reg_tmp5.zzzz)).z;
reg_tmp5.x = (fma_s(reg_tmp4.zzzz, uniforms.f[91].yyyy, reg_tmp4.yyyy)).x;
reg_tmp4.x = rcp_s(uniforms.f[92].y);
reg_tmp6.x = (mul_s(reg_tmp5.xxxx, reg_tmp4.xxxx)).x;
reg_tmp5.y = (floor(reg_tmp6.xxxx)).y;
reg_tmp4.x = (mul_s(uniforms.f[92].yyyy, reg_tmp5.yyyy)).x;
reg_tmp6.x = (reg_tmp5.xxxx + -reg_tmp4.xxxx).x;
reg_tmp5.x = (-uniforms.f[91].yyyy + reg_tmp6.xxxx).x;
reg_tmp4 = uniforms.f[95];
reg_tmp6 = uniforms.f[94];
reg_tmp7.z = (mul_s(reg_tmp5.xxxx, reg_tmp5.xxxx)).z;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp4.xyyy, reg_tmp4.zwww)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp6.xyyy)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp6.zwww)).xy;
reg_tmp4 = uniforms.f[93];
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp4.xyyy)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp4.zwww)).xy;
reg_tmp7.y = (mul_s(reg_tmp7.yyyy, reg_tmp5.xxxx)).y;
reg_tmp4.y = (uniforms.f[20].xxxx).y;
reg_tmp4.x = (mul_s(uniforms.f[32].xxxx, reg_tmp4.yyyy)).x;
reg_tmp13.z = (fma_s(reg_tmp7.xxxx, reg_tmp4.xxxx, uniforms.f[18].zzzz)).z;
reg_tmp14.z = (fma_s(reg_tmp8.xxxx, reg_tmp4.xxxx, uniforms.f[18].zzzz)).z;
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.w = (reg_tmp13.wwww).w;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp11);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp11);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp11);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp11);
output_buffer.attributes[4] = -reg_tmp11;
output_buffer.attributes[1].xyz = (uniforms.f[90].yxxx).xyz;
output_buffer.attributes[1].w = (uniforms.f[90].xxxx).w;
output_buffer.attributes[2] = uniforms.f[20];
reg_tmp5 = uniforms.f[37];
reg_tmp6 = uniforms.f[38];
output_buffer.attributes[3] = uniforms.f[21] + reg_tmp5;
output_buffer.attributes[5] = uniforms.f[23] + reg_tmp6;
setemit(1u, false, false);
emit();
reg_tmp13 = uniforms.f[24];
reg_tmp5 = uniforms.f[36].xyyy + -reg_tmp13.xyyy;
reg_tmp5.z = (uniforms.f[90].xxxx).z;
reg_tmp6.x = dot_3(reg_tmp5.xyz, reg_tmp5.xyz);
reg_tmp6.x = rsq_s(reg_tmp6.x);
reg_tmp6.xyz = (mul_s(reg_tmp5.xyzz, reg_tmp6.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp6.xyzz, uniforms.f[91].zzzz, reg_tmp13)).xyz;
reg_tmp14.xyz = (reg_tmp6.xyzz).xyz;
reg_tmp4.z = (uniforms.f[90].xxxx).z;
reg_tmp4.xy = (-uniforms.f[36].xyyy + reg_tmp13.xyyy).xy;
reg_tmp5.x = dot_3(reg_tmp4.xyz, reg_tmp4.xyz);
reg_tmp5.y = rsq_s(reg_tmp5.x);
reg_tmp5.z = rcp_s(reg_tmp5.y);
reg_tmp4.x = (uniforms.f[31].xxxx).x;
reg_tmp4.y = (mul_s(uniforms.f[30].xxxx, reg_tmp4.xxxx)).y;
reg_tmp4.z = (mul_s(uniforms.f[33].xxxx, reg_tmp5.zzzz)).z;
reg_tmp5.x = (fma_s(reg_tmp4.zzzz, uniforms.f[91].yyyy, reg_tmp4.yyyy)).x;
reg_tmp4.x = rcp_s(uniforms.f[92].y);
reg_tmp6.x = (mul_s(reg_tmp5.xxxx, reg_tmp4.xxxx)).x;
reg_tmp5.y = (floor(reg_tmp6.xxxx)).y;
reg_tmp4.x = (mul_s(uniforms.f[92].yyyy, reg_tmp5.yyyy)).x;
reg_tmp6.x = (reg_tmp5.xxxx + -reg_tmp4.xxxx).x;
reg_tmp5.x = (-uniforms.f[91].yyyy + reg_tmp6.xxxx).x;
reg_tmp4 = uniforms.f[95];
reg_tmp6 = uniforms.f[94];
reg_tmp7.z = (mul_s(reg_tmp5.xxxx, reg_tmp5.xxxx)).z;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp4.xyyy, reg_tmp4.zwww)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp6.xyyy)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp6.zwww)).xy;
reg_tmp4 = uniforms.f[93];
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp4.xyyy)).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.zzzz, reg_tmp7.xyyy, reg_tmp4.zwww)).xy;
reg_tmp7.y = (mul_s(reg_tmp7.yyyy, reg_tmp5.xxxx)).y;
reg_tmp4.y = (uniforms.f[26].xxxx).y;
reg_tmp4.x = (mul_s(uniforms.f[32].xxxx, reg_tmp4.yyyy)).x;
reg_tmp13.z = (fma_s(reg_tmp7.xxxx, reg_tmp4.xxxx, uniforms.f[24].zzzz)).z;
reg_tmp14.z = (fma_s(reg_tmp8.xxxx, reg_tmp4.xxxx, uniforms.f[24].zzzz)).z;
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.w = (reg_tmp13.wwww).w;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp11);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp11);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp11);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp11);
output_buffer.attributes[4] = -reg_tmp11;
output_buffer.attributes[1].xyz = (uniforms.f[90].yxxx).xyz;
output_buffer.attributes[1].w = (uniforms.f[90].xxxx).w;
output_buffer.attributes[2] = uniforms.f[26];
reg_tmp5 = uniforms.f[37];
reg_tmp6 = uniforms.f[38];
output_buffer.attributes[3] = uniforms.f[27] + reg_tmp5;
output_buffer.attributes[5] = uniforms.f[29] + reg_tmp6;
setemit(2u, true, false);
emit();
if (uniforms.b[14]) {
jmp_to = 2456u; break;
}
reg_tmp13 = uniforms.f[12];
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.w = (reg_tmp13.wwww).w;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp11);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp11);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp11);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp11);
reg_tmp15.x = (uniforms.f[90].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp15.z = (uniforms.f[90].yyyy).z;
reg_tmp15.w = (uniforms.f[90].xxxx).w;
reg_tmp10.w = (uniforms.f[90].xxxx).w;
reg_tmp10.x = dot_3(uniforms.f[4].xyz, reg_tmp15.xyz);
reg_tmp10.y = dot_3(uniforms.f[5].xyz, reg_tmp15.xyz);
reg_tmp10.z = dot_3(uniforms.f[6].xyz, reg_tmp15.xyz);
reg_tmp5 = uniforms.f[90].yyyy + reg_tmp10.zzzz;
reg_tmp7 = mul_s(uniforms.f[90].wwww, reg_tmp10);
bool_regs = equal(-uniforms.f[90].yy, reg_tmp10.zz);
reg_tmp5 = mul_s(uniforms.f[90].wwww, reg_tmp5);
reg_tmp5 = vec4(rsq_s(reg_tmp5.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
output_buffer.attributes[1].w = (uniforms.f[90].xxxx).w;
output_buffer.attributes[2] = uniforms.f[90].wwww;
output_buffer.attributes[3] = uniforms.f[15];
output_buffer.attributes[4] = -reg_tmp11;
output_buffer.attributes[5] = uniforms.f[17];
setemit(0u, false, false);
emit();
reg_tmp13 = uniforms.f[18];
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.w = (reg_tmp13.wwww).w;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp11);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp11);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp11);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp11);
reg_tmp15.x = (uniforms.f[90].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp15.z = (uniforms.f[90].yyyy).z;
reg_tmp15.w = (uniforms.f[90].xxxx).w;
reg_tmp10.w = (uniforms.f[90].xxxx).w;
reg_tmp10.x = dot_3(uniforms.f[4].xyz, reg_tmp15.xyz);
reg_tmp10.y = dot_3(uniforms.f[5].xyz, reg_tmp15.xyz);
reg_tmp10.z = dot_3(uniforms.f[6].xyz, reg_tmp15.xyz);
reg_tmp5 = uniforms.f[90].yyyy + reg_tmp10.zzzz;
reg_tmp7 = mul_s(uniforms.f[90].wwww, reg_tmp10);
bool_regs = equal(-uniforms.f[90].yy, reg_tmp10.zz);
reg_tmp5 = mul_s(uniforms.f[90].wwww, reg_tmp5);
reg_tmp5 = vec4(rsq_s(reg_tmp5.x));
if (!bool_regs.x) {
sub_7();
} else {
sub_8();
}
output_buffer.attributes[1].w = (uniforms.f[90].xxxx).w;
output_buffer.attributes[2] = uniforms.f[90].wwww;
output_buffer.attributes[3] = uniforms.f[21];
output_buffer.attributes[4] = -reg_tmp11;
output_buffer.attributes[5] = uniforms.f[23];
setemit(1u, false, false);
emit();
reg_tmp13 = uniforms.f[24];
reg_tmp11.x = dot_s(uniforms.f[4], reg_tmp13);
reg_tmp11.y = dot_s(uniforms.f[5], reg_tmp13);
reg_tmp11.z = dot_s(uniforms.f[6], reg_tmp13);
reg_tmp11.w = (reg_tmp13.wwww).w;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp11);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp11);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp11);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp11);
reg_tmp15.x = (uniforms.f[90].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp15.z = (uniforms.f[90].yyyy).z;
reg_tmp15.w = (uniforms.f[90].xxxx).w;
reg_tmp10.w = (uniforms.f[90].xxxx).w;
reg_tmp10.x = dot_3(uniforms.f[4].xyz, reg_tmp15.xyz);
reg_tmp10.y = dot_3(uniforms.f[5].xyz, reg_tmp15.xyz);
reg_tmp10.z = dot_3(uniforms.f[6].xyz, reg_tmp15.xyz);
reg_tmp5 = uniforms.f[90].yyyy + reg_tmp10.zzzz;
reg_tmp7 = mul_s(uniforms.f[90].wwww, reg_tmp10);
bool_regs = equal(-uniforms.f[90].yy, reg_tmp10.zz);
reg_tmp5 = mul_s(uniforms.f[90].wwww, reg_tmp5);
reg_tmp5 = vec4(rsq_s(reg_tmp5.x));
if (!bool_regs.x) {
sub_9();
} else {
sub_10();
}
output_buffer.attributes[1].w = (uniforms.f[90].xxxx).w;
output_buffer.attributes[2] = uniforms.f[90].wwww;
output_buffer.attributes[3] = uniforms.f[27];
output_buffer.attributes[4] = -reg_tmp11;
output_buffer.attributes[5] = uniforms.f[29];
setemit(2u, true, false);
emit();
if (uniforms.b[14]) {
jmp_to = 2456u; break;
}
reg_tmp0 = vec4(rcp_s(uniforms.f[12].w));
reg_tmp1 = vec4(rcp_s(uniforms.f[18].w));
reg_tmp2 = vec4(rcp_s(uniforms.f[24].w));
output_buffer.attributes[0] = uniforms.f[12];
reg_tmp3 = mul_s(uniforms.f[12], reg_tmp0);
reg_tmp4 = mul_s(uniforms.f[18], reg_tmp1);
reg_tmp5 = mul_s(uniforms.f[24], reg_tmp2);
output_buffer.attributes[1] = uniforms.f[13];
reg_tmp0 = min_s(reg_tmp3, reg_tmp4);
reg_tmp1 = max_s(reg_tmp3, reg_tmp4);
reg_tmp0 = min_s(reg_tmp0, reg_tmp5);
reg_tmp1 = max_s(reg_tmp1, reg_tmp5);
bool_regs = lessThan(uniforms.f[90].yy, reg_tmp0.xy);
output_buffer.attributes[2] = uniforms.f[14];
output_buffer.attributes[3] = uniforms.f[15];
output_buffer.attributes[4] = uniforms.f[16];
if (any(bool_regs)) {
jmp_to = 2456u; break;
}
bool_regs = greaterThan(uniforms.f[90].zz, reg_tmp1.xy);
output_buffer.attributes[5] = uniforms.f[17];
setemit(0u, false, false);
emit();
if (any(bool_regs)) {
jmp_to = 2456u; break;
}
bool_regs.x = uniforms.f[90].xxxx.x < reg_tmp0.zzzz.x;
bool_regs.y = uniforms.f[90].xxxx.y == reg_tmp0.zzzz.y;
output_buffer.attributes[0] = uniforms.f[18];
output_buffer.attributes[1] = uniforms.f[19];
output_buffer.attributes[2] = uniforms.f[20];
if (bool_regs.x) {
jmp_to = 2456u; break;
}
if (uniforms.b[14]) {
jmp_to = 2443u; break;
}
output_buffer.attributes[0] = uniforms.f[12];
output_buffer.attributes[1] = uniforms.f[13];
output_buffer.attributes[2] = uniforms.f[14];
output_buffer.attributes[3] = uniforms.f[15];
output_buffer.attributes[4] = uniforms.f[16];
output_buffer.attributes[5] = uniforms.f[17];
setemit(0u, false, false);
emit();
output_buffer.attributes[0] = uniforms.f[18];
output_buffer.attributes[1] = uniforms.f[19];
output_buffer.attributes[2] = uniforms.f[20];
case 2443u:
output_buffer.attributes[3] = uniforms.f[21];
output_buffer.attributes[4] = uniforms.f[22];
output_buffer.attributes[5] = uniforms.f[23];
setemit(1u, false, false);
emit();
output_buffer.attributes[0] = uniforms.f[24];
output_buffer.attributes[1] = uniforms.f[25];
output_buffer.attributes[2] = uniforms.f[26];
output_buffer.attributes[3] = uniforms.f[27];
output_buffer.attributes[4] = uniforms.f[28];
output_buffer.attributes[5] = uniforms.f[29];
setemit(2u, true, false);
emit();
case 2456u:
return true;
default: return false;
}
}
return false;
}
bool sub_1() {
reg_tmp5.x = rcp_s(uniforms.f[90].w);
reg_tmp10 = mul_s(reg_tmp4.xxxx, reg_tmp5.xxxx);
reg_tmp11 = uniforms.f[31];
reg_tmp12 = uniforms.f[32];
return false;
}
bool sub_2() {
reg_tmp5.x = rcp_s(uniforms.f[90].w);
reg_tmp6.x = (-uniforms.f[90].wwww + reg_tmp4.xxxx).x;
reg_tmp10 = mul_s(reg_tmp6.xxxx, reg_tmp5.xxxx);
reg_tmp11 = uniforms.f[32];
reg_tmp12 = uniforms.f[33];
return false;
}
bool sub_3() {
reg_tmp5.x = rcp_s(uniforms.f[90].w);
reg_tmp10 = mul_s(reg_tmp4.xxxx, reg_tmp5.xxxx);
reg_tmp11 = uniforms.f[31];
reg_tmp12 = uniforms.f[32];
return false;
}
bool sub_4() {
reg_tmp5.x = rcp_s(uniforms.f[90].w);
reg_tmp6.x = (-uniforms.f[90].wwww + reg_tmp4.xxxx).x;
reg_tmp10 = mul_s(reg_tmp6.xxxx, reg_tmp5.xxxx);
reg_tmp11 = uniforms.f[32];
reg_tmp12 = uniforms.f[33];
return false;
}
bool sub_5() {
output_buffer.attributes[1].z = rcp_s(reg_tmp5.x);
output_buffer.attributes[1].xy = (mul_s(reg_tmp7, reg_tmp5)).xy;
return false;
}
bool sub_6() {
output_buffer.attributes[1].xyz = (uniforms.f[90].yxxx).xyz;
return false;
}
bool sub_7() {
output_buffer.attributes[1].z = rcp_s(reg_tmp5.x);
output_buffer.attributes[1].xy = (mul_s(reg_tmp7, reg_tmp5)).xy;
return false;
}
bool sub_8() {
output_buffer.attributes[1].xyz = (uniforms.f[90].yxxx).xyz;
return false;
}
bool sub_9() {
output_buffer.attributes[1].z = rcp_s(reg_tmp5.x);
output_buffer.attributes[1].xy = (mul_s(reg_tmp7, reg_tmp5)).xy;
return false;
}
bool sub_10() {
output_buffer.attributes[1].xyz = (uniforms.f[90].yxxx).xyz;
return false;
}
// reference: 98A4FDB5121718FE, 2B3CA2D56E434357
// shader: 8B31, 62C210CD7B865589

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_0() {
uint jmp_to = 476u;
while (true) {
switch (jmp_to) {
case 476u:
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
default: return false;
}
}
return false;
}
// reference: B01E9C3325C2D04A, 62C210CD7B865589
// shader: 8B30, CDC4785CF18C2D04
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((combiner_buffer.rgb) * (const_color[3].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[3].rgb)), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0463014E75397BC5, CDC4785CF18C2D04
// program: 62C210CD7B865589, 2B3CA2D56E434357, CDC4785CF18C2D04
// shader: 8B31, AA44ABA025CEB29B

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_16();
bool sub_10();
bool sub_15();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_1();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_0();
bool sub_9();
bool sub_8();
bool sub_13();
bool sub_11();
bool sub_12();
bool sub_14();

bool exec_shader() {
sub_0();
return true;
}

bool sub_16() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_3() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_7() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 223u;
while (true) {
switch (jmp_to) {
case 223u:
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_3();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_4();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_7();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_8();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_8();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_9();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_9();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
sub_3();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_13();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_14();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_16();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_9() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_7();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_8() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_13() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_11() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_12() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_14() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B2644241F76B6B, AA44ABA025CEB29B
// shader: 8B30, 39690137BFB9B137
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3299FC1283E944EF, 39690137BFB9B137
// program: AA44ABA025CEB29B, 29769686DF99D914, 39690137BFB9B137
// shader: 8B31, 35496CC12B2D96FC

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_16();
bool sub_10();
bool sub_15();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_6();
bool sub_0();
bool sub_9();
bool sub_8();
bool sub_13();
bool sub_11();
bool sub_12();
bool sub_14();

bool exec_shader() {
sub_0();
return true;
}

bool sub_16() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_6() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 239u;
while (true) {
switch (jmp_to) {
case 239u:
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_3();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_6();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_8();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_8();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_9();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_9();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_13();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_14();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_16();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_3();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_9() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_6();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_8() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_13() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_11() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_12() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_14() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B2644287AF6928, 35496CC12B2D96FC
// shader: 8B30, 8BC83C933392B9D6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 65A656593FE50CF6, 8BC83C933392B9D6
// program: 35496CC12B2D96FC, 29769686DF99D914, 8BC83C933392B9D6
// shader: 8B30, B78499E682577E07
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3299FC12387AFCEB, B78499E682577E07
// program: AA44ABA025CEB29B, 29769686DF99D914, B78499E682577E07
// shader: 8B30, F1717D4ECFA3C86B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EA2F7B888B9E4A78, F1717D4ECFA3C86B
// program: 66EE681BE47060DB, 29769686DF99D914, F1717D4ECFA3C86B
// shader: 8B30, 3213482CB7E37F06
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 003107586DBD19D5, 3213482CB7E37F06
// program: CED7D673F808D965, 29769686DF99D914, 3213482CB7E37F06
// shader: 8B30, 4A4AF74962D54ACE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4AFD38CAAA3BE64D, 4A4AF74962D54ACE
// program: CED7D673F808D965, 29769686DF99D914, 4A4AF74962D54ACE
// shader: 8B30, EEAC27D27D657CEC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E21978B9E4A78, EEAC27D27D657CEC
// program: 66EE681BE47060DB, 29769686DF99D914, EEAC27D27D657CEC
// shader: 8B30, 6602363701C6ABE0
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 01FB34F9BC1B048C, 6602363701C6ABE0
// program: AA44ABA025CEB29B, 29769686DF99D914, 6602363701C6ABE0
// shader: 8B30, 62E0C37793CE70F3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 56C49EB200174C95, 62E0C37793CE70F3
// program: 35496CC12B2D96FC, 29769686DF99D914, 62E0C37793CE70F3
// shader: 8B30, D57327FA856690D5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 01FB34F90788BC88, D57327FA856690D5
// program: AA44ABA025CEB29B, 29769686DF99D914, D57327FA856690D5
// shader: 8B30, B1534F89E600396A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 030DC4B68B9E4A78, B1534F89E600396A
// program: 9B54FF16E580361C, 29769686DF99D914, B1534F89E600396A
// shader: 8B30, 10976C0E06DF5F58
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 45F0F165189A2934, 10976C0E06DF5F58
// program: AA44ABA025CEB29B, 29769686DF99D914, 10976C0E06DF5F58
// shader: 8B30, 0263DF138AAB4178
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 12CF5B2EA496612D, 0263DF138AAB4178
// program: 35496CC12B2D96FC, 29769686DF99D914, 0263DF138AAB4178
// shader: 8B30, 861B9F37CE2EDAAC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 45F0F165A3099130, 861B9F37CE2EDAAC
// program: AA44ABA025CEB29B, 29769686DF99D914, 861B9F37CE2EDAAC
// shader: 8B30, 597906E778568915
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1BE0458ECDC89215, 597906E778568915
// program: 66EE681BE47060DB, 29769686DF99D914, 597906E778568915
// program: 9B54FF16E580361C, 29769686DF99D914, EEAC27D27D657CEC
// shader: 8B30, 4E873DA3DC2ED749
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4C5161986DBD19D5, 4E873DA3DC2ED749
// program: D3DE5FEDC7338677, 29769686DF99D914, 4E873DA3DC2ED749
// shader: 8B30, D0794466ACE89382
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7173056A749CED7D, D0794466ACE89382
// program: 25831E40F9585075, 29769686DF99D914, D0794466ACE89382
// reference: 349E2197B10EFD99, 15A142540A4F529A
// program: 9B54FF16E580361C, 29769686DF99D914, 15A142540A4F529A
// shader: 8B30, D82BB34FCFD36197
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4C516198572DAE34, D82BB34FCFD36197
// program: D3DE5FEDC7338677, 29769686DF99D914, D82BB34FCFD36197
// shader: 8B30, 7B167AAC5AA8356B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 030DC4B6B10EFD99, 7B167AAC5AA8356B
// program: 9B54FF16E580361C, 29769686DF99D914, 7B167AAC5AA8356B
// shader: 8B30, 393D5F403E8DBBAC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 26E4D2FD569BD1E1, 393D5F403E8DBBAC
// program: 25831E40F9585075, 29769686DF99D914, 393D5F403E8DBBAC
// shader: 8B30, 09248A390BE35F05
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1BE0458EF75825F4, 09248A390BE35F05
// program: 66EE681BE47060DB, 29769686DF99D914, 09248A390BE35F05
// reference: EA2F7B88B10EFD99, 00986C2BFC4DEA75
// reference: 00310758572DAE34, C57CD65AC6CD92A4
// reference: 4AFD38CA90AB51AC, 6B08A8F2E3D97E01
// shader: 8B30, B9941EE2654626D9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FFB87555749CED7D, B9941EE2654626D9
// program: 25831E40F9585075, 29769686DF99D914, B9941EE2654626D9
// program: 732A3537A3AA3E5B, 29769686DF99D914, 06A462AD4F315107
// shader: 8B30, 2BDD11F10AE99D59
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: AACFF0B72FEAA382, 2BDD11F10AE99D59
// program: C25988132E1A18BE, 29769686DF99D914, 2BDD11F10AE99D59
// shader: 8B30, 9FBAF7C865A58E73
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B7528766CE147F8C, 9FBAF7C865A58E73
// program: 732A3537A3AA3E5B, 29769686DF99D914, 9FBAF7C865A58E73
// reference: 1BE0458EDB622EC3, 09248A390BE35F05
// shader: 8B30, ACA904A4F6DFAF7C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8A0DD044749CED7D, ACA904A4F6DFAF7C
// program: 25831E40F9585075, 29769686DF99D914, ACA904A4F6DFAF7C
// shader: 8B30, F73DA9DBFADB88DD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].aaa) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 528D93E8E0A70CC5, F73DA9DBFADB88DD
// program: 66EE681BE47060DB, 29769686DF99D914, F73DA9DBFADB88DD
// shader: 8B31, 5D9E5309074DF8C3

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_2();
bool sub_7();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_2() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_4() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_5() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_6();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_6() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_0() {
uint jmp_to = 413u;
while (true) {
switch (jmp_to) {
case 413u:
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_2();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_5();
sub_7();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_2();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_2();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
// reference: F2B26442EFF84177, 5D9E5309074DF8C3
// shader: 8B30, 5730D93C15EA6634
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb) + (const_color[2].aaa), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a) + (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(vec3(dot((const_color[3].rgb) - vec3(0.5), (last_tex_env_out.rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_3 = color_output_3[0];
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = (combiner_buffer.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D2DC08C3D9F9868C, 5730D93C15EA6634
// program: 5D9E5309074DF8C3, 29769686DF99D914, 5730D93C15EA6634
// shader: 8B30, C980F5D4955A8CB9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FD64DD3367FD8C6B, C980F5D4955A8CB9
// program: 25831E40F9585075, 29769686DF99D914, C980F5D4955A8CB9
// shader: 8B30, A77946AF41056B9B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BB71D9632D35BCC9, A77946AF41056B9B
// program: 7D0E137D17488E58, 29769686DF99D914, A77946AF41056B9B
// reference: 030DC4B6813ECDD1, A7EDE1AEDB02979A
// shader: 8B30, 1E18FE8AFA98C738
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C5511F91CDC89215, 1E18FE8AFA98C738
// program: 66EE681BE47060DB, 29769686DF99D914, 1E18FE8AFA98C738
// shader: 8B30, 1C8B3FB0D0FD3212
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 906CB221C81DFE19, 1C8B3FB0D0FD3212
// program: AA44ABA025CEB29B, 29769686DF99D914, 1C8B3FB0D0FD3212
// shader: 8B30, 7D34F13586FFEF2B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C753186A7411B600, 7D34F13586FFEF2B
// program: 35496CC12B2D96FC, 29769686DF99D914, 7D34F13586FFEF2B
// shader: 8B30, 5CCDAFE682798DAB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 906CB221738E461D, 5CCDAFE682798DAB
// program: AA44ABA025CEB29B, 29769686DF99D914, 5CCDAFE682798DAB
// shader: 8B31, 0C9B4AC37A802AC7

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_6();
bool sub_12();
bool sub_17();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
sub_0();
return true;
}

bool sub_6() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_12() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_17() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_9() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 170u;
while (true) {
switch (jmp_to) {
case 170u:
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_3();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_8();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_7();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_3();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_3();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_10();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_11();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_15();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_16();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_17();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_3();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_12();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_11() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_9();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_15() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_13();
} else {
sub_14();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_13() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_14() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_16() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B264429D14BBCA, 0C9B4AC37A802AC7
// shader: 8B30, 0FA700895CD4E686
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5A2AB705398150B3, 0FA700895CD4E686
// program: 0C9B4AC37A802AC7, 29769686DF99D914, 0FA700895CD4E686
// shader: 8B30, 7FF34CDE7A2CE652
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E21976DBD19D5, 7FF34CDE7A2CE652
// program: 0E07593EF870A384, 29769686DF99D914, 7FF34CDE7A2CE652
// shader: 8B31, 817E6CFC11CAA235

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_2();
bool sub_3();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 450u;
while (true) {
switch (jmp_to) {
case 450u:
sub_1();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_1();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
// reference: F2B26442FE2F335B, 817E6CFC11CAA235
// shader: 8B30, B03C18793E5A25A2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[1].rgb)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a) * (1.0 - (const_color[1].a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B4783A4BC44E4E51, B03C18793E5A25A2
// program: 817E6CFC11CAA235, 29769686DF99D914, B03C18793E5A25A2
// shader: 8B30, 8F13ECEA33A8A109
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 00310758CA424F88, 8F13ECEA33A8A109
// program: C85D29A0651118CB, 29769686DF99D914, 8F13ECEA33A8A109
// shader: 8B30, BAB9387484C24C5E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((last_tex_env_out.rgb) + (last_tex_env_out.aaa), vec3(1)) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((last_tex_env_out.a) + (last_tex_env_out.a), 1.0) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((const_color[4].rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4BC45629B6E23781, BAB9387484C24C5E
// program: 25831E40F9585075, 29769686DF99D914, BAB9387484C24C5E
// shader: 8B30, 469401D28FA03AA4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C4F0C5288BF3E2DE, 469401D28FA03AA4
// program: C25988132E1A18BE, 29769686DF99D914, 469401D28FA03AA4
// shader: 8B30, B49873E612E612B9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp(min((texcolor2.rgb) + (last_tex_env_out.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp(min((texcolor2.a) + (last_tex_env_out.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (const_color[4].rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (const_color[4].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (texcolor1.r);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B147685D699432CC, B49873E612E612B9
// program: BD6F29B021AA95AD, 29769686DF99D914, B49873E612E612B9
// shader: 8B30, 42CE3866A6D0B1C6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E077D31CAFE4AF92, 42CE3866A6D0B1C6
// program: 8C6F3BFC16CB64A7, 29769686DF99D914, 42CE3866A6D0B1C6
// shader: 8B30, C0AB7615B39154F3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 030DC4B690578249, C0AB7615B39154F3
// program: 9B54FF16E580361C, 29769686DF99D914, C0AB7615B39154F3
// shader: 8B31, 7FDCF7E8BA0BD5AA

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_17();
bool sub_11();
bool sub_16();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_1();
bool sub_2();
bool sub_3();
bool sub_8();
bool sub_0();
bool sub_7();
bool sub_10();
bool sub_9();
bool sub_14();
bool sub_12();
bool sub_13();
bool sub_15();

bool exec_shader() {
sub_0();
return true;
}

bool sub_17() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_11() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_16() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_3() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_8() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 187u;
while (true) {
switch (jmp_to) {
case 187u:
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
sub_3();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
if (uniforms.b[0]) {
sub_7();
}
vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
sub_3();
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
reg_tmp2 = reg_tmp12 + reg_tmp13;
sub_4();
reg_tmp3 = -reg_tmp1 + reg_tmp2;
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
sub_1();
reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
sub_4();
vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
reg_tmp14 = uniforms.f[71];
reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
reg_tmp14 = uniforms.f[72];
reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
vs_out_attr2.w = (reg_tmp0.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_4();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_8();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_9();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_9();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_10();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_11();
sub_3();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_12();
} else {
sub_13();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_14();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_11();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_15();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_16();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_17();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_11();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_4();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_11();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_11();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_7() {
reg_tmp15.x = (uniforms.f[4].wwww).x;
reg_tmp14.y = (uniforms.f[5].wwww).y;
reg_tmp13.z = (uniforms.f[6].wwww).z;
reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
reg_tmp12 = reg_tmp8 + reg_tmp6;
reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
reg_tmp14.z = rsq_s(reg_tmp12.w);
reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
reg_tmp13 = uniforms.f[83];
return false;
}
bool sub_10() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_4();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_8();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_9() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
sub_4();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_14() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_12();
} else {
sub_13();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_12() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_13() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_15() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B26442C6B72A73, 7FDCF7E8BA0BD5AA
// shader: 8B30, A9611F1EEDEEC97B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.r) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((combiner_buffer.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor0.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((texcolor0.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor2.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: DF20617EC7E63D15, A9611F1EEDEEC97B
// program: 7FDCF7E8BA0BD5AA, 29769686DF99D914, A9611F1EEDEEC97B
// shader: 8B30, FBDFCCADDC5D054E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E2197B5190DD6, FBDFCCADDC5D054E
// program: 7FDCF7E8BA0BD5AA, 29769686DF99D914, FBDFCCADDC5D054E
// shader: 8B30, D063F177B925C50D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 85287587329FF314, D063F177B925C50D
// program: 9B54FF16E580361C, 29769686DF99D914, D063F177B925C50D
// shader: 8B30, 3EFD3FFC51B7952A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE3AF7616ACF0699, 3EFD3FFC51B7952A
// program: BD6F29B021AA95AD, 29769686DF99D914, 3EFD3FFC51B7952A
// shader: 8B30, 25418D8E2A5B67D3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E21972D68BB98, 25418D8E2A5B67D3
// program: 9B54FF16E580361C, 29769686DF99D914, 25418D8E2A5B67D3
// shader: 8B30, 5DF387075A2B402B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.aaa), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 94572C0105082DB1, 5DF387075A2B402B
// program: 9B54FF16E580361C, 29769686DF99D914, 5DF387075A2B402B
// shader: 8B30, 70CF1DF725C8A199
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0031075871D1F78C, 70CF1DF725C8A199
// program: C85D29A0651118CB, 29769686DF99D914, 70CF1DF725C8A199
// program: 9B54FF16E580361C, 29769686DF99D914, AEBDF325C19C6461
// shader: 8B30, 55C4680DDA0093BC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 030DC4B62D68BB98, 55C4680DDA0093BC
// program: 9B54FF16E580361C, 29769686DF99D914, 55C4680DDA0093BC
// shader: 8B30, D56B10181AEAB7FC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp(min((texcolor2.rgb) + (last_tex_env_out.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp(min((texcolor2.a) + (last_tex_env_out.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (const_color[4].rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (const_color[4].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (texcolor1.r);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9CABCC43DEEC1286, D56B10181AEAB7FC
// program: BD6F29B021AA95AD, 29769686DF99D914, D56B10181AEAB7FC
// shader: 8B30, A9F632A5C3F59A78
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2BB90A6946902F4, A9F632A5C3F59A78
// program: 9B54FF16E580361C, 29769686DF99D914, A9F632A5C3F59A78
// shader: 8B30, 27EA794EC737B4BA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 73CA25A5DAA3E20D, 27EA794EC737B4BA
// program: 9B54FF16E580361C, 29769686DF99D914, 27EA794EC737B4BA
// shader: 8B30, 0979B92B59B52DF0
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 119621FBA281FD15, 0979B92B59B52DF0
// program: 25831E40F9585075, 29769686DF99D914, 0979B92B59B52DF0
// shader: 8B30, 33C960A8A85F89E7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 578325ABE849CDB7, 33C960A8A85F89E7
// program: 7D0E137D17488E58, 29769686DF99D914, 33C960A8A85F89E7
// shader: 8B30, 5C971389D48F69E2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A2D96A98AFB377E7, 5C971389D48F69E2
// program: BD6F29B021AA95AD, 29769686DF99D914, 5C971389D48F69E2
// shader: 8B30, A64AC7F35D379462
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2BB90A6C39AF206, A64AC7F35D379462
// program: 9B54FF16E580361C, 29769686DF99D914, A64AC7F35D379462
// shader: 8B30, FDDFC9EB79FC5050
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E219731811C15, FDDFC9EB79FC5050
// program: 0E07593EF870A384, 29769686DF99D914, FDDFC9EB79FC5050
// shader: 8B30, 4DBEC69CEEFD5F5A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E219790578249, 4DBEC69CEEFD5F5A
// program: 9B54FF16E580361C, 29769686DF99D914, 4DBEC69CEEFD5F5A
// shader: 8B30, A847658B31C4EEA7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2BB90A629563B25, A847658B31C4EEA7
// program: 9B54FF16E580361C, 29769686DF99D914, A847658B31C4EEA7
// shader: 8B30, D792CD6395B0DA27
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE3AF761AFB377E7, D792CD6395B0DA27
// program: BD6F29B021AA95AD, 29769686DF99D914, D792CD6395B0DA27
// shader: 8B30, A9B4F691F5D4E1A7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7D75BC02A281FD15, A9B4F691F5D4E1A7
// program: 25831E40F9585075, 29769686DF99D914, A9B4F691F5D4E1A7
// shader: 8B30, 1E3ADAB9A7677BF1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3B60B852E849CDB7, 1E3ADAB9A7677BF1
// program: 7D0E137D17488E58, 29769686DF99D914, 1E3ADAB9A7677BF1
// reference: 349E2197813ECDD1, 28B252EFC1B2DC46
// shader: 8B30, E0760022637F46BD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2BB90A6383F74BD, E0760022637F46BD
// program: 9B54FF16E580361C, 29769686DF99D914, E0760022637F46BD
// shader: 8B30, F26F1704BAA6BB1A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp(min((texcolor2.rgb) + (last_tex_env_out.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp(min((texcolor2.a) + (last_tex_env_out.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (const_color[4].rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (const_color[4].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (texcolor1.r);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9CABCC431B9063F8, F26F1704BAA6BB1A
// program: BD6F29B021AA95AD, 29769686DF99D914, F26F1704BAA6BB1A
// reference: 030DC4B69D34F6AE, 7B167AAC5AA8356B
// shader: 8B30, 6A5AADA8A61A48F4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0), vec3(1)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
if (last_tex_env_out.a <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2BB90A624354FC2, 6A5AADA8A61A48F4
// program: 9B54FF16E580361C, 29769686DF99D914, 6A5AADA8A61A48F4
// shader: 8B30, 3ADD2814DB02979A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 80E79F577A9B4B6A, 3ADD2814DB02979A
// program: 9B54FF16E580361C, 29769686DF99D914, 3ADD2814DB02979A
// shader: 8B30, 0CF7992B2E0E4EA3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 22C80BA96ACF0699, 0CF7992B2E0E4EA3
// program: BD6F29B021AA95AD, 29769686DF99D914, 0CF7992B2E0E4EA3
// shader: 8B30, 54112B21B39154F3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 80E79F5790578249, 54112B21B39154F3
// program: 9B54FF16E580361C, 29769686DF99D914, 54112B21B39154F3
// shader: 8B30, B3B3AC6FB0C0CABA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1) - (texcolor1.ggg)), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D792449A2D35BCC9, B3B3AC6FB0C0CABA
// program: 7D0E137D17488E58, 29769686DF99D914, B3B3AC6FB0C0CABA
// shader: 8B30, 48E83CAD836639C9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((last_tex_env_out.rgb) + (last_tex_env_out.aaa), vec3(1)) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((last_tex_env_out.a) + (last_tex_env_out.a), 1.0) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((const_color[4].rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8ADA0EFF019A17CB, 48E83CAD836639C9
// program: 25831E40F9585075, 29769686DF99D914, 48E83CAD836639C9
// reference: 4C516198671D9E7C, 3874910AF92BADFE
// shader: 8B30, 3CBEE3F6F3233CC3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (const_color[1].a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((texcolor1.a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((const_color[3].rgb) * (last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.aaa) * (const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (texcolor1.g);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((const_color[5].rgb) * (const_color[5].aaa) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C4F0C5283C8BC294, 3CBEE3F6F3233CC3
// program: C25988132E1A18BE, 29769686DF99D914, 3CBEE3F6F3233CC3
// shader: 8B30, 2CF2892EB9EE3FA7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp(min((texcolor2.rgb) + (last_tex_env_out.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp(min((texcolor2.a) + (last_tex_env_out.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (const_color[4].rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (const_color[4].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (texcolor1.r);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7059308BDEEC1286, 2CF2892EB9EE3FA7
// program: BD6F29B021AA95AD, 29769686DF99D914, 2CF2892EB9EE3FA7
// shader: 8B30, 63E96799DCA41F4A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 21698BCA189C8FD8, 63E96799DCA41F4A
// program: 8C6F3BFC16CB64A7, 29769686DF99D914, 63E96799DCA41F4A
// shader: 8B31, D09EF011F02E4A90

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_16();
bool sub_10();
bool sub_15();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_6();
bool sub_0();
bool sub_9();
bool sub_8();
bool sub_13();
bool sub_11();
bool sub_12();
bool sub_14();

bool exec_shader() {
sub_0();
return true;
}

bool sub_16() {
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.z = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9 + addr_regs.x], vs_in_reg0);
reg_tmp8.x = dot_s(uniforms.f[8 + addr_regs.x], vs_in_reg0);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp7.z = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.x = dot_3(uniforms.f[8 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
reg_tmp9.w = (uniforms.f[93].yyyy).w;
reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
reg_tmp12.x = rsq_s(reg_tmp12.x);
vs_out_attr4 = -reg_tmp9;
bool_regs.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
bool_regs.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
reg_tmp10.w = (reg_tmp13.zzzz).w;
if (all(bool_regs)) {
sub_2();
}
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
vs_out_attr0 = reg_tmp10;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp10.x = (-reg_tmp13.zzzz).x;
return false;
}
bool sub_7() {
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_6() {
reg_tmp15 = max_s(uniforms.f[93].xxxx, reg_tmp12);
reg_tmp14 = max_s(uniforms.f[93].xxxx, -reg_tmp12);
reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
return false;
}
bool sub_0() {
uint jmp_to = 260u;
while (true) {
switch (jmp_to) {
case 260u:
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_6();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
sub_8();
vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_8();
reg_tmp2.x = (max_s(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
vs_out_attr2.w = (max_s(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_9();
vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
vs_out_attr2.w = (reg_tmp12.wwww).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
sub_9();
reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
vs_out_attr2.w = (reg_tmp2.xxxx).w;
vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
sub_7();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr2 = reg_tmp12 + reg_tmp13;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
sub_13();
reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
if (uniforms.b[14]) {
jmp_to = 490u; break;
}
vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
if (uniforms.b[0]) {
sub_14();
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_16();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
sub_1();
sub_3();
reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
sub_10();
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 504u; break;
}
vs_out_attr0 = vs_in_reg0;
vs_out_attr1 = vs_in_reg1;
vs_out_attr2 = uniforms.f[93].yyyy;
vs_out_attr4 = uniforms.f[93].xxxx;
if (uniforms.b[14]) {
jmp_to = 496u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (reg_tmp12.xxxx).x;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 487u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 490u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 496u:
vs_out_attr3 = uniforms.f[93].xxxx;
vs_out_attr5 = uniforms.f[93].xxxx;
return true;
case 504u:
return true;
default: return false;
}
}
return false;
}
bool sub_9() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
sub_3();
reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
sub_6();
reg_tmp15 = abs(reg_tmp1);
reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
return false;
}
bool sub_8() {
reg_tmp8.x = (vs_in_reg1.wwww).x;
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_7();
sub_3();
reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
return false;
}
bool sub_13() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp0 = abs(reg_tmp0);
reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
if (!bool_regs.x) {
sub_11();
} else {
sub_12();
}
reg_tmp0.w = (min_s(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
return false;
}
bool sub_11() {
vs_out_attr1.z = rcp_s(reg_tmp14.x);
vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
return false;
}
bool sub_12() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_14() {
reg_tmp0 = uniforms.f[13];
reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
reg_tmp12.x = (max_s(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
reg_tmp12.x = log2(reg_tmp12.x);
reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.y = (min_s(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
return false;
}
// reference: F2B2644204D457C5, D09EF011F02E4A90
// shader: 8B30, 97B35ADE9F5805A3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 003107589FCCA243, 97B35ADE9F5805A3
// program: D09EF011F02E4A90, 29769686DF99D914, 97B35ADE9F5805A3
// program: D09EF011F02E4A90, 29769686DF99D914, DE27EBFE5AD58922
// shader: 8B30, 30EF60360D42ED42
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 070ECF8BF28290BD, 30EF60360D42ED42
// program: 25831E40F9585075, 29769686DF99D914, 30EF60360D42ED42
// reference: 030DC4B656A1405D, A7EDE1AEDB02979A
// shader: 8B30, 737EDEAF4846B129
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6E8591CA2347F0A8, 737EDEAF4846B129
// program: 88924C5D7CCF8608, 29769686DF99D914, 737EDEAF4846B129
// reference: 6E8591CA0F7DFB9F, 737EDEAF4846B129
// shader: 8B30, 3C280763CBE895BA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6E8591CAE5B132BC, 3C280763CBE895BA
// program: 88924C5D7CCF8608, 29769686DF99D914, 3C280763CBE895BA
// shader: 8B30, F67E1FF50AA4F864
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = depth * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E21978A12A411, F67E1FF50AA4F864
// program: 0E07593EF870A384, 29769686DF99D914, F67E1FF50AA4F864
// reference: 349E219756A1405D, 28B252EFC1B2DC46
// program: 9B54FF16E580361C, 29769686DF99D914, AEBDF325C19C6461
