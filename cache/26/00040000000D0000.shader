// shader: 8DD9, 29769686DF99D914

layout(triangles) in;
layout(triangle_strip, max_vertices=3) out;

layout(location=1) out vec4 primary_color;
layout(location=2) out vec2 texcoord0;
layout(location=3) out vec2 texcoord1;
layout(location=4) out vec2 texcoord2;
layout(location=5) out float texcoord0_w;
layout(location=6) out vec4 normquat;
layout(location=7) out vec3 view;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

layout(location=0) in vec4 vs_out_attr0[];
layout(location=1) in vec4 vs_out_attr1[];
layout(location=2) in vec4 vs_out_attr2[];
layout(location=3) in vec4 vs_out_attr3[];
layout(location=4) in vec4 vs_out_attr4[];
layout(location=5) in vec4 vs_out_attr5[];
struct Vertex {
    vec4 attributes[6];
};

vec4 GetVertexQuaternion(Vertex vtx) {
    return vec4(vtx.attributes[1].x, vtx.attributes[1].y, vtx.attributes[1].z, vtx.attributes[1].w);
}

void EmitVtx(Vertex vtx, bool quats_opposite) {
    vec4 vtx_pos = vec4(vtx.attributes[0].x, vtx.attributes[0].y, vtx.attributes[0].z, vtx.attributes[0].w);
    gl_Position = vtx_pos;
#if !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)
    gl_ClipDistance[0] = -vtx_pos.z;
    gl_ClipDistance[1] = dot(clip_coef, vtx_pos);
#endif // !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)

    vec4 vtx_quat = GetVertexQuaternion(vtx);
    normquat = mix(vtx_quat, -vtx_quat, bvec4(quats_opposite));

    vec4 vtx_color = vec4(vtx.attributes[2].x, vtx.attributes[2].y, vtx.attributes[2].z, vtx.attributes[2].w);
    primary_color = clamp(vtx_color, vec4(0), vec4(1));

    texcoord0 = vec2(vtx.attributes[3].x, vtx.attributes[3].y);
    texcoord1 = vec2(vtx.attributes[5].x, vtx.attributes[5].y);

    texcoord0_w = vtx.attributes[3].w;
    view = vec3(vtx.attributes[4].x, vtx.attributes[4].y, vtx.attributes[4].z);
    texcoord2 = vec2(vtx.attributes[5].z, vtx.attributes[5].w);

    EmitVertex();
}

bool AreQuaternionsOpposite(vec4 qa, vec4 qb) {
    return (dot(qa, qb) < 0.0);
}

void EmitPrim(Vertex vtx0, Vertex vtx1, Vertex vtx2) {
    EmitVtx(vtx0, false);
    EmitVtx(vtx1, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx1)));
    EmitVtx(vtx2, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx2)));
    EndPrimitive();
}

void main() {
    Vertex prim_buffer[3];
    prim_buffer[0].attributes = vec4[6](vs_out_attr0[0], vs_out_attr1[0], vs_out_attr2[0], vs_out_attr3[0], vs_out_attr4[0], vs_out_attr5[0]);
    prim_buffer[1].attributes = vec4[6](vs_out_attr0[1], vs_out_attr1[1], vs_out_attr2[1], vs_out_attr3[1], vs_out_attr4[1], vs_out_attr5[1]);
    prim_buffer[2].attributes = vec4[6](vs_out_attr0[2], vs_out_attr1[2], vs_out_attr2[2], vs_out_attr3[2], vs_out_attr4[2], vs_out_attr5[2]);
    EmitPrim(prim_buffer[0], prim_buffer[1], prim_buffer[2]);
}
// reference: A0CB59480533AF6A, 29769686DF99D914
// shader: 8B31, E8453D1F80A11555

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_3();
bool sub_8();
bool sub_10();
bool sub_5();
bool sub_6();
bool sub_7();
bool sub_12();
bool sub_15();
bool sub_11();
bool sub_13();
bool sub_4();
bool sub_14();
bool sub_0();
bool sub_2();
bool sub_9();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_3() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_7() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_12() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_11() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_12();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_12();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_4() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_0() {
uint jmp_to = 159u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_12();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
case 159u:
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_2();
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_2();
sub_4();
sub_5();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_8();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_9();
}
sub_10();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_9();
}
sub_10();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_8();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_5();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_5();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_8();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
bool sub_2() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_9() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
// reference: BCA0AE3E67362648, E8453D1F80A11555
// shader: 8B30, B45DBB7DF2599D81
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F1C2B259D37D8E7C, B45DBB7DF2599D81
// program: E8453D1F80A11555, 29769686DF99D914, B45DBB7DF2599D81
// shader: 8B31, 4644B865D3DF1DDB

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_3();
bool sub_8();
bool sub_10();
bool sub_5();
bool sub_6();
bool sub_7();
bool sub_12();
bool sub_15();
bool sub_11();
bool sub_13();
bool sub_4();
bool sub_14();
bool sub_0();
bool sub_2();
bool sub_9();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_3() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_7() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_12() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_11() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_12();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_12();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_4() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_0() {
uint jmp_to = 155u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_12();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
case 155u:
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_2();
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_2();
sub_4();
sub_5();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_8();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_9();
}
sub_10();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_9();
}
sub_10();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_8();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_5();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_5();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_8();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_5();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
bool sub_2() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_9() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
// reference: BCA0AE3EB7B76597, 4644B865D3DF1DDB
// shader: 8B30, AEBDF325C19C6461
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E2197D37D8E7C, AEBDF325C19C6461
// program: 4644B865D3DF1DDB, 29769686DF99D914, AEBDF325C19C6461
// shader: 8B31, 8D4F286D802428AA

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_13();
bool sub_8();
bool sub_11();
bool sub_2();
bool sub_7();
bool sub_3();
bool sub_4();
bool sub_6();
bool sub_12();
bool sub_5();
bool sub_9();
bool sub_15();
bool sub_10();
bool sub_14();
bool sub_1();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_13() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_11() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_4() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_6() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_12() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_5() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_9() {
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_14() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_1() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 218u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_13();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_13();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_14();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_14();
sub_15();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_11();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
case 218u:
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_1();
}
sub_2();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_1();
}
sub_2();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp12 = uniforms.f[85];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_11();
reg_tmp12 = uniforms.f[14];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_7();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
sub_7();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_11();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E7D8DF4AA, 8D4F286D802428AA
// shader: 8B30, 5A90402762FD81FA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 171E7F4DC7EA33C3, 5A90402762FD81FA
// program: 8D4F286D802428AA, 29769686DF99D914, 5A90402762FD81FA
// shader: 8B31, 31B2260282448384

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_3();
bool sub_9();
bool sub_11();
bool sub_6();
bool sub_7();
bool sub_8();
bool sub_2();
bool sub_15();
bool sub_12();
bool sub_13();
bool sub_5();
bool sub_14();
bool sub_0();
bool sub_4();
bool sub_10();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_3() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_9() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_7();
} else {
sub_8();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_11() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_7();
} else {
sub_8();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_7();
} else {
sub_8();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_8() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_12() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_5() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_0() {
uint jmp_to = 144u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_7();
} else {
sub_8();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
case 144u:
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_3();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_4();
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_5();
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_9();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_10();
}
sub_11();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_10();
}
sub_11();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_6();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_3();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_9();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_6();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_9();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_6();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_9();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_9();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_9();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
bool sub_4() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_10() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
// reference: BCA0AE3EE77854E0, 31B2260282448384
// shader: 8B30, 5E8435C26700D05A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E219763C25FB8, 5E8435C26700D05A
// program: 31B2260282448384, 29769686DF99D914, 5E8435C26700D05A
// shader: 8B31, 61740D732110F680

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_1();
bool sub_8();
bool sub_2();
bool sub_12();
bool sub_7();
bool sub_3();
bool sub_4();
bool sub_6();
bool sub_15();
bool sub_5();
bool sub_13();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_11();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_2() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_4() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_6() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_5() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_9() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_11() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 423u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_9();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_10();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_2();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_2();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_7();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_2();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_7();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_2();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
case 423u:
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_2();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_2();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E9594AE5D, 61740D732110F680
// shader: 8B30, 78C2DB72E40DF45C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CA3F66A963C25FB8, 78C2DB72E40DF45C
// program: 61740D732110F680, 29769686DF99D914, 78C2DB72E40DF45C
// shader: 8B30, 7B167AAC5AA8356B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 030DC4B685E10C15, 7B167AAC5AA8356B
// program: 4644B865D3DF1DDB, 29769686DF99D914, 7B167AAC5AA8356B
// shader: 8B30, 15A142540A4F529A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 349E219785E10C15, 15A142540A4F529A
// program: 4644B865D3DF1DDB, 29769686DF99D914, 15A142540A4F529A
// shader: 8B31, C0A37A266820E6BF

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_10();
bool sub_7();
bool sub_14();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_3();
bool sub_1();
bool sub_9();
bool sub_2();
bool sub_12();
bool sub_15();
bool sub_11();
bool sub_13();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_14() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_3() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_1() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_9() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_3();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_2() {
sub_3();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_11() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_13() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 366u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_3();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_3();
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_11();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_12();
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_7();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_3();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp12 = uniforms.f[85];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_7();
reg_tmp12 = uniforms.f[14];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_4();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
case 366u:
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3EEF21B86B, C0A37A266820E6BF
// shader: 8B30, 36A245E4D4976C91
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F4E869561CE01B81, 36A245E4D4976C91
// program: C0A37A266820E6BF, 29769686DF99D914, 36A245E4D4976C91
// shader: 8B31, 6867476982CC7DE5

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_10();
bool sub_1();
bool sub_14();
bool sub_7();
bool sub_2();
bool sub_3();
bool sub_6();
bool sub_4();
bool sub_9();
bool sub_5();
bool sub_12();
bool sub_15();
bool sub_11();
bool sub_13();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_14() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_6() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_4() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_9() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_5() {
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_11() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_13() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 315u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_11();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_12();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_7();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
reg_tmp12 = uniforms.f[85];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_1();
reg_tmp12 = uniforms.f[14];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_7();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
case 315u:
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_4();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_4();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_4();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_4();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_4();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_4();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_4();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
sub_7();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_1();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E017D6977, 6867476982CC7DE5
// shader: 8B30, 6A12A319B3DDE48C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5C35EAF4C2B665C1, 6A12A319B3DDE48C
// program: 6867476982CC7DE5, 29769686DF99D914, 6A12A319B3DDE48C
// shader: 8B31, 05EE57DECD40F85C

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_10();
bool sub_6();
bool sub_14();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_1();
bool sub_12();
bool sub_15();
bool sub_11();
bool sub_13();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_14() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_7() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_9() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_1() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_11() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_13() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 288u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_11();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_12();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp12 = uniforms.f[85];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_6();
reg_tmp12 = uniforms.f[14];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
case 288u:
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3EA5555BFE, 05EE57DECD40F85C
// program: 05EE57DECD40F85C, 29769686DF99D914, 36A245E4D4976C91
// shader: 8B30, B5158053803A5D22
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9C18A0F4F8D165EC, B5158053803A5D22
// program: 8D4F286D802428AA, 29769686DF99D914, B5158053803A5D22
// shader: 8B30, 6C3739289862921C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4DC783D3D4FCE141, 6C3739289862921C
// program: 8D4F286D802428AA, 29769686DF99D914, 6C3739289862921C
// shader: 8B31, 55EE328CDEA6D002

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_13();
bool sub_8();
bool sub_11();
bool sub_7();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_12();
bool sub_1();
bool sub_9();
bool sub_15();
bool sub_10();
bool sub_14();
bool sub_6();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_13() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_11() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_12() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_1() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_9() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_14() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_6() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 230u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_13();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_13();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_14();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_14();
sub_15();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_11();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_6();
}
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
case 230u:
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_6();
}
sub_7();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp12 = uniforms.f[85];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_11();
reg_tmp12 = uniforms.f[14];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_11();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E112734C9, 55EE328CDEA6D002
// shader: 8B30, 2FA4FB5238F6DB5D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A8B7863B93C727A8, 2FA4FB5238F6DB5D
// program: 55EE328CDEA6D002, 29769686DF99D914, 2FA4FB5238F6DB5D
// program: 55EE328CDEA6D002, 29769686DF99D914, B5158053803A5D22
// shader: 8B30, FDA79DD3874CAE46
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4CA36BB4E584B7C8, FDA79DD3874CAE46
// program: 55EE328CDEA6D002, 29769686DF99D914, FDA79DD3874CAE46
// shader: 8B30, B3B233DC8EF90DAD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9D7C4893C9A93365, B3B233DC8EF90DAD
// program: 55EE328CDEA6D002, 29769686DF99D914, B3B233DC8EF90DAD
// shader: 8B31, 6DAC43CE609FCFAE

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_7();
bool sub_6();
bool sub_12();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_15();
bool sub_1();
bool sub_13();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_11();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_1() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_9() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_11() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 454u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_9();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_10();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_6();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
case 454u:
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E6D113EDD, 6DAC43CE609FCFAE
// shader: 8B30, F787DCEF787154F2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9B8A91E202714133, F787DCEF787154F2
// program: 6DAC43CE609FCFAE, 29769686DF99D914, F787DCEF787154F2
// shader: 8B30, A7134FDEB3A0C378
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BDB919DF271F11F4, A7134FDEB3A0C378
// program: 6DAC43CE609FCFAE, 29769686DF99D914, A7134FDEB3A0C378
// reference: 349E21979867D903, 5E8435C26700D05A
// shader: 8B31, 44FCCB013C70839D

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_7();
bool sub_1();
bool sub_12();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_5();
bool sub_15();
bool sub_4();
bool sub_13();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_11();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_5() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_4() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_9() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_11() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 427u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_9();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_10();
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_1();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_6();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_6();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
case 427u:
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_1();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E3F666C7D, 44FCCB013C70839D
// program: 44FCCB013C70839D, 29769686DF99D914, A7134FDEB3A0C378
// shader: 8B31, 10A775AB384A36DA

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_4();
bool sub_8();
bool sub_1();
bool sub_12();
bool sub_7();
bool sub_2();
bool sub_3();
bool sub_6();
bool sub_15();
bool sub_5();
bool sub_13();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_11();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_4() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_6() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_5() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_9() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_11() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 418u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_4();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_4();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_9();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_10();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_1();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_7();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_7();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
case 418u:
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_1();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3EEA517FC5, 10A775AB384A36DA
// shader: 8B30, 651923D2B95240E1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: AB3F773AD65C1B2C, 651923D2B95240E1
// program: 10A775AB384A36DA, 29769686DF99D914, 651923D2B95240E1
// shader: 8B31, 614E7E5CB2B3586C

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_7();
bool sub_6();
bool sub_12();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_15();
bool sub_1();
bool sub_13();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_11();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_1() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_9() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_11() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 452u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_9();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_10();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_6();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
case 452u:
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3EE8E91C12, 614E7E5CB2B3586C
// shader: 8B30, 70FFC45C4844A7AB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 00310758B2741A35, 70FFC45C4844A7AB
// program: 614E7E5CB2B3586C, 29769686DF99D914, 70FFC45C4844A7AB
// shader: 8B31, 6BE6EA0E5755D38C

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_1();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_1() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_0() {
uint jmp_to = 476u;
while (true) {
switch (jmp_to) {
case 476u:
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
vs_out_attr2 = uniforms.f[93].xxxx;
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E667D9E13, 6BE6EA0E5755D38C
// shader: 8B30, 04285F20F49BB676
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 77BEFC17A9CF617F, 04285F20F49BB676
// program: 6BE6EA0E5755D38C, 29769686DF99D914, 04285F20F49BB676
// shader: 8B30, F1170390C5F55E70
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BDB919DFDCBA974F, F1170390C5F55E70
// program: 6DAC43CE609FCFAE, 29769686DF99D914, F1170390C5F55E70
// shader: 8B31, 4E79D528018181EF

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_0();
bool sub_1();
bool sub_2();
bool sub_9();
bool sub_11();
bool sub_8();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_15();
bool sub_12();
bool sub_13();
bool sub_7();
bool sub_14();
bool sub_6();
bool sub_10();

bool exec_shader() {
sub_0();
return true;
}

bool sub_0() {
uint jmp_to = 0u;
while (true) {
switch (jmp_to) {
case 0u:
sub_1();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_1();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
sub_2();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_1();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_6();
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_6();
sub_7();
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_9();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_10();
}
sub_11();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_10();
}
sub_11();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_8();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_9();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_8();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_9();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_8();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_9();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_9();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_8();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_9();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
bool sub_1() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_2() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_9() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_11() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_8() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_4() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_5() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_12() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_7() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_6() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_10() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
// reference: BCA0AE3ED96351EA, 4E79D528018181EF
// reference: 00310758221E5A48, 70FFC45C4844A7AB
// program: 4E79D528018181EF, 29769686DF99D914, 70FFC45C4844A7AB
// program: 44FCCB013C70839D, 29769686DF99D914, F1170390C5F55E70
// shader: 8B30, F11703906B94114E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 652BD6DCDCBA974F, F11703906B94114E
// program: 44FCCB013C70839D, 29769686DF99D914, F11703906B94114E
// shader: 8B31, 5A0A3341FE24DBB0

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_7();
bool sub_1();
bool sub_12();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_5();
bool sub_15();
bool sub_4();
bool sub_13();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_11();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_1() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_3() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_5() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_4() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_9() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_11() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 470u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_2();
} else {
sub_3();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_5();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_9();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_10();
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_1();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_5();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_1();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_6();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_6();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_1();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
case 470u:
sub_1();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_4();
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E99F63D23, 5A0A3341FE24DBB0
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 04285F20F49BB676
// shader: 8B30, 7CF928A067B68DCF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 31B4FA981CE01B81, 7CF928A067B68DCF
// program: C0A37A266820E6BF, 29769686DF99D914, 7CF928A067B68DCF
// program: 05EE57DECD40F85C, 29769686DF99D914, 7CF928A067B68DCF
// shader: 8B31, 30F99E8972B94D3F

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_15();
bool sub_11();
bool sub_6();
bool sub_8();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_12();
bool sub_2();
bool sub_13();
bool sub_1();
bool sub_0();
bool sub_7();

bool exec_shader() {
sub_0();
return true;
}

bool sub_15() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_11() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_8() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_10() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_14() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_9() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_10();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_12() {
sub_10();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_2() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_13() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_1() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_0() {
uint jmp_to = 198u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_11();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_10();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_15();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_10();
sub_11();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_15();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_1();
sub_11();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
case 198u:
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_2();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_7();
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_7();
}
sub_8();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_10();
sub_11();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
reg_tmp12 = uniforms.f[85];
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_6();
reg_tmp12 = uniforms.f[14];
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
bool sub_7() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
// reference: BCA0AE3E23983574, 30F99E8972B94D3F
// shader: 8B30, BCD1B4C02FC91F65
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CCBDB73553153E50, BCD1B4C02FC91F65
// program: 30F99E8972B94D3F, 29769686DF99D914, BCD1B4C02FC91F65
// shader: 8B30, 810C767C78A3DFB2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F1C2B259158B4C68, 810C767C78A3DFB2
// program: E8453D1F80A11555, 29769686DF99D914, 810C767C78A3DFB2
// shader: 8B30, BA01483A522F7672
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2E26FD9A9CF617F, BA01483A522F7672
// program: 6BE6EA0E5755D38C, 29769686DF99D914, BA01483A522F7672
// shader: 8B30, A86920E20AB49456
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
if (last_tex_env_out.a <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C6515778158B4C68, A86920E20AB49456
// program: 4644B865D3DF1DDB, 29769686DF99D914, A86920E20AB49456
// shader: 8B31, 22F5FA64870C6C40

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_10();
bool sub_7();
bool sub_14();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_3();
bool sub_1();
bool sub_9();
bool sub_2();
bool sub_12();
bool sub_15();
bool sub_11();
bool sub_13();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_14() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_3() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_1() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_9() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_3();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_2() {
sub_3();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_11() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_13() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 359u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_3();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_3();
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_11();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_12();
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_7();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_3();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp12 = uniforms.f[85];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_7();
reg_tmp12 = uniforms.f[14];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_4();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
case 359u:
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_1();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_1();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_4();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_4();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E3A16ABD3, 22F5FA64870C6C40
// shader: 8B30, 2283A21699AFB055
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
depth /= gl_FragCoord.w;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (const_color[5].rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 5E9DF8FCDF277052, 2283A21699AFB055
// program: 22F5FA64870C6C40, 29769686DF99D914, 2283A21699AFB055
// shader: 8B31, 0E3E8F6D634C4D20

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_10();
bool sub_2();
bool sub_5();
bool sub_15();
bool sub_8();
bool sub_6();
bool sub_7();
bool sub_1();
bool sub_9();
bool sub_11();
bool sub_3();
bool sub_13();
bool sub_4();
bool sub_12();
bool sub_14();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_10() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_2() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_5() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_8() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_6() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_7() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_1() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_9() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_11() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_1();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_3() {
sub_1();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_13() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_4() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_12() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_14() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 265u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_6();
} else {
sub_7();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_1();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_10();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_2();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_10();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_10();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_10();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_12();
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_12();
sub_13();
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_5();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_14();
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_14();
}
sub_15();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_8();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
case 265u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_3();
reg_tmp12 = uniforms.f[85];
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_5();
reg_tmp12 = uniforms.f[14];
sub_4();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_3();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_8();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_5();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_9();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_9();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_9();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_9();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_9();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_9();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_9();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_9();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_3();
sub_8();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_5();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_10();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_5();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_8();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_5();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_8();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E42DD49FB, 0E3E8F6D634C4D20
// shader: 8B30, B87CD0ED887EF390
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
depth /= gl_FragCoord.w;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = (const_color[5].rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 8CFFB6F64C699696, B87CD0ED887EF390
// program: 0E3E8F6D634C4D20, 29769686DF99D914, B87CD0ED887EF390
// shader: 8B31, E69D925C4B657592

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_13();
bool sub_8();
bool sub_11();
bool sub_7();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_12();
bool sub_1();
bool sub_9();
bool sub_15();
bool sub_10();
bool sub_14();
bool sub_6();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_13() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_11() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_12() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_1() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_9() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_14() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_6() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 228u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_13();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_13();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_14();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_14();
sub_15();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_11();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_6();
}
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
case 228u:
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_6();
}
sub_7();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp12 = uniforms.f[85];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_11();
reg_tmp12 = uniforms.f[14];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_11();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E94DF1606, E69D925C4B657592
// shader: 8B30, D05B719D4305184C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
depth /= gl_FragCoord.w;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 7DD1F3F31BA20A14, D05B719D4305184C
// program: E69D925C4B657592, 29769686DF99D914, D05B719D4305184C
// shader: 8B31, A4FDC8FFB32ECC26

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_10();
bool sub_6();
bool sub_14();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_1();
bool sub_12();
bool sub_15();
bool sub_11();
bool sub_13();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_10() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_14() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_7() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_9() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_1() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_11() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_13() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 286u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_11();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_11();
sub_12();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_13();
}
sub_14();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_10();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp12 = uniforms.f[85];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_6();
reg_tmp12 = uniforms.f[14];
sub_15();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
case 286u:
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_7();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E4C07B952, A4FDC8FFB32ECC26
// shader: 8B30, 9B01691215F57D3D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
depth /= gl_FragCoord.w;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (const_color[5].rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 5E9DF8FC4F4D302F, 9B01691215F57D3D
// program: A4FDC8FFB32ECC26, 29769686DF99D914, 9B01691215F57D3D
// program: 4E79D528018181EF, 29769686DF99D914, D05B719D4305184C
// shader: 8B30, DA473F8643CBB084
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D152B825C7E3ED88, DA473F8643CBB084
// program: 8D4F286D802428AA, 29769686DF99D914, DA473F8643CBB084
// shader: 8B30, 9C68A878548A41CF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0F7F238A6A25D0CC, 9C68A878548A41CF
// program: C0A37A266820E6BF, 29769686DF99D914, 9C68A878548A41CF
// shader: 8B30, 59CD937F57DB4743
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A7A2A028B473AE8C, 59CD937F57DB4743
// program: 6867476982CC7DE5, 29769686DF99D914, 59CD937F57DB4743
// program: 05EE57DECD40F85C, 29769686DF99D914, 9C68A878548A41CF
// shader: 8B30, B5FEF212B0B521C9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2E3520F4E4132E7B, B5FEF212B0B521C9
// program: 8D4F286D802428AA, 29769686DF99D914, B5FEF212B0B521C9
// shader: 8B30, F8F9ADCA78483E2C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FFEA03D3C83EAAD6, F8F9ADCA78483E2C
// program: 8D4F286D802428AA, 29769686DF99D914, F8F9ADCA78483E2C
// shader: 8B30, 34F55A109CA894C1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1A9A063B8F056C3F, 34F55A109CA894C1
// program: 55EE328CDEA6D002, 29769686DF99D914, 34F55A109CA894C1
// program: 55EE328CDEA6D002, 29769686DF99D914, B5FEF212B0B521C9
// shader: 8B30, FDA833292383412A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 595F90E8F946FC5F, FDA833292383412A
// program: 55EE328CDEA6D002, 29769686DF99D914, FDA833292383412A
// shader: 8B30, 3F859FE636383100
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8880B3CFD56B78F2, 3F859FE636383100
// program: 55EE328CDEA6D002, 29769686DF99D914, 3F859FE636383100
// shader: 8B30, B83C46A9CDC19A7D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1912F73ACA9E50BB, B83C46A9CDC19A7D
// program: 10A775AB384A36DA, 29769686DF99D914, B83C46A9CDC19A7D
// shader: 8B30, 58CB9BF7C4C65399
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8C29B6CBDF0AAA32, 58CB9BF7C4C65399
// program: 6BE6EA0E5755D38C, 29769686DF99D914, 58CB9BF7C4C65399
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 58CB9BF7C4C65399
// shader: 8B30, 596E26CEBD411202
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CA23B0446A25D0CC, 596E26CEBD411202
// program: C0A37A266820E6BF, 29769686DF99D914, 596E26CEBD411202
// program: 05EE57DECD40F85C, 29769686DF99D914, 596E26CEBD411202
// shader: 8B30, 4B411D3563499FC1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7E9037354FD775C7, 4B411D3563499FC1
// program: 30F99E8972B94D3F, 29769686DF99D914, 4B411D3563499FC1
// shader: 8B30, 455948C0F5408EBA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4975250551367399, 455948C0F5408EBA
// program: 6BE6EA0E5755D38C, 29769686DF99D914, 455948C0F5408EBA
// shader: 8B30, 4CFE457738D97E21
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 49752505DF0AAA32, 4CFE457738D97E21
// program: 6BE6EA0E5755D38C, 29769686DF99D914, 4CFE457738D97E21
// reference: 7DD1F3F38BC84A69, D05B719D4305184C
// reference: 00310758D9BBDCF3, 70FFC45C4844A7AB
// shader: 8B30, 73E3C11F4E37D0B4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((vec3(1) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2F73E846158B4C68, 73E3C11F4E37D0B4
// program: E8453D1F80A11555, 29769686DF99D914, 73E3C11F4E37D0B4
// reference: F1C2B25985E10C15, 810C767C78A3DFB2
// shader: 8B30, D224EA7A5285F3AB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 49752505BE7A94A4, D224EA7A5285F3AB
// program: 6BE6EA0E5755D38C, 29769686DF99D914, D224EA7A5285F3AB
// shader: 8B30, D120DFE2EAA30D1C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D152B825A693D31E, D120DFE2EAA30D1C
// program: 8D4F286D802428AA, 29769686DF99D914, D120DFE2EAA30D1C
// shader: 8B30, 4035920F465E5472
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0F7F238A0B55EE5A, 4035920F465E5472
// program: C0A37A266820E6BF, 29769686DF99D914, 4035920F465E5472
// shader: 8B30, 230B8C9DC676CAFD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A7A2A028D503901A, 230B8C9DC676CAFD
// program: 6867476982CC7DE5, 29769686DF99D914, 230B8C9DC676CAFD
// program: 05EE57DECD40F85C, 29769686DF99D914, 4035920F465E5472
// shader: 8B30, 4A691150A8B42AD9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2E3520F4856310ED, 4A691150A8B42AD9
// program: 8D4F286D802428AA, 29769686DF99D914, 4A691150A8B42AD9
// shader: 8B30, 9290ED1003B7CD84
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FFEA03D3A94E9440, 9290ED1003B7CD84
// program: 8D4F286D802428AA, 29769686DF99D914, 9290ED1003B7CD84
// shader: 8B30, 6F8545442CECA2A5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1A9A063BEE7552A9, 6F8545442CECA2A5
// program: 55EE328CDEA6D002, 29769686DF99D914, 6F8545442CECA2A5
// program: 55EE328CDEA6D002, 29769686DF99D914, 4A691150A8B42AD9
// shader: 8B30, 97687C00E0FDDCE7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 595F90E89836C2C9, 97687C00E0FDDCE7
// program: 55EE328CDEA6D002, 29769686DF99D914, 97687C00E0FDDCE7
// shader: 8B30, D405847541B28DB3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1912F73AABEE6E2D, D405847541B28DB3
// program: 10A775AB384A36DA, 29769686DF99D914, D405847541B28DB3
// shader: 8B30, DE325F8878016662
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8C29B6CBBE7A94A4, DE325F8878016662
// program: 6BE6EA0E5755D38C, 29769686DF99D914, DE325F8878016662
// program: 5A0A3341FE24DBB0, 29769686DF99D914, DE325F8878016662
// shader: 8B30, 740765601B105231
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CA23B0440B55EE5A, 740765601B105231
// program: C0A37A266820E6BF, 29769686DF99D914, 740765601B105231
// program: 05EE57DECD40F85C, 29769686DF99D914, 740765601B105231
// shader: 8B30, C96C1D39E780D156
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7E9037352EA74B51, C96C1D39E780D156
// program: 30F99E8972B94D3F, 29769686DF99D914, C96C1D39E780D156
// shader: 8B30, B127F5432A0E4C17
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8880B3CFB41B4664, B127F5432A0E4C17
// program: 55EE328CDEA6D002, 29769686DF99D914, B127F5432A0E4C17
// shader: 8B31, E7464710A4CE6336

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_15();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_11();
bool sub_14();
bool sub_10();
bool sub_12();
bool sub_3();
bool sub_13();
bool sub_1();
bool sub_0();
bool sub_8();

bool exec_shader() {
sub_0();
return true;
}

bool sub_15() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_2() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_9() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_5() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_6() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_11() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_14() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_10() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_11();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_12() {
sub_11();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_3() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_13() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_1() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_0() {
uint jmp_to = 195u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_5();
} else {
sub_6();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_11();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_15();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_11();
sub_2();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_15();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
case 195u:
sub_1();
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_7();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_8();
}
sub_9();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_10();
sub_4();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_8();
}
sub_9();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_10();
sub_4();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_11();
sub_2();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
reg_tmp12 = uniforms.f[85];
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_7();
reg_tmp12 = uniforms.f[14];
sub_13();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_4();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_14();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_14();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_12();
sub_4();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_10();
sub_4();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_10();
sub_4();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
bool sub_8() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
// reference: BCA0AE3E5C5DE4EC, E7464710A4CE6336
// program: E7464710A4CE6336, 29769686DF99D914, D05B719D4305184C
// shader: 8B30, F09915710862918D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0F7F238A91805677, F09915710862918D
// program: C0A37A266820E6BF, 29769686DF99D914, F09915710862918D
// shader: 8B30, 50357ADC70066BF7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BBCCA4FB4FD775C7, 50357ADC70066BF7
// program: 30F99E8972B94D3F, 29769686DF99D914, 50357ADC70066BF7
// shader: 8B30, 54BED29BD15D0A32
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0F7F238AFA4F90B1, 54BED29BD15D0A32
// program: 05EE57DECD40F85C, 29769686DF99D914, 54BED29BD15D0A32
// reference: C651577885E10C15, A86920E20AB49456
// shader: 8B30, 838395EAEFD6CDB8
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3BA1676E40E390C3, 838395EAEFD6CDB8
// program: 6BE6EA0E5755D38C, 29769686DF99D914, 838395EAEFD6CDB8
// program: 22F5FA64870C6C40, 29769686DF99D914, 9B01691215F57D3D
// shader: 8B30, 248D07A78692C715
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3BA1676ECEDF4968, 248D07A78692C715
// program: 6BE6EA0E5755D38C, 29769686DF99D914, 248D07A78692C715
// reference: 2F73E84685E10C15, 73E3C11F4E37D0B4
// shader: 8B30, C2D44B3F73B6B8A7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 67CD9EF3D0D7ED6C, C2D44B3F73B6B8A7
// program: 6BE6EA0E5755D38C, 29769686DF99D914, C2D44B3F73B6B8A7
// shader: 8B30, 392FEBA5C1AB99B3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F1C2B25963C25FB8, 392FEBA5C1AB99B3
// program: 31B2260282448384, 29769686DF99D914, 392FEBA5C1AB99B3
// shader: 8B30, 12CB7F18C917F497
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C56D9496221E5A48, 12CB7F18C917F497
// program: 4E79D528018181EF, 29769686DF99D914, 12CB7F18C917F497
// shader: 8B30, A8DA0BCAC60B11F1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 78E58A11DCBA974F, A8DA0BCAC60B11F1
// program: 44FCCB013C70839D, 29769686DF99D914, A8DA0BCAC60B11F1
// shader: 8B30, F0AFFC6427AC96AE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[3].position);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D60C5CEC30BB95FB, F0AFFC6427AC96AE
// program: 10A775AB384A36DA, 29769686DF99D914, F0AFFC6427AC96AE
// reference: F1C2B259F3A81FC5, 392FEBA5C1AB99B3
// reference: C56D9496B2741A35, 12CB7F18C917F497
// shader: 8B30, 368620829CA594CC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 78E58A114CD0D732, 368620829CA594CC
// program: 44FCCB013C70839D, 29769686DF99D914, 368620829CA594CC
// shader: 8B30, 8899A461F8E956D9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[3].position);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CF365ABE0C4644BA, 8899A461F8E956D9
// program: 10A775AB384A36DA, 29769686DF99D914, 8899A461F8E956D9
// shader: 8B30, 923E0611E697DAE1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (const_color[5].rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 5E9DF8FCE69B200E, 923E0611E697DAE1
// program: 22F5FA64870C6C40, 29769686DF99D914, 923E0611E697DAE1
// shader: 8B30, 3E2C77DC337D1278
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = (const_color[5].rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 8CFFB6F675D5C6CA, 3E2C77DC337D1278
// program: 0E3E8F6D634C4D20, 29769686DF99D914, 3E2C77DC337D1278
// shader: 8B30, EB4616EF01E0DFB3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (const_color[5].rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 5E9DF8FC76F16073, EB4616EF01E0DFB3
// program: A4FDC8FFB32ECC26, 29769686DF99D914, EB4616EF01E0DFB3
// shader: 8B30, 1E74CF82276079B9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C110F4240147671A, 1E74CF82276079B9
// program: 8D4F286D802428AA, 29769686DF99D914, 1E74CF82276079B9
// shader: 8B30, C691EC8488996749
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 10CFD7032D6AE3B7, C691EC8488996749
// program: 8D4F286D802428AA, 29769686DF99D914, C691EC8488996749
// shader: 8B30, 3395C2F994CEAEEC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2460F1CC467CA1F3, 3395C2F994CEAEEC
// program: 8D4F286D802428AA, 29769686DF99D914, 3395C2F994CEAEEC
// shader: 8B30, E09EE7497E239E28
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C110F4246899403A, E09EE7497E239E28
// program: 8D4F286D802428AA, 29769686DF99D914, E09EE7497E239E28
// program: 55EE328CDEA6D002, 29769686DF99D914, C691EC8488996749
// program: 55EE328CDEA6D002, 29769686DF99D914, 3395C2F994CEAEEC
// program: 55EE328CDEA6D002, 29769686DF99D914, 1E74CF82276079B9
// shader: 8B30, 7F228E7D54F580CC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 355C4BA0DDAD2F32, 7F228E7D54F580CC
// program: 4644B865D3DF1DDB, 29769686DF99D914, 7F228E7D54F580CC
// shader: 8B30, 74065928F9D0096F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 67A5671F303F3193, 74065928F9D0096F
// program: 55EE328CDEA6D002, 29769686DF99D914, 74065928F9D0096F
// shader: 8B30, A3A4BD5F5A1B15C7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 355C4BA0C02BFA24, A3A4BD5F5A1B15C7
// program: 31B2260282448384, 29769686DF99D914, A3A4BD5F5A1B15C7
// program: 8D4F286D802428AA, 29769686DF99D914, 74065928F9D0096F
// shader: 8B30, 2B29695245F47298
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B67A44381C12B53E, 2B29695245F47298
// program: 8D4F286D802428AA, 29769686DF99D914, 2B29695245F47298
// shader: 8B30, E1F75A328F80F887
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3185D47D58F99BBB, E1F75A328F80F887
// program: C0A37A266820E6BF, 29769686DF99D914, E1F75A328F80F887
// shader: 8B30, 0A7468331D8D81B8
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8536530C86AEB80B, 0A7468331D8D81B8
// program: 30F99E8972B94D3F, 29769686DF99D914, 0A7468331D8D81B8
// shader: 8B30, 95FDF997AEB327BE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 27E800CD03E79D77, 95FDF997AEB327BE
// program: 10A775AB384A36DA, 29769686DF99D914, 95FDF997AEB327BE
// shader: 8B30, F5C2017BFE87E3D6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3185D47D33365D7D, F5C2017BFE87E3D6
// program: 05EE57DECD40F85C, 29769686DF99D914, F5C2017BFE87E3D6
// shader: 8B31, 581CD88AA1D9DB78

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_13();
bool sub_8();
bool sub_11();
bool sub_2();
bool sub_7();
bool sub_3();
bool sub_4();
bool sub_6();
bool sub_12();
bool sub_5();
bool sub_9();
bool sub_15();
bool sub_10();
bool sub_14();
bool sub_1();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_13() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_8() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_11() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_2() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_7() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_4() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_6() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_12() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_5() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_9() {
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_15() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_14() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_1() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 237u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_3();
} else {
sub_4();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_6();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_13();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_13();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_14();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_14();
sub_15();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_11();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_1();
}
sub_2();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
case 237u:
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_1();
}
sub_2();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_6();
sub_8();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp12 = uniforms.f[85];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_11();
reg_tmp12 = uniforms.f[14];
sub_10();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_7();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_12();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_9();
sub_7();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_11();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_11();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_5();
sub_7();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3E41E805BE, 581CD88AA1D9DB78
// shader: 8B30, 2399C5A0500BF482
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EC7FC4B77A71121B, 2399C5A0500BF482
// program: 581CD88AA1D9DB78, 29769686DF99D914, 2399C5A0500BF482
// shader: 8B30, 537E3CAEF9615E00
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CBFD0C9EABE43CE2, 537E3CAEF9615E00
// program: 61740D732110F680, 29769686DF99D914, 537E3CAEF9615E00
// shader: 8B30, 5A3D799E914389A8
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2D3413C167367FE, 5A3D799E914389A8
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 5A3D799E914389A8
// shader: 8B30, F00197B6361CBC86
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 01F36D6F7A52796F, F00197B6361CBC86
// program: 4E79D528018181EF, 29769686DF99D914, F00197B6361CBC86
// shader: 8B30, FBED58E1D8A4849E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4F58FD011B6FAFC6, FBED58E1D8A4849E
// program: 44FCCB013C70839D, 29769686DF99D914, FBED58E1D8A4849E
// shader: 8B30, AFD5F4812F45F002
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3185D47DA35C1D00, AFD5F4812F45F002
// program: 22F5FA64870C6C40, 29769686DF99D914, AFD5F4812F45F002
// program: A4FDC8FFB32ECC26, 29769686DF99D914, AFD5F4812F45F002
// shader: 8B30, 7E8C1CB87FA24215
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 995857DF7D0A6340, 7E8C1CB87FA24215
// program: 0E3E8F6D634C4D20, 29769686DF99D914, 7E8C1CB87FA24215
// program: C0A37A266820E6BF, 29769686DF99D914, AFD5F4812F45F002
// program: 05EE57DECD40F85C, 29769686DF99D914, AFD5F4812F45F002
// program: 6867476982CC7DE5, 29769686DF99D914, 7E8C1CB87FA24215
// reference: 01F36D6F4AEA6624, F00197B6361CBC86
// reference: 02CFAE813A0292F6, 7B167AAC5AA8356B
// reference: 355C4BA03B8E7C9F, A3A4BD5F5A1B15C7
// shader: 8DD9, BBF1B27E8659FDAA

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)
layout(points) in;
layout(triangle_strip, max_vertices=30) out;
layout(location=1) out vec4 primary_color;
layout(location=2) out vec2 texcoord0;
layout(location=3) out vec2 texcoord1;
layout(location=4) out vec2 texcoord2;
layout(location=5) out float texcoord0_w;
layout(location=6) out vec4 normquat;
layout(location=7) out vec3 view;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

layout(location=0) in vec4 vs_out_attr0[];
layout(location=1) in vec4 vs_out_attr1[];
layout(location=2) in vec4 vs_out_attr2[];
layout(location=3) in vec4 vs_out_attr3[];
layout(location=4) in vec4 vs_out_attr4[];
layout(location=5) in vec4 vs_out_attr5[];

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms gs_uniforms
layout(binding=3, std140) uniform gs_config {
    pica_uniforms uniforms;
};
struct Vertex {
    vec4 attributes[6];
};

vec4 GetVertexQuaternion(Vertex vtx) {
    return vec4(vtx.attributes[1].x, vtx.attributes[1].y, vtx.attributes[1].z, vtx.attributes[1].w);
}

void EmitVtx(Vertex vtx, bool quats_opposite) {
    vec4 vtx_pos = vec4(vtx.attributes[0].x, vtx.attributes[0].y, vtx.attributes[0].z, vtx.attributes[0].w);
    gl_Position = vtx_pos;
#if !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)
    gl_ClipDistance[0] = -vtx_pos.z;
    gl_ClipDistance[1] = dot(clip_coef, vtx_pos);
#endif // !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)

    vec4 vtx_quat = GetVertexQuaternion(vtx);
    normquat = mix(vtx_quat, -vtx_quat, bvec4(quats_opposite));

    vec4 vtx_color = vec4(vtx.attributes[2].x, vtx.attributes[2].y, vtx.attributes[2].z, vtx.attributes[2].w);
    primary_color = clamp(vtx_color, vec4(0), vec4(1));

    texcoord0 = vec2(vtx.attributes[3].x, vtx.attributes[3].y);
    texcoord1 = vec2(vtx.attributes[5].x, vtx.attributes[5].y);

    texcoord0_w = vtx.attributes[3].w;
    view = vec3(vtx.attributes[4].x, vtx.attributes[4].y, vtx.attributes[4].z);
    texcoord2 = vec2(vtx.attributes[5].z, vtx.attributes[5].w);

    EmitVertex();
}

bool AreQuaternionsOpposite(vec4 qa, vec4 qb) {
    return (dot(qa, qb) < 0.0);
}

void EmitPrim(Vertex vtx0, Vertex vtx1, Vertex vtx2) {
    EmitVtx(vtx0, false);
    EmitVtx(vtx1, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx1)));
    EmitVtx(vtx2, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx2)));
    EndPrimitive();
}

Vertex output_buffer;
Vertex prim_buffer[3];
uint vertex_id = 0u;
bool prim_emit = false;
bool winding = false;
void setemit(uint vertex_id_, bool prim_emit_, bool winding_);
void emit();
void main() {
    output_buffer.attributes[0] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[1] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[2] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[3] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[4] = vec4(0.0, 0.0, 0.0, 1.0);
    output_buffer.attributes[5] = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}

void setemit(uint vertex_id_, bool prim_emit_, bool winding_) {
    vertex_id = vertex_id_;
    prim_emit = prim_emit_;
    winding = winding_;
}
void emit() {
    prim_buffer[vertex_id] = output_buffer;
    if (prim_emit) {
        if (winding) {
            EmitPrim(prim_buffer[1], prim_buffer[0], prim_buffer[2]);
            winding = false;
        } else {
            EmitPrim(prim_buffer[0], prim_buffer[1], prim_buffer[2]);
        }
    }
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_0();
bool sub_1();

bool exec_shader() {
sub_0();
return true;
}

bool sub_0() {
uint jmp_to = 505u;
while (true) {
switch (jmp_to) {
case 505u:
reg_tmp4.x = (uniforms.f[13].xxxx).x;
reg_tmp7.xy = (uniforms.f[28].xyyy).xy;
bool_regs = equal(uniforms.f[95].ww, reg_tmp4.xx);
reg_tmp0.xy = (uniforms.f[31].xyyy).xy;
reg_tmp1 = mul_s(uniforms.f[90].xxxx, reg_tmp7.xyyy);
reg_tmp0.z = rcp_s(uniforms.f[28].x);
reg_tmp0.w = rcp_s(uniforms.f[28].y);
if (bool_regs.x) {
jmp_to = 1336u; break;
}
reg_tmp13 = uniforms.f[10];
reg_tmp14 = uniforms.f[16];
reg_tmp15 = uniforms.f[22];
reg_tmp4.xy = (mul_s(uniforms.f[90].yyyy, reg_tmp13.xzzz)).xy;
reg_tmp5.xy = (mul_s(uniforms.f[90].yyyy, reg_tmp14.xzzz)).xy;
reg_tmp6.xy = (mul_s(uniforms.f[90].yyyy, reg_tmp15.xzzz)).xy;
reg_tmp7.xy = (floor(reg_tmp4.xyyy)).xy;
reg_tmp8.xy = (floor(reg_tmp5.xyyy)).xy;
reg_tmp9.xy = (floor(reg_tmp6.xyyy)).xy;
reg_tmp7.xy = (reg_tmp4.xyyy + -reg_tmp7.xyyy).xy;
reg_tmp8.xy = (reg_tmp5.xyyy + -reg_tmp8.xyyy).xy;
reg_tmp9.xy = (reg_tmp6.xyyy + -reg_tmp9.xyyy).xy;
reg_tmp7.xy = (-uniforms.f[90].xxxx + reg_tmp7.xyyy).xy;
reg_tmp8.xy = (-uniforms.f[90].xxxx + reg_tmp8.xyyy).xy;
reg_tmp9.xy = (-uniforms.f[90].xxxx + reg_tmp9.xyyy).xy;
reg_tmp7.xy = (fma_s(reg_tmp7.xyyy, uniforms.f[31].zwww, reg_tmp0.xyyy)).xy;
reg_tmp8.xy = (fma_s(reg_tmp8.xyyy, uniforms.f[31].zwww, reg_tmp0.xyyy)).xy;
reg_tmp9.xy = (fma_s(reg_tmp9.xyyy, uniforms.f[31].zwww, reg_tmp0.xyyy)).xy;
reg_tmp10.xy = (fma_s(reg_tmp7.xyyy, uniforms.f[32].xxxx, reg_tmp13.xzzz)).xy;
reg_tmp11.xy = (fma_s(reg_tmp8.xyyy, uniforms.f[32].xxxx, reg_tmp14.xzzz)).xy;
reg_tmp12.xy = (fma_s(reg_tmp9.xyyy, uniforms.f[32].xxxx, reg_tmp15.xzzz)).xy;
reg_tmp13.xy = (mul_s(reg_tmp10.xyyy, reg_tmp0.zwww)).xy;
reg_tmp14.xy = (mul_s(reg_tmp11.xyyy, reg_tmp0.zwww)).xy;
reg_tmp15.xy = (mul_s(reg_tmp12.xyyy, reg_tmp0.zwww)).xy;
reg_tmp10.xy = (floor(reg_tmp13.xyyy)).xy;
reg_tmp11.xy = (floor(reg_tmp14.xyyy)).xy;
reg_tmp12.xy = (floor(reg_tmp15.xyyy)).xy;
reg_tmp10.xy = (reg_tmp13.xyyy + -reg_tmp10.xyyy).xy;
reg_tmp11.xy = (reg_tmp14.xyyy + -reg_tmp11.xyyy).xy;
reg_tmp12.xy = (reg_tmp15.xyyy + -reg_tmp12.xyyy).xy;
reg_tmp4.xy = (uniforms.f[95].zzzz + -reg_tmp10.xyyy).xy;
reg_tmp5.xy = (uniforms.f[95].zzzz + -reg_tmp11.xyyy).xy;
reg_tmp6.xy = (uniforms.f[95].zzzz + -reg_tmp12.xyyy).xy;
reg_tmp13.xy = (mul_s(uniforms.f[28].zzzz, reg_tmp10.xyyy)).xy;
reg_tmp14.xy = (mul_s(uniforms.f[28].zzzz, reg_tmp11.xyyy)).xy;
reg_tmp15.xy = (mul_s(uniforms.f[28].zzzz, reg_tmp12.xyyy)).xy;
reg_tmp4.xy = (mul_s(uniforms.f[28].zzzz, reg_tmp4.xyyy)).xy;
reg_tmp5.xy = (mul_s(uniforms.f[28].zzzz, reg_tmp5.xyyy)).xy;
reg_tmp6.xy = (mul_s(uniforms.f[28].zzzz, reg_tmp6.xyyy)).xy;
reg_tmp13.xy = (min_s(reg_tmp4.xyyy, reg_tmp13.xyyy)).xy;
reg_tmp14.xy = (min_s(reg_tmp5.xyyy, reg_tmp14.xyyy)).xy;
reg_tmp15.xy = (min_s(reg_tmp6.xyyy, reg_tmp15.xyyy)).xy;
reg_tmp13.w = (min_s(reg_tmp13.xxxx, reg_tmp13.yyyy)).w;
reg_tmp14.w = (min_s(reg_tmp14.xxxx, reg_tmp14.yyyy)).w;
reg_tmp15.w = (min_s(reg_tmp15.xxxx, reg_tmp15.yyyy)).w;
reg_tmp13.w = (min_s(uniforms.f[13].xxxx, reg_tmp13.wwww)).w;
reg_tmp14.w = (min_s(uniforms.f[19].xxxx, reg_tmp14.wwww)).w;
reg_tmp15.w = (min_s(uniforms.f[25].xxxx, reg_tmp15.wwww)).w;
reg_tmp10.xy = (mul_s(uniforms.f[28].xyyy, reg_tmp10.xyyy)).xy;
reg_tmp11.xy = (mul_s(uniforms.f[28].xyyy, reg_tmp11.xyyy)).xy;
reg_tmp12.xy = (mul_s(uniforms.f[28].xyyy, reg_tmp12.xyyy)).xy;
reg_tmp10.xyz = (reg_tmp10.xyyy + -reg_tmp1.xyyy).xyz;
reg_tmp11.xyz = (reg_tmp11.xyyy + -reg_tmp1.xyyy).xyz;
reg_tmp12.xyz = (reg_tmp12.xyyy + -reg_tmp1.xyyy).xyz;
reg_tmp13.xz = (uniforms.f[10] + reg_tmp10.xyzz).xz;
reg_tmp14.xz = (uniforms.f[16] + reg_tmp11.xyzz).xz;
reg_tmp15.xz = (uniforms.f[22] + reg_tmp12.xyzz).xz;
reg_tmp10.y = (uniforms.f[10]).y;
reg_tmp11.y = (uniforms.f[16]).y;
reg_tmp12.y = (uniforms.f[22]).y;
reg_tmp10.xz = (uniforms.f[30].xyyy + reg_tmp13.xzzz).xz;
reg_tmp10.w = (uniforms.f[95].zzzz).w;
reg_tmp4.w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[3] = uniforms.f[95].wzzz;
output_buffer.attributes[5] = uniforms.f[95].wwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp10);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp10);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp10);
output_buffer.attributes[1] = uniforms.f[11];
output_buffer.attributes[2].w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[4] = uniforms.f[14];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[33].xyzz, reg_tmp13.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, false, false);
emit();
reg_tmp10.xz = (uniforms.f[30].zwww + reg_tmp13.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].zzzz;
output_buffer.attributes[5] = uniforms.f[95].zzzz;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp10);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp10);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp10);
output_buffer.attributes[1] = uniforms.f[11];
output_buffer.attributes[4] = uniforms.f[14];
output_buffer.attributes[2].w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[33].xyzz, reg_tmp13.xxxx)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(1u, false, false);
emit();
reg_tmp10.xz = (uniforms.f[29].xyyy + reg_tmp13.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].wwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp10);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp10);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp10);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(2u, true, false);
emit();
reg_tmp10.xz = (uniforms.f[29].zwww + reg_tmp13.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].zwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp10);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp10);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp10);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, true, true);
emit();
reg_tmp11.xz = (uniforms.f[30].xyyy + reg_tmp14.xzzz).xz;
reg_tmp11.w = (uniforms.f[95].zzzz).w;
reg_tmp4.w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[3] = uniforms.f[95].wzzz;
output_buffer.attributes[5] = uniforms.f[95].wwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp11);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp11);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp11);
output_buffer.attributes[1] = uniforms.f[11];
output_buffer.attributes[2].w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[4] = uniforms.f[14];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[33].xyzz, reg_tmp14.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, false, false);
emit();
reg_tmp11.xz = (uniforms.f[30].zwww + reg_tmp14.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].zzzz;
output_buffer.attributes[5] = uniforms.f[95].zzzz;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp11);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp11);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp11);
output_buffer.attributes[1] = uniforms.f[11];
output_buffer.attributes[4] = uniforms.f[14];
output_buffer.attributes[2].w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[33].xyzz, reg_tmp14.xxxx)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(1u, false, false);
emit();
reg_tmp11.xz = (uniforms.f[29].xyyy + reg_tmp14.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].wwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp11);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp11);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp11);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(2u, true, false);
emit();
reg_tmp11.xz = (uniforms.f[29].zwww + reg_tmp14.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].zwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp11);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp11);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp11);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, true, true);
emit();
reg_tmp12.xz = (uniforms.f[30].xyyy + reg_tmp15.xzzz).xz;
reg_tmp12.w = (uniforms.f[95].zzzz).w;
reg_tmp4.w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[3] = uniforms.f[95].wzzz;
output_buffer.attributes[5] = uniforms.f[95].wwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp12);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp12);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp12);
output_buffer.attributes[1] = uniforms.f[11];
output_buffer.attributes[2].w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[4] = uniforms.f[14];
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[33].xyzz, reg_tmp15.wwww)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, false, false);
emit();
reg_tmp12.xz = (uniforms.f[30].zwww + reg_tmp15.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].zzzz;
output_buffer.attributes[5] = uniforms.f[95].zzzz;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp12);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp12);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp12);
output_buffer.attributes[1] = uniforms.f[11];
output_buffer.attributes[4] = uniforms.f[14];
output_buffer.attributes[2].w = (uniforms.f[95].zzzz).w;
output_buffer.attributes[2].xyz = (mul_s(uniforms.f[33].xyzz, reg_tmp15.xxxx)).xyz;
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(1u, false, false);
emit();
reg_tmp12.xz = (uniforms.f[29].xyyy + reg_tmp15.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].wwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp12);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp12);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp12);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(2u, true, false);
emit();
reg_tmp12.xz = (uniforms.f[29].zwww + reg_tmp15.xzzz).xz;
output_buffer.attributes[3] = uniforms.f[95].zwww;
reg_tmp4.x = dot_s(uniforms.f[4], reg_tmp12);
reg_tmp4.y = dot_s(uniforms.f[5], reg_tmp12);
reg_tmp4.z = dot_s(uniforms.f[6], reg_tmp12);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp4);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp4);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp4);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp4);
setemit(0u, true, true);
emit();
if (uniforms.b[14]) {
jmp_to = 1336u; break;
}
reg_tmp5 = uniforms.f[29];
reg_tmp6 = uniforms.f[30];
reg_tmp7 = uniforms.f[31];
output_buffer.attributes[1] = uniforms.f[95].wwww;
output_buffer.attributes[4] = uniforms.f[95].wwww;
output_buffer.attributes[5] = uniforms.f[95].wwww;
output_buffer.attributes[2].xyz = (uniforms.f[28].xyzz).xyz;
reg_tmp1.w = (uniforms.f[95].zzzz).w;
reg_tmp1.x = dot_s(uniforms.f[4], reg_tmp7);
reg_tmp1.y = dot_s(uniforms.f[5], reg_tmp7);
reg_tmp1.z = dot_s(uniforms.f[6], reg_tmp7);
addr_regs.z = int(uniforms.i[0].y);
for (uint i = 0u; i <= uniforms.i[0].x; addr_regs.z += int(uniforms.i[0].z), ++i) {
sub_1();
}
case 1336u:
return true;
default: return false;
}
}
return false;
}
bool sub_1() {
reg_tmp8 = uniforms.f[31 + addr_regs.z];
reg_tmp0.z = (uniforms.f[95].wwww).z;
reg_tmp4.xy = (uniforms.f[95].zwww).xy;
reg_tmp2.w = (uniforms.f[95].zzzz).w;
reg_tmp2.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp2.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp2.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(1u, false, false);
emit();
output_buffer.attributes[2].xyz = (uniforms.f[28].xyzz).xyz;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(0u, false, false);
emit();
reg_tmp4.xy = (uniforms.f[91].xyyy).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(2u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[91].zwww).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(1u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[92].xyyy).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(2u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[92].zwww).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(1u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[93].xyyy).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(2u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[93].zwww).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(1u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[94].xyyy).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(2u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[94].zwww).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(1u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[95].xyyy).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(2u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp4.xy = (uniforms.f[95].zwww).xy;
reg_tmp0.z = (uniforms.f[90].zzzz + reg_tmp0.zzzz).z;
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, uniforms.f[29 + addr_regs.z], reg_tmp8)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, uniforms.f[30 + addr_regs.z], reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = uniforms.f[30 + addr_regs.z].wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp2).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(uniforms.f[29 + addr_regs.z].wwww, reg_tmp13.xxxx)).w;
setemit(1u, true, false);
emit();
reg_tmp13.xyz = (fma_s(reg_tmp4.xxxx, reg_tmp5, reg_tmp7)).xyz;
reg_tmp15.w = (uniforms.f[95].zzzz).w;
reg_tmp15.xyz = (fma_s(reg_tmp4.yyyy, reg_tmp6, reg_tmp13)).xyz;
reg_tmp3.w = (uniforms.f[95].zzzz).w;
reg_tmp3.x = dot_s(uniforms.f[4], reg_tmp15);
reg_tmp3.y = dot_s(uniforms.f[5], reg_tmp15);
reg_tmp3.z = dot_s(uniforms.f[6], reg_tmp15);
output_buffer.attributes[3] = reg_tmp6.wwww;
output_buffer.attributes[3].x = (-reg_tmp0.zzzz).x;
reg_tmp15.xyz = (reg_tmp3 + -reg_tmp1).xyz;
reg_tmp13.x = dot_3(reg_tmp3.xyz, reg_tmp3.xyz);
reg_tmp14.x = dot_3(reg_tmp15.xyz, reg_tmp15.xyz);
reg_tmp13.x = rsq_s(reg_tmp13.x);
reg_tmp14.x = rsq_s(reg_tmp14.x);
reg_tmp13.xyz = (mul_s(reg_tmp3.xyzz, reg_tmp13.xxxx)).xyz;
reg_tmp14.xyz = (mul_s(reg_tmp15.xyzz, reg_tmp14.xxxx)).xyz;
reg_tmp14.x = dot_3(reg_tmp14.xyz, reg_tmp13.xyz);
output_buffer.attributes[0].x = dot_s(uniforms.f[0], reg_tmp3);
output_buffer.attributes[0].y = dot_s(uniforms.f[1], reg_tmp3);
output_buffer.attributes[0].z = dot_s(uniforms.f[2], reg_tmp3);
output_buffer.attributes[0].w = dot_s(uniforms.f[3], reg_tmp3);
reg_tmp13.x = (abs(reg_tmp14.xxxx)).x;
output_buffer.attributes[2].w = (mul_s(reg_tmp5.wwww, reg_tmp13.xxxx)).w;
setemit(0u, true, true);
emit();
reg_tmp5 = uniforms.f[29 + addr_regs.z];
reg_tmp6 = uniforms.f[30 + addr_regs.z];
reg_tmp7 = reg_tmp8;
reg_tmp1 = reg_tmp2;
return false;
}
// reference: 31E7E3401AC454FA, BBF1B27E8659FDAA
// shader: 8B31, DC9EEA77A1D808F0

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_8();
bool sub_7();
bool sub_6();
bool sub_12();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_15();
bool sub_1();
bool sub_13();
bool sub_10();
bool sub_14();
bool sub_9();
bool sub_11();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_8() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_7() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_12() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_1() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_13() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_10() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_9() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_11() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 440u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_8();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_8();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_9();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_9();
sub_10();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_11();
}
sub_12();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_7();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_6();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_13();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_8();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
case 440u:
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_1();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: FE0C564FE13DDF0B, DC9EEA77A1D808F0
// reference: F000D86E3A0292F6, 810C767C78A3DFB2
// program: DC9EEA77A1D808F0, BBF1B27E8659FDAA, 810C767C78A3DFB2
// shader: 8B30, BF62703FA02F8F92
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: DF7EBC7713744864, BF62703FA02F8F92
// program: E8453D1F80A11555, 29769686DF99D914, BF62703FA02F8F92
// reference: 5F5F92CB76F16073, EB4616EF01E0DFB3
// program: 22F5FA64870C6C40, 29769686DF99D914, EB4616EF01E0DFB3
// reference: 8D3DDCC175D5C6CA, 3E2C77DC337D1278
// shader: 8B30, B095F0314A04E210
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 88AA3EF88CB0C266, B095F0314A04E210
// program: 8D4F286D802428AA, 29769686DF99D914, B095F0314A04E210
// shader: 8B30, 156D5112B8BB8B3F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 59751DDFA09D46CB, 156D5112B8BB8B3F
// program: 8D4F286D802428AA, 29769686DF99D914, 156D5112B8BB8B3F
// shader: 8B30, ED98B0E5851AADB7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6DDA3B10CB8B048F, ED98B0E5851AADB7
// program: 8D4F286D802428AA, 29769686DF99D914, ED98B0E5851AADB7
// program: 55EE328CDEA6D002, 29769686DF99D914, 156D5112B8BB8B3F
// program: 55EE328CDEA6D002, 29769686DF99D914, ED98B0E5851AADB7
// program: 55EE328CDEA6D002, 29769686DF99D914, B095F0314A04E210
// shader: 8B30, 023CCD4B3DAE52AE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 89CED69FBDC894EF, 023CCD4B3DAE52AE
// program: 55EE328CDEA6D002, 29769686DF99D914, 023CCD4B3DAE52AE
// program: 8D4F286D802428AA, 29769686DF99D914, 023CCD4B3DAE52AE
// shader: 8B30, B13D40F61A980241
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5811F5B891E51042, B13D40F61A980241
// program: 8D4F286D802428AA, 29769686DF99D914, B13D40F61A980241
// shader: 8B30, 7CC3F9316B015181
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3185D47DBF09BE1D, 7CC3F9316B015181
// program: C0A37A266820E6BF, 29769686DF99D914, 7CC3F9316B015181
// shader: 8B30, 3F04BFC7B19D876D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CC8C99D00B591D77, 3F04BFC7B19D876D
// program: 30F99E8972B94D3F, 29769686DF99D914, 3F04BFC7B19D876D
// shader: 8B30, CC78B08F6A6009EE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6E52CA118E10380B, CC78B08F6A6009EE
// program: 10A775AB384A36DA, 29769686DF99D914, CC78B08F6A6009EE
// shader: 8B30, AEDA0C6DA3509CF5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3185D47DD4C678DB, AEDA0C6DA3509CF5
// program: 05EE57DECD40F85C, 29769686DF99D914, AEDA0C6DA3509CF5
// shader: 8B30, 51FA6231DD914EFE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 02147537F786B767, 51FA6231DD914EFE
// program: 581CD88AA1D9DB78, 29769686DF99D914, 51FA6231DD914EFE
// shader: 8B30, C55C889AFE139387
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B2D3413CF1834258, C55C889AFE139387
// program: 5A0A3341FE24DBB0, 29769686DF99D914, C55C889AFE139387
// shader: 8B30, 57DF4FBFD37C58FB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4F58FD019541AD40, 57DF4FBFD37C58FB
// program: 44FCCB013C70839D, 29769686DF99D914, 57DF4FBFD37C58FB
// shader: 8B30, 73F9F2AE1D725FD0
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3185D47D44AC38A6, 73F9F2AE1D725FD0
// program: 22F5FA64870C6C40, 29769686DF99D914, 73F9F2AE1D725FD0
// program: A4FDC8FFB32ECC26, 29769686DF99D914, 73F9F2AE1D725FD0
// shader: 8B30, 275BFB9A88E19748
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 995857DF9AFA46E6, 275BFB9A88E19748
// program: 0E3E8F6D634C4D20, 29769686DF99D914, 275BFB9A88E19748
// program: C0A37A266820E6BF, 29769686DF99D914, 73F9F2AE1D725FD0
// program: 05EE57DECD40F85C, 29769686DF99D914, 73F9F2AE1D725FD0
// program: 6867476982CC7DE5, 29769686DF99D914, 275BFB9A88E19748
// reference: 2EB182713A0292F6, 73E3C11F4E37D0B4
// reference: 5F5F92CB4F4D302F, 9B01691215F57D3D
// reference: 8D3DDCC14C699696, B87CD0ED887EF390
// shader: 8B30, D6655FD4568DB901
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5826984E0147671A, D6655FD4568DB901
// program: 8D4F286D802428AA, 29769686DF99D914, D6655FD4568DB901
// shader: 8B30, 4600FCB7475A4822
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 89F9BB692D6AE3B7, 4600FCB7475A4822
// program: 8D4F286D802428AA, 29769686DF99D914, 4600FCB7475A4822
// shader: 8B30, BD47E1E90B87F2F5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BD569DA6467CA1F3, BD47E1E90B87F2F5
// program: 8D4F286D802428AA, 29769686DF99D914, BD47E1E90B87F2F5
// shader: 8B30, 5B2696C4E80D2F43
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5826984E6899403A, 5B2696C4E80D2F43
// program: 8D4F286D802428AA, 29769686DF99D914, 5B2696C4E80D2F43
// program: 55EE328CDEA6D002, 29769686DF99D914, 4600FCB7475A4822
// program: 55EE328CDEA6D002, 29769686DF99D914, BD47E1E90B87F2F5
// program: 55EE328CDEA6D002, 29769686DF99D914, D6655FD4568DB901
// reference: 349E2197DDAD2F32, 7F228E7D54F580CC
// shader: 8B30, 54AA60CD272043B8
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FE930B75303F3193, 54AA60CD272043B8
// program: 55EE328CDEA6D002, 29769686DF99D914, 54AA60CD272043B8
// reference: 349E2197C02BFA24, A3A4BD5F5A1B15C7
// program: 8D4F286D802428AA, 29769686DF99D914, 54AA60CD272043B8
// shader: 8B30, C46C8667D1BD6AE3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2F4C28521C12B53E, C46C8667D1BD6AE3
// program: 8D4F286D802428AA, 29769686DF99D914, C46C8667D1BD6AE3
// shader: 8B30, 6F539D18053EFAF5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A8B3B81758F99BBB, 6F539D18053EFAF5
// program: C0A37A266820E6BF, 29769686DF99D914, 6F539D18053EFAF5
// shader: 8B30, 796DE06C0778CAC8
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1C003F6686AEB80B, 796DE06C0778CAC8
// program: 30F99E8972B94D3F, 29769686DF99D914, 796DE06C0778CAC8
// shader: 8B30, 43B482A4FCB286C5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BEDE6CA703E79D77, 43B482A4FCB286C5
// program: 10A775AB384A36DA, 29769686DF99D914, 43B482A4FCB286C5
// shader: 8B30, 409B2478D741A65A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A8B3B81733365D7D, 409B2478D741A65A
// program: 05EE57DECD40F85C, 29769686DF99D914, 409B2478D741A65A
// shader: 8B30, C15AFA9F62D7DACA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7549A8DD7A71121B, C15AFA9F62D7DACA
// program: 581CD88AA1D9DB78, 29769686DF99D914, C15AFA9F62D7DACA
// reference: CA3F66A9ABE43CE2, 537E3CAEF9615E00
// shader: 8B30, B3A85B09AB4C7F0F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2BE52D56167367FE, B3A85B09AB4C7F0F
// program: 5A0A3341FE24DBB0, 29769686DF99D914, B3A85B09AB4C7F0F
// reference: 003107587A52796F, F00197B6361CBC86
// shader: 8B30, 3CC92DD9C553959C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D66E916B1B6FAFC6, 3CC92DD9C553959C
// program: 44FCCB013C70839D, 29769686DF99D914, 3CC92DD9C553959C
// shader: 8B30, A14CF69AE70596CC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A8B3B817A35C1D00, A14CF69AE70596CC
// program: 22F5FA64870C6C40, 29769686DF99D914, A14CF69AE70596CC
// program: A4FDC8FFB32ECC26, 29769686DF99D914, A14CF69AE70596CC
// shader: 8B30, E52D074729C2DCD5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 006E3BB57D0A6340, E52D074729C2DCD5
// program: 0E3E8F6D634C4D20, 29769686DF99D914, E52D074729C2DCD5
// program: C0A37A266820E6BF, 29769686DF99D914, A14CF69AE70596CC
// program: 05EE57DECD40F85C, 29769686DF99D914, A14CF69AE70596CC
// program: 6867476982CC7DE5, 29769686DF99D914, E52D074729C2DCD5
// reference: 003107584AEA6624, F00197B6361CBC86
// reference: 030DC4B63A0292F6, 7B167AAC5AA8356B
// reference: 349E21973B8E7C9F, A3A4BD5F5A1B15C7
// reference: F1C2B2593A0292F6, 810C767C78A3DFB2
// reference: 2F73E8463A0292F6, 73E3C11F4E37D0B4
// reference: DEBCD64013744864, BF62703FA02F8F92
// shader: 8B30, A12830078085C0DC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5510C9CB38B8FD3B, A12830078085C0DC
// program: 8D4F286D802428AA, 29769686DF99D914, A12830078085C0DC
// program: 55EE328CDEA6D002, 29769686DF99D914, A12830078085C0DC
// shader: 8B30, CF8B0A67FA78BEB1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 85AB028B25ED2F1F, CF8B0A67FA78BEB1
// program: 55EE328CDEA6D002, 29769686DF99D914, CF8B0A67FA78BEB1
// program: 8D4F286D802428AA, 29769686DF99D914, CF8B0A67FA78BEB1
// shader: 8B30, 363DA64C5081E636
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3DE00069B7305E44, 363DA64C5081E636
// program: C0A37A266820E6BF, 29769686DF99D914, 363DA64C5081E636
// shader: 8B30, D5DDD2BBA58B25B6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C0E94DC4B9A5A69B, D5DDD2BBA58B25B6
// program: 30F99E8972B94D3F, 29769686DF99D914, D5DDD2BBA58B25B6
// shader: 8B30, D2C99D833F818DDC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 62371E0557F6FB75, D2C99D833F818DDC
// program: 10A775AB384A36DA, 29769686DF99D914, D2C99D833F818DDC
// shader: 8B30, 76281F870E7F51F6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3DE00069DCFF9882, 76281F870E7F51F6
// program: 05EE57DECD40F85C, 29769686DF99D914, 76281F870E7F51F6
// shader: 8B30, E8861DC261F86A4B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 84CFEAEC14957996, E8861DC261F86A4B
// program: 8D4F286D802428AA, 29769686DF99D914, E8861DC261F86A4B
// shader: 8B30, EDC18790E34BF493
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 61BFEF0453AEBF7F, EDC18790E34BF493
// program: 8D4F286D802428AA, 29769686DF99D914, EDC18790E34BF493
// shader: 8B30, E8C440BD0BE56801
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 84CFEAEC7D4B5EB6, E8C440BD0BE56801
// program: 8D4F286D802428AA, 29769686DF99D914, E8C440BD0BE56801
// program: 55EE328CDEA6D002, 29769686DF99D914, EDC18790E34BF493
// program: 55EE328CDEA6D002, 29769686DF99D914, E8861DC261F86A4B
// shader: 8B30, 2220AA6FAEE09448
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 547421AC09C0ABB2, 2220AA6FAEE09448
// program: 8D4F286D802428AA, 29769686DF99D914, 2220AA6FAEE09448
// shader: 8B30, 6D2E83E8B72EB38F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0E71A1236FA30C97, 6D2E83E8B72EB38F
// program: 581CD88AA1D9DB78, 29769686DF99D914, 6D2E83E8B72EB38F
// shader: 8B30, FF3691A3E3D062D5
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BEB69528727E317B, FF3691A3E3D062D5
// program: 5A0A3341FE24DBB0, 29769686DF99D914, FF3691A3E3D062D5
// shader: 8B30, A31512118457DB2D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 433D29151A386164, A31512118457DB2D
// program: 44FCCB013C70839D, 29769686DF99D914, A31512118457DB2D
// shader: 8B30, 3907ADD326F2E867
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3DE000694C95D8FF, 3907ADD326F2E867
// program: 22F5FA64870C6C40, 29769686DF99D914, 3907ADD326F2E867
// program: A4FDC8FFB32ECC26, 29769686DF99D914, 3907ADD326F2E867
// shader: 8B30, 3BA301219578B122
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 953D83CBD33A5029, 3BA301219578B122
// program: 0E3E8F6D634C4D20, 29769686DF99D914, 3BA301219578B122
// program: C0A37A266820E6BF, 29769686DF99D914, 3907ADD326F2E867
// program: 05EE57DECD40F85C, 29769686DF99D914, 3907ADD326F2E867
// program: 6867476982CC7DE5, 29769686DF99D914, 3BA301219578B122
// shader: 8B30, C5D324A11A957BCA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
depth /= gl_FragCoord.w;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (const_color[5].rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));

uint d = uint(clamp(depth, 0.0, 1.0) * (exp2(24.0) - 1.0));
uint s = uint(last_tex_env_out.g * 255.0);
ivec2 image_coord = ivec2(gl_FragCoord.xy);
uint old = imageLoad(shadow_buffer, image_coord).x;
uint new;
uint old2;
do {
    old2 = old;
    uvec2 ref = DecodeShadow(old);
    if (d < ref.x) {
        if (s == 0u) {
            ref.x = d;
        } else {
            s = uint(float(s) / (shadow_bias_constant + shadow_bias_linear * float(d) / float(ref.x)));
            ref.y = min(s, ref.y);
        }
    }
    new = EncodeShadow(ref);
} while ((old = imageAtomicCompSwap(shadow_buffer, image_coord, old, new)) != old2);
}
// reference: 5E9DF8FC9E921308, C5D324A11A957BCA
// program: 22F5FA64870C6C40, 29769686DF99D914, C5D324A11A957BCA
// program: A4FDC8FFB32ECC26, 29769686DF99D914, C5D324A11A957BCA
// shader: 8B30, 36BCB7AC828E7B19
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CA3F66A9C02BFA24, 36BCB7AC828E7B19
// program: 61740D732110F680, 29769686DF99D914, 36BCB7AC828E7B19
// reference: C65157783A0292F6, A86920E20AB49456
// reference: F1C2B259DC21C15B, 392FEBA5C1AB99B3
// shader: 8B31, B595BAD8D5BE5783

#define mul_s(x, y) mix(x * y, vec4(0), isnan(x * y))
#define fma_s(x, y, z) (mul_s(x, y) + z)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)

#define min_s(x, y) min(x, y)
#define max_s(x, y) max(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout(binding=2, std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location=0) in vec4 vs_in_reg0;
layout(location=1) in vec4 vs_in_reg1;
layout(location=2) in vec4 vs_in_reg2;
layout(location=3) in vec4 vs_in_reg3;
layout(location=4) in vec4 vs_in_reg4;
layout(location=5) in vec4 vs_in_reg5;
layout(location=6) in vec4 vs_in_reg6;
layout(location=7) in vec4 vs_in_reg7;
layout(location=8) in vec4 vs_in_reg8;
layout(location=9) in vec4 vs_in_reg9;
layout(location=10) in vec4 vs_in_reg10;
layout(location=11) in vec4 vs_in_reg11;

layout(location=0) out vec4 vs_out_attr0;
layout(location=1) out vec4 vs_out_attr1;
layout(location=2) out vec4 vs_out_attr2;
layout(location=3) out vec4 vs_out_attr3;
layout(location=4) out vec4 vs_out_attr4;
layout(location=5) out vec4 vs_out_attr5;

void main() {
vs_out_attr0 = vec4(0, 0, 0, 1);
vs_out_attr1 = vec4(0, 0, 0, 1);
vs_out_attr2 = vec4(0, 0, 0, 1);
vs_out_attr3 = vec4(0, 0, 0, 1);
vs_out_attr4 = vec4(0, 0, 0, 1);
vs_out_attr5 = vec4(0, 0, 0, 1);
exec_shader();
}
bvec2 bool_regs = bvec2(false);
ivec3 addr_regs = ivec3(0);
vec4 reg_tmp0 = vec4(0, 0, 0, 1);
vec4 reg_tmp1 = vec4(0, 0, 0, 1);
vec4 reg_tmp2 = vec4(0, 0, 0, 1);
vec4 reg_tmp3 = vec4(0, 0, 0, 1);
vec4 reg_tmp4 = vec4(0, 0, 0, 1);
vec4 reg_tmp5 = vec4(0, 0, 0, 1);
vec4 reg_tmp6 = vec4(0, 0, 0, 1);
vec4 reg_tmp7 = vec4(0, 0, 0, 1);
vec4 reg_tmp8 = vec4(0, 0, 0, 1);
vec4 reg_tmp9 = vec4(0, 0, 0, 1);
vec4 reg_tmp10 = vec4(0, 0, 0, 1);
vec4 reg_tmp11 = vec4(0, 0, 0, 1);
vec4 reg_tmp12 = vec4(0, 0, 0, 1);
vec4 reg_tmp13 = vec4(0, 0, 0, 1);
vec4 reg_tmp14 = vec4(0, 0, 0, 1);
vec4 reg_tmp15 = vec4(0, 0, 0, 1);

bool sub_7();
bool sub_9();
bool sub_6();
bool sub_13();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_2();
bool sub_15();
bool sub_8();
bool sub_1();
bool sub_11();
bool sub_14();
bool sub_10();
bool sub_12();
bool sub_0();

bool exec_shader() {
sub_0();
return true;
}

bool sub_7() {
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_9() {
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
return false;
}
bool sub_6() {
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_13() {
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_3() {
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
return false;
}
bool sub_4() {
vs_out_attr1.z = rcp_s(reg_tmp12.x);
vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
return false;
}
bool sub_5() {
vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
return false;
}
bool sub_2() {
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
return false;
}
bool sub_15() {
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
return false;
}
bool sub_8() {
uint jmp_to = 105u;
while (true) {
switch (jmp_to) {
case 105u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
default: return false;
}
}
return false;
}
bool sub_1() {
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_11() {
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
return false;
}
bool sub_14() {
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
return false;
}
bool sub_10() {
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
return false;
}
bool sub_12() {
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
return false;
}
bool sub_0() {
uint jmp_to = 408u;
while (true) {
switch (jmp_to) {
case 2u:
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
sub_9();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
vs_out_attr4 = -reg_tmp9;
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
bool_regs = equal(-uniforms.f[93].yy, reg_tmp11.zz);
reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
if (!bool_regs.x) {
sub_4();
} else {
sub_5();
}
vs_out_attr1.w = (uniforms.f[93].xxxx).w;
reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
reg_tmp9.w = rcp_s(reg_tmp9.w);
reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.x = (ivec2(reg_tmp12.ww)).x;
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp10.w = (uniforms.f[93].yyyy).w;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
reg_tmp0 = floor(reg_tmp12);
reg_tmp1 = floor(reg_tmp13);
reg_tmp2 = floor(reg_tmp14);
reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
reg_tmp3 = reg_tmp12 + -reg_tmp0;
reg_tmp4 = reg_tmp13 + -reg_tmp1;
reg_tmp5 = reg_tmp14 + -reg_tmp2;
reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
reg_tmp12 = uniforms.f[95].xxxx;
reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
reg_tmp3 = abs(reg_tmp3);
reg_tmp4 = abs(reg_tmp4);
reg_tmp5 = abs(reg_tmp5);
reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
addr_regs.x = (ivec2(reg_tmp8.xx)).x;
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(uniforms.f[10 + addr_regs.x], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11 + addr_regs.x], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12 + addr_regs.x], vs_in_reg0);
reg_tmp7.x = dot_3(uniforms.f[10 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.y = dot_3(uniforms.f[11 + addr_regs.x].xyz, reg_tmp12.xyz);
reg_tmp7.z = dot_3(uniforms.f[12 + addr_regs.x].xyz, reg_tmp12.xyz);
if (uniforms.b[14]) {
jmp_to = 118u; break;
}
sub_2();
reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
case 118u:
reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
reg_tmp9.w = (reg_tmp8.wwww).w;
reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
vs_out_attr4 = -reg_tmp9;
reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
reg_tmp11.w = (uniforms.f[93].xxxx).w;
reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = (reg_tmp11.zzzz).y;
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
reg_tmp13 = min_s(uniforms.f[93].yyyy, reg_tmp13);
reg_tmp13 = max_s(uniforms.f[93].xxxx, reg_tmp13);
reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
vs_out_attr2 = reg_tmp13;
sub_7();
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_9();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (vs_in_reg1).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
sub_7();
reg_tmp0 = vs_in_reg1.xyyy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1 = vs_in_reg0.xyyy;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
if (uniforms.b[14]) {
jmp_to = 493u; break;
}
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
addr_regs.xy = ivec2(reg_tmp8.xy);
reg_tmp13 = mul_s(uniforms.f[10 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp14 = mul_s(uniforms.f[11 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp15 = mul_s(uniforms.f[12 + addr_regs.x], reg_tmp9.xxxx);
reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + addr_regs.y], reg_tmp15);
addr_regs.xy = ivec2(reg_tmp8.zw);
reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + addr_regs.x], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + addr_regs.x], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + addr_regs.x], reg_tmp15);
reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + addr_regs.y], reg_tmp13);
reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + addr_regs.y], reg_tmp14);
reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + addr_regs.y], reg_tmp15);
reg_tmp8.w = (uniforms.f[93].yyyy).w;
reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
sub_10();
sub_9();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_10();
sub_11();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
sub_6();
vs_out_attr3.xyz = (vs_in_reg2).xyz;
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp14 = -uniforms.f[14] + reg_tmp8;
reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
reg_tmp14.x = rsq_s(reg_tmp13.y);
reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
reg_tmp15 = min_s(uniforms.f[93].xxxx, reg_tmp13.zzzz);
reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_12();
}
sub_13();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_8();
sub_3();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 499u; break;
}
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
if (uniforms.b[0]) {
sub_12();
}
sub_13();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
case 246u:
reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
reg_tmp13.y = rsq_s(reg_tmp13.x);
reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = vs_in_reg3.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_8();
sub_3();
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 246u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 266u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_2();
sub_9();
if (uniforms.b[14]) {
jmp_to = 484u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 273u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp12 = uniforms.f[85];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 487u; break;
}
sub_6();
reg_tmp12 = uniforms.f[14];
sub_14();
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
if (uniforms.b[14]) {
jmp_to = 488u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
case 292u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
reg_tmp3 = reg_tmp0 + -reg_tmp8;
reg_tmp14 = max_s(uniforms.f[93].xxxx, reg_tmp7.zzzz);
reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
reg_tmp14 = min_s(uniforms.f[93].yyyy, reg_tmp14);
sub_3();
reg_tmp15.x = rsq_s(reg_tmp15.x);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
reg_tmp4 = max_s(uniforms.f[93].xxxx, reg_tmp4);
reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
reg_tmp4 = min_s(uniforms.f[93].yyyy, reg_tmp4);
vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp12 = uniforms.f[87];
reg_tmp0 = uniforms.f[85];
reg_tmp1 = uniforms.f[86];
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp6 = uniforms.f[88];
reg_tmp7 = uniforms.f[90];
case 332u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
case 333u:
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = reg_tmp6;
reg_tmp9 = reg_tmp7;
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 266u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[91].xxxx;
reg_tmp8 = uniforms.f[87];
reg_tmp9 = uniforms.f[89];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
if (uniforms.b[14]) {
jmp_to = 273u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp6 = uniforms.f[86];
reg_tmp7 = uniforms.f[88];
if (uniforms.b[14]) {
jmp_to = 333u; break;
}
reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
reg_tmp11 = uniforms.f[89].xxxx;
reg_tmp8 = uniforms.f[85];
reg_tmp9 = uniforms.f[87];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[86];
reg_tmp9 = uniforms.f[88];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
reg_tmp15.x = (uniforms.f[93].xxxx).x;
reg_tmp15.y = (uniforms.f[90].xxxx).y;
reg_tmp0 = uniforms.f[91];
reg_tmp1 = uniforms.f[92];
vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
if (uniforms.b[14]) {
jmp_to = 292u; break;
}
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp6 = uniforms.f[89];
reg_tmp7 = uniforms.f[91];
if (uniforms.b[14]) {
jmp_to = 332u; break;
}
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
reg_tmp11 = uniforms.f[92].xxxx;
reg_tmp8 = uniforms.f[88];
reg_tmp9 = uniforms.f[90];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
sub_15();
reg_tmp8 = uniforms.f[89];
reg_tmp9 = uniforms.f[91];
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
sub_15();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
if (uniforms.b[14]) {
jmp_to = 410u; break;
}
case 408u:
reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
case 410u:
reg_tmp8 = vs_in_reg3;
reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
sub_1();
sub_3();
if (uniforms.b[0]) {
jmp_to = 246u; break;
}
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
sub_7();
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
if (uniforms.b[14]) {
jmp_to = 486u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
sub_6();
vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
vs_out_attr0 = vs_in_reg0;
vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
reg_tmp12.x = rcp_s(-reg_tmp9.z);
reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
reg_tmp12.xy = (max_s(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
reg_tmp12.xy = (min_s(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
vs_out_attr3.x = (min_s(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
if (uniforms.b[14]) {
jmp_to = 485u; break;
}
reg_tmp8 = vs_in_reg4.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
reg_tmp0.z = (uniforms.f[93].yyyy).z;
reg_tmp1.z = (uniforms.f[93].yyyy).z;
reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
reg_tmp8 = vs_in_reg4.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_8();
sub_3();
vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
if (uniforms.b[14]) {
jmp_to = 495u; break;
}
sub_6();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
if (uniforms.b[14]) {
jmp_to = 2u; break;
}
reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
sub_8();
sub_3();
vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
vs_out_attr2 = uniforms.f[93].yyyy;
if (uniforms.b[14]) {
jmp_to = 500u; break;
}
vs_out_attr0 = uniforms.f[93].xxxx;
case 484u:
vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
case 485u:
vs_out_attr2 = uniforms.f[93].xxxx;
case 486u:
vs_out_attr4 = uniforms.f[93].xxxx;
case 487u:
vs_out_attr1 = uniforms.f[93].xxxx;
case 488u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 493u:
vs_out_attr4 = uniforms.f[93].xxxx;
vs_out_attr1 = uniforms.f[93].xxxx;
case 495u:
vs_out_attr3.w = (uniforms.f[93].xxxx).w;
vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
return true;
case 499u:
vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
case 500u:
vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
return true;
default: return false;
}
}
return false;
}
// reference: BCA0AE3ED382DEB6, B595BAD8D5BE5783
// shader: 8B30, B2B56B5B47C10DB9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C6464EFCC3CFBE98, B2B56B5B47C10DB9
// program: B595BAD8D5BE5783, 29769686DF99D914, B2B56B5B47C10DB9
// shader: 8B30, 0F665CFB4F537C14
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4CA528A7CAC55E73, 0F665CFB4F537C14
// program: 8D4F286D802428AA, 29769686DF99D914, 0F665CFB4F537C14
// shader: 8B30, CEA445B7CDD05742
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3BCF98BBD7908C57, CEA445B7CDD05742
// program: 8D4F286D802428AA, 29769686DF99D914, CEA445B7CDD05742
// shader: 8B30, D67A565B37FA9BE6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6DEF2BD9BF56267F, D67A565B37FA9BE6
// program: C0A37A266820E6BF, 29769686DF99D914, D67A565B37FA9BE6
// program: 05EE57DECD40F85C, 29769686DF99D914, D67A565B37FA9BE6
// program: 22F5FA64870C6C40, 29769686DF99D914, D67A565B37FA9BE6
// program: A4FDC8FFB32ECC26, 29769686DF99D914, D67A565B37FA9BE6
// shader: 8B30, AD752990CE93685D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C532A87B9AA5DE84, AD752990CE93685D
// program: 0E3E8F6D634C4D20, 29769686DF99D914, AD752990CE93685D
// shader: 8B30, 2275565BCC4314B1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6DEF2BD944F3A0C4, 2275565BCC4314B1
// program: A4FDC8FFB32ECC26, 29769686DF99D914, 2275565BCC4314B1
// shader: 8B30, DED558931E0EA50F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7AD5ADCF8382E9E0, DED558931E0EA50F
// program: C0A37A266820E6BF, 29769686DF99D914, DED558931E0EA50F
// program: 05EE57DECD40F85C, 29769686DF99D914, DED558931E0EA50F
// shader: 8B30, B7103A459EC91962
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 28A002901EFD3A70, B7103A459EC91962
// program: 6867476982CC7DE5, 29769686DF99D914, B7103A459EC91962
// shader: 8B30, 02373063BC9C3D06
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7B82FF69E44820B3, 02373063BC9C3D06
// program: 10A775AB384A36DA, 29769686DF99D914, 02373063BC9C3D06
// reference: C6515778AA68D28B, A86920E20AB49456
// reference: F1C2B2594C4B8126, 392FEBA5C1AB99B3
// reference: F1C2B259AA68D28B, 810C767C78A3DFB2
// shader: 8B30, 130D9D5D842E4065
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: DEBCD640831E0819, 130D9D5D842E4065
// program: E8453D1F80A11555, 29769686DF99D914, 130D9D5D842E4065
// shader: 8B30, 6A918CBF1476D33B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BD7E470297DED89A, 6A918CBF1476D33B
// program: B595BAD8D5BE5783, 29769686DF99D914, 6A918CBF1476D33B
// shader: 8B30, 40E1F9201C0B90CD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 904C5A05DF1740FF, 40E1F9201C0B90CD
// program: 8D4F286D802428AA, 29769686DF99D914, 40E1F9201C0B90CD
// shader: 8B30, CA1D8DEC0AA71F67
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 4.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 40F79145C24292DB, CA1D8DEC0AA71F67
// program: 8D4F286D802428AA, 29769686DF99D914, CA1D8DEC0AA71F67
// shader: 8B30, 66199E478731218D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F8BC93A7509FE380, 66199E478731218D
// program: C0A37A266820E6BF, 29769686DF99D914, 66199E478731218D
// program: 05EE57DECD40F85C, 29769686DF99D914, 66199E478731218D
// program: 22F5FA64870C6C40, 29769686DF99D914, 66199E478731218D
// program: A4FDC8FFB32ECC26, 29769686DF99D914, 66199E478731218D
// shader: 8B30, EFE40507C3C6F789
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 506110053495EDED, EFE40507C3C6F789
// program: 0E3E8F6D634C4D20, 29769686DF99D914, EFE40507C3C6F789
// shader: 8B30, 0AE8234EDBD9F1CF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F8BC93A7AB3A653B, 0AE8234EDBD9F1CF
// program: A4FDC8FFB32ECC26, 29769686DF99D914, 0AE8234EDBD9F1CF
// shader: 8B30, 82D064A588C4F989
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EF8615B16C4B2C1F, 82D064A588C4F989
// program: C0A37A266820E6BF, 29769686DF99D914, 82D064A588C4F989
// program: 05EE57DECD40F85C, 29769686DF99D914, 82D064A588C4F989
// shader: 8B30, 5BD4A7BD4554AEC6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-light_src[1].position - view) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0))) * shadow.rgb;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BDF3BAEEB0CD0919, 5BD4A7BD4554AEC6
// program: 6867476982CC7DE5, 29769686DF99D914, 5BD4A7BD4554AEC6
// shader: 8B30, 95B71E6CBD50E535
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EF993EE556559E63, 95B71E6CBD50E535
// program: C0A37A266820E6BF, 29769686DF99D914, 95B71E6CBD50E535
// shader: 8B30, FF44C13AC4D341EF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4744BD478803E023, FF44C13AC4D341EF
// program: 6867476982CC7DE5, 29769686DF99D914, FF44C13AC4D341EF
// program: 05EE57DECD40F85C, 29769686DF99D914, 95B71E6CBD50E535
// shader: 8B30, 8F3EE5D4CF04BE25
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CED33D9BD86360D4, 8F3EE5D4CF04BE25
// program: 8D4F286D802428AA, 29769686DF99D914, 8F3EE5D4CF04BE25
// shader: 8B30, BB9A19A1536F75AE
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FA7C1B54B3752290, BB9A19A1536F75AE
// program: 8D4F286D802428AA, 29769686DF99D914, BB9A19A1536F75AE
// program: 55EE328CDEA6D002, 29769686DF99D914, 8F3EE5D4CF04BE25
// shader: 8B30, 13EA4E0F5B7A927A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B9B98D87C536B2F0, 13EA4E0F5B7A927A
// program: 55EE328CDEA6D002, 29769686DF99D914, 13EA4E0F5B7A927A
// shader: 8B30, 4DC841CCE776F66B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6866AEA0E91B365D, 4DC841CCE776F66B
// program: 55EE328CDEA6D002, 29769686DF99D914, 4DC841CCE776F66B
// shader: 8B30, 63A3C46E45C8442F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 816CC80E36C63DFB, 63A3C46E45C8442F
// program: B595BAD8D5BE5783, 29769686DF99D914, 63A3C46E45C8442F
// shader: 8B30, D076F3D1713322E2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BDB919DF7F5332D3, D076F3D1713322E2
// program: 6DAC43CE609FCFAE, 29769686DF99D914, D076F3D1713322E2
// shader: 8B30, DACCF93F1A9D07B9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EF993EE5ADF018D8, DACCF93F1A9D07B9
// program: C0A37A266820E6BF, 29769686DF99D914, DACCF93F1A9D07B9
// shader: 8B30, 51B810A79879EABB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5B2AB99473A73B68, 51B810A79879EABB
// program: 30F99E8972B94D3F, 29769686DF99D914, 51B810A79879EABB
// shader: 8B30, 8945822C2257C558
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EF993EE5C63FDE1E, 8945822C2257C558
// program: 05EE57DECD40F85C, 29769686DF99D914, 8945822C2257C558
// shader: 8B30, 58B0F3C0376DD4C0
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 32632E2F8F789178, 58B0F3C0376DD4C0
// program: 581CD88AA1D9DB78, 29769686DF99D914, 58B0F3C0376DD4C0
// shader: 8B30, 0DAEAA0FA200B7E1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1F0C1EBCF44EE479, 0DAEAA0FA200B7E1
// program: 8D4F286D802428AA, 29769686DF99D914, 0DAEAA0FA200B7E1
// shader: 8B30, 4062AAEA36AA7CBD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1F0C1EBC9D90C359, 4062AAEA36AA7CBD
// program: 8D4F286D802428AA, 29769686DF99D914, 4062AAEA36AA7CBD
// program: 55EE328CDEA6D002, 29769686DF99D914, BB9A19A1536F75AE
// program: 55EE328CDEA6D002, 29769686DF99D914, 0DAEAA0FA200B7E1
// program: 8D4F286D802428AA, 29769686DF99D914, 13EA4E0F5B7A927A
// program: 8D4F286D802428AA, 29769686DF99D914, 4DC841CCE776F66B
// shader: 8B30, 8D0C8829204DED17
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F9F4EA55F6EE1E14, 8D0C8829204DED17
// program: 10A775AB384A36DA, 29769686DF99D914, 8D0C8829204DED17
// shader: 8B30, B02084EF3BD73AA6
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;
layout(binding=0, r32ui) uniform uimage2D shadow_buffer;
layout(binding=1, r32ui) uniform readonly uimage2D shadow_texture_px;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

uvec2 DecodeShadow(uint pixel) {
    return uvec2(pixel >> 8, pixel & 255u);
}
uint EncodeShadow(uvec2 pixel) {
    return (pixel.x << 8) | pixel.y;
}
float CompareShadow(uint pixel, uint z) {
    uvec2 p = DecodeShadow(pixel);
    return mix(float(p.y) * (1.0 / 255.0), 0.0, p.x <= z);
}
float SampleShadow2D(ivec2 uv, uint z) {
    if (any(bvec4(lessThan(uv, ivec2(0)), greaterThanEqual(uv, imageSize(shadow_texture_px)))))
        return 1.0;
    return CompareShadow(imageLoad(shadow_texture_px, uv).x, z);
}
float mix2(vec4 s, vec2 a) {
    vec2 t = mix(s.xy, s.zw, a.yy);
    return mix(t.x, t.y, a.x);
}
vec4 shadowTexture(vec2 uv, float w) {
    uv /= w;
    uint z = uint(max(0, int(min(abs(w), 1.0) * (exp2(24.0) - 1.0)) - shadow_texture_bias));
    vec2 coord = vec2(imageSize(shadow_texture_px)) * uv - vec2(0.5);
    vec2 coord_floor = floor(coord);
    vec2 f = coord - coord_floor;
    ivec2 i = ivec2(coord_floor);
    vec4 s = vec4(
        SampleShadow2D(i              , z),
        SampleShadow2D(i + ivec2(1, 0), z),
        SampleShadow2D(i + ivec2(0, 1), z),
        SampleShadow2D(i + ivec2(1, 1), z));
    return vec4(mix2(s, f));
}
void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6CCFABA4E37AE49D, B02084EF3BD73AA6
// program: 5A0A3341FE24DBB0, 29769686DF99D914, B02084EF3BD73AA6
// shader: 8B30, FA4717244F922150
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 91441799EE662CA5, FA4717244F922150
// program: 44FCCB013C70839D, 29769686DF99D914, FA4717244F922150
// reference: 1F0C1EBC953EDAEF, 4062AAEA36AA7CBD
// shader: 8B30, C078FE4DF72BC951
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CED33D9BB9135E42, C078FE4DF72BC951
// program: 8D4F286D802428AA, 29769686DF99D914, C078FE4DF72BC951
// shader: 8B30, CAC1BA8126481A8A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FA7C1B54D2051C06, CAC1BA8126481A8A
// program: 8D4F286D802428AA, 29769686DF99D914, CAC1BA8126481A8A
// program: 55EE328CDEA6D002, 29769686DF99D914, C078FE4DF72BC951
// program: 55EE328CDEA6D002, 29769686DF99D914, CAC1BA8126481A8A
// program: 55EE328CDEA6D002, 29769686DF99D914, 4062AAEA36AA7CBD
// shader: 8B30, 378F1FE724EB1E01
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B9B98D87A4468C66, 378F1FE724EB1E01
// program: 55EE328CDEA6D002, 29769686DF99D914, 378F1FE724EB1E01
// program: 8D4F286D802428AA, 29769686DF99D914, 378F1FE724EB1E01
// shader: 8B30, 1B344FDE7256782A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6866AEA0886B08CB, 1B344FDE7256782A
// program: 8D4F286D802428AA, 29769686DF99D914, 1B344FDE7256782A
// shader: 8B30, D1E7C2C9640EB26F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5B2AB99412D705FE, D1E7C2C9640EB26F
// program: 30F99E8972B94D3F, 29769686DF99D914, D1E7C2C9640EB26F
// shader: 8B30, D75FDC48D2C2FE4C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F9F4EA55979E2082, D75FDC48D2C2FE4C
// program: 10A775AB384A36DA, 29769686DF99D914, D75FDC48D2C2FE4C
// shader: 8B30, A230F8EE3EB9DDE2
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 32632E2FEE08AFEE, A230F8EE3EB9DDE2
// program: 581CD88AA1D9DB78, 29769686DF99D914, A230F8EE3EB9DDE2
// shader: 8B30, 046FD7934DFDCB04
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6CCFABA4820ADA0B, 046FD7934DFDCB04
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 046FD7934DFDCB04
// shader: 8B30, 5A679F461D6C9CDF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EF993EE53725A0F5, 5A679F461D6C9CDF
// program: C0A37A266820E6BF, 29769686DF99D914, 5A679F461D6C9CDF
// shader: 8B30, EA655F5A3A0A7F1A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4744BD47E973DEB5, EA655F5A3A0A7F1A
// program: 6867476982CC7DE5, 29769686DF99D914, EA655F5A3A0A7F1A
// program: 05EE57DECD40F85C, 29769686DF99D914, 5A679F461D6C9CDF
// program: 55EE328CDEA6D002, 29769686DF99D914, 1B344FDE7256782A
// shader: 8B30, E6C7C05050588BEA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 816CC80E57B6036D, E6C7C05050588BEA
// program: B595BAD8D5BE5783, 29769686DF99D914, E6C7C05050588BEA
// shader: 8B30, 5FE37D69CA477FCF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EF993EE5A74FE088, 5FE37D69CA477FCF
// program: 05EE57DECD40F85C, 29769686DF99D914, 5FE37D69CA477FCF
// shader: 8B30, 1BAFDEF36BA18A86
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 76AF528F3725A0F5, 1BAFDEF36BA18A86
// program: C0A37A266820E6BF, 29769686DF99D914, 1BAFDEF36BA18A86
// shader: 8B30, 006689F87DC4C394
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: DE72D12DE973DEB5, 006689F87DC4C394
// program: 6867476982CC7DE5, 29769686DF99D914, 006689F87DC4C394
// program: 05EE57DECD40F85C, 29769686DF99D914, 1BAFDEF36BA18A86
// shader: 8B30, 819FB7746EDA93CA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 57E551F1B9135E42, 819FB7746EDA93CA
// program: 55EE328CDEA6D002, 29769686DF99D914, 819FB7746EDA93CA
// shader: 8B30, BECB5B02F9A84750
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 208FE1EDA4468C66, BECB5B02F9A84750
// program: 55EE328CDEA6D002, 29769686DF99D914, BECB5B02F9A84750
// shader: 8B30, 9413401F64661449
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 185AA46457B6036D, 9413401F64661449
// program: B595BAD8D5BE5783, 29769686DF99D914, 9413401F64661449
// shader: 8B30, C54D0102BF5AEAC7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C21CD5FE12D705FE, C54D0102BF5AEAC7
// program: 30F99E8972B94D3F, 29769686DF99D914, C54D0102BF5AEAC7
// shader: 8B30, CA6DCD2731B67F7C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 76AF528FA74FE088, CA6DCD2731B67F7C
// program: 05EE57DECD40F85C, 29769686DF99D914, CA6DCD2731B67F7C
// shader: 8B30, D398F2A06D1C42B1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 863A72D6953EDAEF, D398F2A06D1C42B1
// program: 8D4F286D802428AA, 29769686DF99D914, D398F2A06D1C42B1
// program: 8D4F286D802428AA, 29769686DF99D914, 819FB7746EDA93CA
// shader: 8B30, 9F9D02C7FB7FEECA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 634A773ED2051C06, 9F9D02C7FB7FEECA
// program: 8D4F286D802428AA, 29769686DF99D914, 9F9D02C7FB7FEECA
// reference: 863A72D69D90C359, D398F2A06D1C42B1
// program: 55EE328CDEA6D002, 29769686DF99D914, 9F9D02C7FB7FEECA
// program: 55EE328CDEA6D002, 29769686DF99D914, D398F2A06D1C42B1
// program: 8D4F286D802428AA, 29769686DF99D914, BECB5B02F9A84750
// shader: 8B30, 480449D5F9CA9BA1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F150C2CA886B08CB, 480449D5F9CA9BA1
// program: 8D4F286D802428AA, 29769686DF99D914, 480449D5F9CA9BA1
// shader: 8B30, 5901A60FB6C847EF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 60C2863F979E2082, 5901A60FB6C847EF
// program: 10A775AB384A36DA, 29769686DF99D914, 5901A60FB6C847EF
// shader: 8B30, 1F02C54EEE01339C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: AB554245EE08AFEE, 1F02C54EEE01339C
// program: 581CD88AA1D9DB78, 29769686DF99D914, 1F02C54EEE01339C
// shader: 8B30, 16C2C65A1AE8404B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F5F9C7CE820ADA0B, 16C2C65A1AE8404B
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 16C2C65A1AE8404B
// shader: 8B30, A4277003DB17A2F4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 08727BF3EE662CA5, A4277003DB17A2F4
// program: 44FCCB013C70839D, 29769686DF99D914, A4277003DB17A2F4
// shader: 8B30, C2B5BCBD93D51877
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F86422B05319CD7D, C2B5BCBD93D51877
// program: C0A37A266820E6BF, 29769686DF99D914, C2B5BCBD93D51877
// shader: 8B30, 183FB95C317F6877
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 50B9A1128D4FB33D, 183FB95C317F6877
// program: 6867476982CC7DE5, 29769686DF99D914, 183FB95C317F6877
// program: 05EE57DECD40F85C, 29769686DF99D914, C2B5BCBD93D51877
// shader: 8B30, D43368B548FD4601
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D92E21CEDD2F33CA, D43368B548FD4601
// program: 55EE328CDEA6D002, 29769686DF99D914, D43368B548FD4601
// shader: 8B30, 86F184FCFAFC9C37
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: AE4491D2C07AE1EE, 86F184FCFAFC9C37
// program: 55EE328CDEA6D002, 29769686DF99D914, 86F184FCFAFC9C37
// shader: 8B30, 02361E85DDB468BD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9691D45B338A6EE5, 02361E85DDB468BD
// program: B595BAD8D5BE5783, 29769686DF99D914, 02361E85DDB468BD
// shader: 8B30, 8FF79740C2A4B286
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4CD7A5C176EB6876, 8FF79740C2A4B286
// program: 30F99E8972B94D3F, 29769686DF99D914, 8FF79740C2A4B286
// shader: 8B30, 1377AF69C9C2ED8D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F86422B0C3738D00, 1377AF69C9C2ED8D
// program: 05EE57DECD40F85C, 29769686DF99D914, 1377AF69C9C2ED8D
// shader: 8B30, C01E9FB3B2153839
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 08F102E9F102B767, C01E9FB3B2153839
// program: 8D4F286D802428AA, 29769686DF99D914, C01E9FB3B2153839
// program: 8D4F286D802428AA, 29769686DF99D914, D43368B548FD4601
// shader: 8B30, D914E09A01EE983D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: ED810701B639718E, D914E09A01EE983D
// program: 8D4F286D802428AA, 29769686DF99D914, D914E09A01EE983D
// reference: 08F102E9F9ACAED1, C01E9FB3B2153839
// program: 55EE328CDEA6D002, 29769686DF99D914, D914E09A01EE983D
// program: 55EE328CDEA6D002, 29769686DF99D914, C01E9FB3B2153839
// program: 8D4F286D802428AA, 29769686DF99D914, 86F184FCFAFC9C37
// shader: 8B30, D694AA1497B176B3
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7F9BB2F5EC576543, D694AA1497B176B3
// program: 8D4F286D802428AA, 29769686DF99D914, D694AA1497B176B3
// shader: 8B30, 37420006992A7697
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EE09F600F3A24D0A, 37420006992A7697
// program: 10A775AB384A36DA, 29769686DF99D914, 37420006992A7697
// shader: 8B30, 8BF889DF87BD1503
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 259E327A8A34C266, 8BF889DF87BD1503
// program: 581CD88AA1D9DB78, 29769686DF99D914, 8BF889DF87BD1503
// shader: 8B30, 418DB087D56A96FB
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7B32B7F1E636B783, 418DB087D56A96FB
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 418DB087D56A96FB
// shader: 8B30, 3980071AD9DC077F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 86B90BCC8A5A412D, 3980071AD9DC077F
// program: 44FCCB013C70839D, 29769686DF99D914, 3980071AD9DC077F
// shader: 8B30, 8A55E5B0F6491475
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F86422B0D599D64D, 8A55E5B0F6491475
// program: C0A37A266820E6BF, 29769686DF99D914, 8A55E5B0F6491475
// shader: 8B30, 25601B0B5405F5C9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 50B9A1120BCFA80D, 25601B0B5405F5C9
// program: 6867476982CC7DE5, 29769686DF99D914, 25601B0B5405F5C9
// program: 05EE57DECD40F85C, 29769686DF99D914, 8A55E5B0F6491475
// shader: 8B30, E401253FC0714404
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9094EB1231A8A820, E401253FC0714404
// program: 55EE328CDEA6D002, 29769686DF99D914, E401253FC0714404
// shader: 8B30, 598160F91DAACA8A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 402F20522CFD7A04, 598160F91DAACA8A
// program: 55EE328CDEA6D002, 29769686DF99D914, 598160F91DAACA8A
// shader: 8B30, 3B27B407390D5B7B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 78FA65DBDF0DF50F, 3B27B407390D5B7B
// program: B595BAD8D5BE5783, 29769686DF99D914, 3B27B407390D5B7B
// shader: 8B30, 4FCF026496D4E17A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 056D6F1D9A6CF39C, 4FCF026496D4E17A
// program: 30F99E8972B94D3F, 29769686DF99D914, 4FCF026496D4E17A
// shader: 8B30, EDF3CAEB5A8255C4
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F86422B045F39630, EDF3CAEB5A8255C4
// program: 05EE57DECD40F85C, 29769686DF99D914, EDF3CAEB5A8255C4
// shader: 8B30, 5B548A36F5D5748A
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 414BC8351D852C8D, 5B548A36F5D5748A
// program: 8D4F286D802428AA, 29769686DF99D914, 5B548A36F5D5748A
// program: 8D4F286D802428AA, 29769686DF99D914, E401253FC0714404
// shader: 8B30, 780A1A23C46BE7E1
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A43BCDDD5ABEEA64, 780A1A23C46BE7E1
// program: 8D4F286D802428AA, 29769686DF99D914, 780A1A23C46BE7E1
// program: 55EE328CDEA6D002, 29769686DF99D914, 780A1A23C46BE7E1
// program: 55EE328CDEA6D002, 29769686DF99D914, 5B548A36F5D5748A
// program: 8D4F286D802428AA, 29769686DF99D914, 598160F91DAACA8A
// shader: 8B30, D98388164F96F497
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 91F0037500D0FEA9, D98388164F96F497
// program: 8D4F286D802428AA, 29769686DF99D914, D98388164F96F497
// shader: 8B30, BAF6A8F7ED9D5E9C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A7B33CDC1F25D6E0, BAF6A8F7ED9D5E9C
// program: 10A775AB384A36DA, 29769686DF99D914, BAF6A8F7ED9D5E9C
// shader: 8B30, 76D7C5BAE07BD62E
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = (vec3(1) - last_tex_env_out.rgb);
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CBF583FA66B3598C, 76D7C5BAE07BD62E
// program: 581CD88AA1D9DB78, 29769686DF99D914, 76D7C5BAE07BD62E
// shader: 8B30, 05F710242FFCBD05
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7B32B7F160B6ACB3, 05F710242FFCBD05
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 05F710242FFCBD05
// shader: 8B30, 0180391365B2CFBA
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 86B90BCC047443AB, 0180391365B2CFBA
// program: 44FCCB013C70839D, 29769686DF99D914, 0180391365B2CFBA
// shader: 8B30, 53DE04777FA7A610
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 61524EDA5319CD7D, 53DE04777FA7A610
// program: C0A37A266820E6BF, 29769686DF99D914, 53DE04777FA7A610
// shader: 8B30, B65CF91E048C9095
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor1.rgb);
float alpha_output_0 = (texcolor1.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1) - (vec3(1) - texcolor2.aaa)), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1)) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = (last_tex_env_out.rgb);
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C98FCD788D4FB33D, B65CF91E048C9095
// program: 6867476982CC7DE5, 29769686DF99D914, B65CF91E048C9095
// program: 05EE57DECD40F85C, 29769686DF99D914, 53DE04777FA7A610
// shader: 8B30, 11CD801B5E8DA1B9
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 40184DA4DD2F33CA, 11CD801B5E8DA1B9
// program: 55EE328CDEA6D002, 29769686DF99D914, 11CD801B5E8DA1B9
// shader: 8B30, 233E8CF99DA7D0DF
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3772FDB8C07AE1EE, 233E8CF99DA7D0DF
// program: 55EE328CDEA6D002, 29769686DF99D914, 233E8CF99DA7D0DF
// shader: 8B30, 0DEB80460E2351CD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((primary_fragment_color.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0FA7B831338A6EE5, 0DEB80460E2351CD
// program: B595BAD8D5BE5783, 29769686DF99D914, 0DEB80460E2351CD
// shader: 8B30, E4239804AE4E725F
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D5E1C9AB76EB6876, E4239804AE4E725F
// program: 30F99E8972B94D3F, 29769686DF99D914, E4239804AE4E725F
// shader: 8B30, 565AE658A88C4500
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 61524EDAC3738D00, 565AE658A88C4500
// program: 05EE57DECD40F85C, 29769686DF99D914, 565AE658A88C4500
// shader: 8B30, 6B59D7BA32DF9DC7
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 91C76E83F102B767, 6B59D7BA32DF9DC7
// program: 8D4F286D802428AA, 29769686DF99D914, 6B59D7BA32DF9DC7
// program: 8D4F286D802428AA, 29769686DF99D914, 11CD801B5E8DA1B9
// shader: 8B30, 8492A235243AE8FD
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (rounded_primary_color.rgb);
float alpha_output_0 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 74B76B6BB639718E, 8492A235243AE8FD
// program: 8D4F286D802428AA, 29769686DF99D914, 8492A235243AE8FD
// reference: 91C76E83F9ACAED1, 6B59D7BA32DF9DC7
// program: 55EE328CDEA6D002, 29769686DF99D914, 8492A235243AE8FD
// program: 55EE328CDEA6D002, 29769686DF99D914, 6B59D7BA32DF9DC7
// program: 8D4F286D802428AA, 29769686DF99D914, 233E8CF99DA7D0DF
// shader: 8B30, 9966A415171C7208
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = (const_color[5].a);
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E6ADDE9FEC576543, 9966A415171C7208
// program: 8D4F286D802428AA, 29769686DF99D914, 9966A415171C7208
// shader: 8B30, 5E59AA69F2422A0B
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1) - (vec3(1) - const_color[5].aaa)), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 773F9A6AF3A24D0A, 5E59AA69F2422A0B
// program: 10A775AB384A36DA, 29769686DF99D914, 5E59AA69F2422A0B
// shader: 8B30, 72FB4EC99D1C0A9C
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(1)) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb) * (vec3(1) - (const_color[2].rgb)), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1)) * (vec3(1) - last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5 * 2.0, alpha_output_5 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BCA85E108A34C266, 72FB4EC99D1C0A9C
// program: 581CD88AA1D9DB78, 29769686DF99D914, 72FB4EC99D1C0A9C
// shader: 8B30, 54251B008045558D
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))) + tex_lod_bias[2]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0), vec3(1)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((vec3(1) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E204DB9BE636B783, 54251B008045558D
// program: 5A0A3341FE24DBB0, 29769686DF99D914, 54251B008045558D
// shader: 8B30, CAE23E266C2E3BBC
layout(location=1) in vec4 primary_color;
layout(location=2) in vec2 texcoord0;
layout(location=3) in vec2 texcoord1;
layout(location=4) in vec2 texcoord2;
layout(location=5) in float texcoord0_w;
layout(location=6) in vec4 normquat;
layout(location=7) in vec3 view;
out vec4 color;

layout(binding=0) uniform sampler2D tex0;
layout(binding=1) uniform sampler2D tex1;
layout(binding=2) uniform sampler2D tex2;
layout(binding=3) uniform samplerBuffer tex_lut_lf;
layout(binding=4) uniform samplerBuffer tex_lut_rg;
layout(binding=5) uniform samplerBuffer tex_lut_rgba;
layout(binding=6) uniform samplerCube tex_cube;

layout(binding=0, std140) uniform shader_data {
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    float alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    float proctex_bias;
    vec3 fog_color;
    vec3 tex_lod_bias;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 clip_coef;
    vec4 tev_combiner_buffer_color;
    vec4 const_color[6];
};

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout(binding=1, std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[6];
    vec3 lighting_global_ambient;
    LightSrc light_src[8];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

vec3 QuaternionRotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(tex_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}
float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}
float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0);
vec4 secondary_fragment_color = vec4(0);
if (gl_FragCoord.x < float(scissor_x1) || gl_FragCoord.y < float(scissor_y1) || gl_FragCoord.x >= float(scissor_x2) || gl_FragCoord.y >= float(scissor_y2)) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))) + tex_lod_bias[0]);
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))) + tex_lod_bias[1]);

vec4 diffuse_sum = vec4(0, 0, 0, 1);
vec4 specular_sum = vec4(0, 0, 0, 1);
vec3 light_vector = vec3(0);
vec3 refl_value = vec3(0);
vec3 spot_dir = vec3(0);
vec3 half_vector = vec3(0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0, 0, 1);
vec3 surface_tangent = vec3(1, 0, 0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = QuaternionRotate(normalized_normquat, surface_normal);
vec3 tangent = QuaternionRotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-light_src[0].position - view) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-light_src[2].position - view) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-light_src[3].position - view) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-light_src[4].position - view) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-light_src[5].position - view) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-light_src[6].position - view) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-light_src[7].position - view) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0), vec4(1));
secondary_fragment_color = clamp(specular_sum, vec4(0), vec4(1));
vec4 combiner_buffer = vec4(0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0), vec3(1)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;
vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0), vec3(1)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
combiner_buffer = next_combiner_buffer;
vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0), vec3(1)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (secondary_fragment_color.ggg), vec3(0), vec3(1)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0), vec4(1));
float fog_index = (1.0 - float(depth)) * 128.0;
float fog_i = clamp(floor(fog_index), 0.0, 127.0);
float fog_f = fog_index - fog_i;
vec2 fog_lut_entry = texelFetch(tex_lut_lf, int(fog_i) + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1F8F67A68A5A412D, CAE23E266C2E3BBC
// program: 44FCCB013C70839D, 29769686DF99D914, CAE23E266C2E3BBC
// reference: 003107582B9A58B2, F00197B6361CBC86
