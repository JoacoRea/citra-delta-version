// shader: 8B31, F252D23AA161429E

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 106u;
    while (true) {
        switch (jmp_to) {
        case 106u: {
            {
                sub_1();
            }
            vs_out_attr3 = uniforms.f[12].yxwz + vs_in_reg1.yxyx;
            vs_out_attr5 = uniforms.f[13].yxwz + vs_in_reg1.yxyx;
            vs_out_attr2 = uniforms.f[80];
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = uniforms.f[13] + vs_in_reg0;
            vs_out_attr2 = mul_s(uniforms.f[12], vs_in_reg3);
            vs_out_attr3 = uniforms.f[17].xyyy + vs_in_reg1.xyyy;
            vs_out_attr5.xy = (uniforms.f[17].zwww + vs_in_reg1.zwww).xy;
            vs_out_attr5.zw = (uniforms.f[18].xyxy + vs_in_reg2.xyxy).zw;
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[16], vs_in_reg0.xyxy);
            reg_tmp12 = uniforms.f[13] + reg_tmp12;
            vs_out_attr2 = uniforms.f[12];
            reg_tmp14 = mul_s(uniforms.f[15], vs_in_reg1);
            reg_tmp13 = uniforms.f[93].yyyy + reg_tmp12.zwww;
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp13);
            reg_tmp14.y = (uniforms.f[14].wwww + reg_tmp14).y;
            reg_tmp13 = mul_s(uniforms.f[14], reg_tmp13);
            vs_out_attr0.xy = (reg_tmp12.xyyy).xy;
            vs_out_attr0.zw = (uniforms.f[93].xxxy).zw;
            vs_out_attr3.xyz = (reg_tmp13 + reg_tmp14).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_1();
            }
            reg_tmp0 = vs_in_reg1.xyyy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1 = vs_in_reg0.xyyy;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp13 = mul_s(uniforms.f[12], vs_in_reg2);
            vs_out_attr3.x = dot_3(uniforms.f[13].xyz, reg_tmp0.xyz);
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[14].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_7();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 494u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 500u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_7();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: E007CBACB163D836, F252D23AA161429E
// shader: 8DD9, 0329B9A5FB0C6ED4

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

out vec4 primary_color;
out vec2 texcoord0;
out vec2 texcoord1;
out vec2 texcoord2;
out float texcoord0_w;
out vec4 normquat;
out vec3 view;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

in vec4 vs_out_attr0[];
in vec4 vs_out_attr1[];
in vec4 vs_out_attr2[];
in vec4 vs_out_attr3[];
in vec4 vs_out_attr4[];
in vec4 vs_out_attr5[];
struct Vertex {
    vec4 attributes[6];
};

vec4 GetVertexQuaternion(Vertex vtx) {
    return vec4(vtx.attributes[1].x, vtx.attributes[1].y, vtx.attributes[1].z, vtx.attributes[1].w);
}

void EmitVtx(Vertex vtx, bool quats_opposite) {
    vec4 vtx_pos = vec4(vtx.attributes[0].x, vtx.attributes[0].y, vtx.attributes[0].z, vtx.attributes[0].w);
    gl_Position = vtx_pos;
#if !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)
    gl_ClipDistance[0] = -vtx_pos.z;
    gl_ClipDistance[1] = dot(clip_coef, vtx_pos);
#endif // !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)

    vec4 vtx_quat = GetVertexQuaternion(vtx);
    normquat = mix(vtx_quat, -vtx_quat, bvec4(quats_opposite));

    vec4 vtx_color = vec4(vtx.attributes[2].x, vtx.attributes[2].y, vtx.attributes[2].z, vtx.attributes[2].w);
    primary_color = min(abs(vtx_color), vec4(1.0));

    texcoord0 = vec2(vtx.attributes[3].x, vtx.attributes[3].y);
    texcoord1 = vec2(vtx.attributes[5].x, vtx.attributes[5].y);

    texcoord0_w = vtx.attributes[3].w;
    view = vec3(vtx.attributes[4].x, vtx.attributes[4].y, vtx.attributes[4].z);
    texcoord2 = vec2(vtx.attributes[5].z, vtx.attributes[5].w);

    EmitVertex();
}

bool AreQuaternionsOpposite(vec4 qa, vec4 qb) {
    return (dot(qa, qb) < 0.0);
}

void EmitPrim(Vertex vtx0, Vertex vtx1, Vertex vtx2) {
    EmitVtx(vtx0, false);
    EmitVtx(vtx1, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx1)));
    EmitVtx(vtx2, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx2)));
    EndPrimitive();
}

void main() {
    Vertex prim_buffer[3];
    prim_buffer[0].attributes = vec4[6](vs_out_attr0[0], vs_out_attr1[0], vs_out_attr2[0], vs_out_attr3[0], vs_out_attr4[0], vs_out_attr5[0]);
    prim_buffer[1].attributes = vec4[6](vs_out_attr0[1], vs_out_attr1[1], vs_out_attr2[1], vs_out_attr3[1], vs_out_attr4[1], vs_out_attr5[1]);
    prim_buffer[2].attributes = vec4[6](vs_out_attr0[2], vs_out_attr1[2], vs_out_attr2[2], vs_out_attr3[2], vs_out_attr4[2], vs_out_attr5[2]);
    EmitPrim(prim_buffer[0], prim_buffer[1], prim_buffer[2]);
}
// reference: A0CB59480533AF6A, 0329B9A5FB0C6ED4
// shader: 8B30, 2A1C838E9B7F527C
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9F999D4A0EF7A266, 2A1C838E9B7F527C
// program: F252D23AA161429E, 0329B9A5FB0C6ED4, 2A1C838E9B7F527C
// reference: AE5334EC3296BE44, F252D23AA161429E
// shader: 8B30, B9B538CDFC8458C0
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb) + (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: BEB80A3142E4567D, B9B538CDFC8458C0
// program: F252D23AA161429E, 0329B9A5FB0C6ED4, B9B538CDFC8458C0
// shader: 8B31, A9B9C968F57E4A8E

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 113u;
    while (true) {
        switch (jmp_to) {
        case 113u: {
            vs_out_attr0 = uniforms.f[13] + vs_in_reg0;
            vs_out_attr2 = mul_s(uniforms.f[12], vs_in_reg3);
            vs_out_attr3 = uniforms.f[17].xyyy + vs_in_reg1.xyyy;
            vs_out_attr5.xy = (uniforms.f[17].zwww + vs_in_reg1.zwww).xy;
            vs_out_attr5.zw = (uniforms.f[18].xyxy + vs_in_reg2.xyxy).zw;
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[16], vs_in_reg0.xyxy);
            reg_tmp12 = uniforms.f[13] + reg_tmp12;
            vs_out_attr2 = uniforms.f[12];
            reg_tmp14 = mul_s(uniforms.f[15], vs_in_reg1);
            reg_tmp13 = uniforms.f[93].yyyy + reg_tmp12.zwww;
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp13);
            reg_tmp14.y = (uniforms.f[14].wwww + reg_tmp14).y;
            reg_tmp13 = mul_s(uniforms.f[14], reg_tmp13);
            vs_out_attr0.xy = (reg_tmp12.xyyy).xy;
            vs_out_attr0.zw = (uniforms.f[93].xxxy).zw;
            vs_out_attr3.xyz = (reg_tmp13 + reg_tmp14).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_1();
            }
            reg_tmp0 = vs_in_reg1.xyyy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1 = vs_in_reg0.xyyy;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp13 = mul_s(uniforms.f[12], vs_in_reg2);
            vs_out_attr3.x = dot_3(uniforms.f[13].xyz, reg_tmp0.xyz);
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[14].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_7();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 494u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 500u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_7();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: E007CBAC154BEABF, A9B9C968F57E4A8E
// shader: 8B30, 30B703594147E54C
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF99B38DD3C, 30B703594147E54C
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 30B703594147E54C
// reference: AE5334EC96BE8CCD, A9B9C968F57E4A8E
// shader: 8B30, D701B6BB7F0387A4
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1DCC05B766B7FB46, D701B6BB7F0387A4
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, D701B6BB7F0387A4
// shader: 8B31, 722E3F3D5CFE9006

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 133u;
    while (true) {
        switch (jmp_to) {
        case 133u: {
            {
                sub_1();
            }
            reg_tmp0 = vs_in_reg1.xyyy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1 = vs_in_reg0.xyyy;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp13 = mul_s(uniforms.f[12], vs_in_reg2);
            vs_out_attr3.x = dot_3(uniforms.f[13].xyz, reg_tmp0.xyz);
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[14].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_7();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 494u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 500u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_7();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC2FE5C8DF, 722E3F3D5CFE9006
// shader: 8B30, BFA3A12DA78151ED
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3BD5A2ED9EE199AC, BFA3A12DA78151ED
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, BFA3A12DA78151ED
// shader: 8B30, 569F0C24FD954D9F
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E689EE199AC, 569F0C24FD954D9F
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 569F0C24FD954D9F
// reference: E007CBACAC10AEAD, 722E3F3D5CFE9006
// shader: 8B31, 7AB1BF347E31E0C3

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_0();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_2();
    } else {
        sub_3();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_6() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_2();
    } else {
        sub_3();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_2() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_3() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_4() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_5();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_5() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_0() {
    uint jmp_to = 417u;
    while (true) {
        switch (jmp_to) {
        case 417u: {
            {
                sub_1();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_4();
            }
            {
                sub_6();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: E007CBAC00A7E766, 7AB1BF347E31E0C3
// shader: 8B30, 18ED98E8550C3774
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 96F061A71B81AF5D, 18ED98E8550C3774
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, 18ED98E8550C3774
// shader: 8B31, CAA6AEF9441DB982

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_15();
bool sub_8();
bool sub_14();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_9();
bool sub_7();
bool sub_1();
bool sub_0();
bool sub_12();
bool sub_10();
bool sub_11();
bool sub_13();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_15() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_8() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_14() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_9() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_7() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_1() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_7();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_0() {
    uint jmp_to = 304u;
    while (true) {
        switch (jmp_to) {
        case 304u: {
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_1();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_1();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_8();
            }
            {
                sub_9();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_10();
            } else {
                sub_11();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_12();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_8();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_13();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_14();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_8();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_8();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_8();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_10();
    } else {
        sub_11();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_10() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_11() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_13() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC120D1659, CAA6AEF9441DB982
// shader: 8B30, 3831DDF9A4BD031A
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 383E5917A077DFCF, 3831DDF9A4BD031A
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 3831DDF9A4BD031A
// shader: 8B31, 79ACC3A8DAEB27B3

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_6();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_0();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_6() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_3() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_5() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_1() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_2();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_2() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_0() {
    uint jmp_to = 432u;
    while (true) {
        switch (jmp_to) {
        case 432u: {
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_1();
            }
            {
                sub_3();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_6();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: AE5334ECD8F110AD, 79ACC3A8DAEB27B3
// shader: 8B30, 10231668C790F1DF
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E500DDE4AFC2C10D, 10231668C790F1DF
// program: 79ACC3A8DAEB27B3, 0329B9A5FB0C6ED4, 10231668C790F1DF
// shader: 8B30, 5B544F9A06791631
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: DC01DEC4AF33E650, 5B544F9A06791631
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 5B544F9A06791631
// shader: 8B30, 0834C1B66373BF0F
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = (const_color[3].rgb);
float alpha_output_3 = (const_color[3].a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((combiner_buffer.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 013F5A37A086F892, 0834C1B66373BF0F
// program: 79ACC3A8DAEB27B3, 0329B9A5FB0C6ED4, 0834C1B66373BF0F
// shader: 8B31, 1EDFC2D1E2736987

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_6();
bool sub_12();
bool sub_17();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_6() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_3() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_5() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_1() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_2();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_2() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 148u;
    while (true) {
        switch (jmp_to) {
        case 148u: {
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_3();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_3();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_3();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_3();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_7();
            }
            {
                sub_3();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_1();
            }
            {
                sub_3();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 494u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 500u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_3();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    {
        sub_7();
    }
    {
        sub_3();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC74465966, 1EDFC2D1E2736987
// shader: 8B30, 9E29F06844BD67BF
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 87752AE8286857DC, 9E29F06844BD67BF
// program: 1EDFC2D1E2736987, 0329B9A5FB0C6ED4, 9E29F06844BD67BF
// reference: E007CBAC91F8702B, CAA6AEF9441DB982
// reference: AE5334EC83528114, 7AB1BF347E31E0C3
// shader: 8B30, CF69098C0AA8B018
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C571F5B61B81AF5D, CF69098C0AA8B018
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, CF69098C0AA8B018
// shader: 8B30, DDEA87770F2ABF60
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D7AD957473ED4C18, DDEA87770F2ABF60
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, DDEA87770F2ABF60
// shader: 8B31, A826CE682F8DE825

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 165u;
    while (true) {
        switch (jmp_to) {
        case 165u: {
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_7();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 500u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_7();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC1D5AC962, A826CE682F8DE825
// shader: 8B30, 0CAEDC5BF25161DD
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA798554C19C, 0CAEDC5BF25161DD
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 0CAEDC5BF25161DD
// shader: 8B30, C7876A55009A95BF
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA7969E32A9F, C7876A55009A95BF
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, C7876A55009A95BF
// shader: 8B30, 1233ED8216C9B597
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C1AD58BD16309078, 1233ED8216C9B597
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 1233ED8216C9B597
// shader: 8B30, 43BAA067EE512AC0
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CC18095B0EF7A266, 43BAA067EE512AC0
// program: F252D23AA161429E, 0329B9A5FB0C6ED4, 43BAA067EE512AC0
// shader: 8B30, 2EF3D9C0A699AE0B
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (const_color[2].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (const_color[2].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb) + (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: ED399E2042E4567D, 2EF3D9C0A699AE0B
// program: F252D23AA161429E, 0329B9A5FB0C6ED4, 2EF3D9C0A699AE0B
// shader: 8B30, F0C931AA023405D5
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = (vec3(1.0) - last_tex_env_out.rgb);
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (const_color[2].a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 96B91E4855436F24, F0C931AA023405D5
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, F0C931AA023405D5
// shader: 8B30, 6D184CC054C13353
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 50B5A3E75AC631EC, 6D184CC054C13353
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 6D184CC054C13353
// shader: 8B31, 7F645D9DB605095C

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_6();
bool sub_12();
bool sub_17();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_6() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_3() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_5() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_1() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_2();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_2() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 177u;
    while (true) {
        switch (jmp_to) {
        case 177u: {
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_3();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_3();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_3();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_3();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_7();
            }
            {
                sub_3();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_1();
            }
            {
                sub_3();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_3();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    {
        sub_7();
    }
    {
        sub_3();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC393C8943, 7F645D9DB605095C
// shader: 8B30, 5372495BFFCA22E7
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A7F51560AC526D5C, 5372495BFFCA22E7
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, 5372495BFFCA22E7
// shader: 8B30, 1DDFBC9CD105730A
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A382C82A152AB604, 1DDFBC9CD105730A
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 1DDFBC9CD105730A
// shader: 8B30, 478661A30F6C5553
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.r) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5CE2A6821F22301D, 478661A30F6C5553
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 478661A30F6C5553
// shader: 8B30, 2B0E89532260502D
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 87752AE804B7BF8C, 2B0E89532260502D
// program: 1EDFC2D1E2736987, 0329B9A5FB0C6ED4, 2B0E89532260502D
// shader: 8B31, DE3CE5859EAAF945

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_16();
bool sub_10();
bool sub_15();
bool sub_5();
bool sub_6();
bool sub_7();
bool sub_2();
bool sub_3();
bool sub_4();
bool sub_9();
bool sub_8();
bool sub_1();
bool sub_0();
bool sub_13();
bool sub_11();
bool sub_12();
bool sub_14();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_16() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_10() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_6();
    } else {
        sub_7();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_15() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_6();
    } else {
        sub_7();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_6();
    } else {
        sub_7();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_6() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_7() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_4() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_8() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_5();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_1() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_4();
    }
    {
        sub_5();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_0() {
    uint jmp_to = 295u;
    while (true) {
        switch (jmp_to) {
        case 295u: {
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_1();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_8();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_8();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_11();
            } else {
                sub_12();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_13();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_13();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_14();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_16();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_10();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_5();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_13() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_11();
    } else {
        sub_12();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_11() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_12() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_14() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC1CD7E6F0, DE3CE5859EAAF945
// shader: 8B30, 3C73E1FF63F37852
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1.0) - (texcolor1.ggg)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 18948A72698A4277, 3C73E1FF63F37852
// program: DE3CE5859EAAF945, 0329B9A5FB0C6ED4, 3C73E1FF63F37852
// shader: 8B30, D00F3FBDAF7E3AC9
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 87752AE83E07A3F4, D00F3FBDAF7E3AC9
// program: 1EDFC2D1E2736987, 0329B9A5FB0C6ED4, D00F3FBDAF7E3AC9
// shader: 8B30, 153960A35F69C8E0
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA797F8CDEB7, 153960A35F69C8E0
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 153960A35F69C8E0
// shader: 8B30, AC59F26520677DCC
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 87752AE89B38DD3C, AC59F26520677DCC
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, AC59F26520677DCC
// shader: 8B30, 4344F385A5FCB15B
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4E4D91A666B7FB46, 4344F385A5FCB15B
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 4344F385A5FCB15B
// shader: 8B30, 02C3A3230DA9A270
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 685436FC9EE199AC, 02C3A3230DA9A270
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 02C3A3230DA9A270
// shader: 8B30, 4420E981EF939FF9
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA799EE199AC, 4420E981EF939FF9
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 4420E981EF939FF9
// shader: 8B30, B0DCFFF3C0FF493B
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68725672AF, B0DCFFF3C0FF493B
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, B0DCFFF3C0FF493B
// shader: 8B30, 8D87FF9710172C72
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = (vec3(1.0) - last_tex_env_out.rgb);
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (const_color[2].a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C5388A5955436F24, 8D87FF9710172C72
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 8D87FF9710172C72
// shader: 8B31, 43AF71EF8975113A

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_16();
bool sub_10();
bool sub_15();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_1();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_0();
bool sub_9();
bool sub_8();
bool sub_13();
bool sub_11();
bool sub_12();
bool sub_14();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_16() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_10() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_15() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_1() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_2();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_2() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_3() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_7() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 223u;
    while (true) {
        switch (jmp_to) {
        case 223u: {
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_3();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_7();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_8();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_8();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_9();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_9();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            {
                sub_3();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_11();
            } else {
                sub_12();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_13();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_13();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_14();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_16();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_10();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_1();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_9() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_7();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_8() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    {
        sub_3();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_13() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_11();
    } else {
        sub_12();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_11() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_12() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_14() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: E007CBACC2020D19, 43AF71EF8975113A
// shader: 8B30, DE59F8025145F004
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 08EDF29AFAA695EB, DE59F8025145F004
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, DE59F8025145F004
// reference: AE5334EC41F76B6B, 43AF71EF8975113A
// shader: 8B31, 1F9FEC434101F9BA

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_16();
bool sub_10();
bool sub_15();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_6();
bool sub_0();
bool sub_9();
bool sub_8();
bool sub_13();
bool sub_11();
bool sub_12();
bool sub_14();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_16() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_10() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_15() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_3() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_5() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_1() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_2();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_2() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_6() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 239u;
    while (true) {
        switch (jmp_to) {
        case 239u: {
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_3();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_3();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_6();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_7();
            }
            {
                sub_3();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_8();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_8();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_9();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_9();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_11();
            } else {
                sub_12();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_13();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_13();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_14();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_16();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_10();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_1();
            }
            {
                sub_3();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_10();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_9() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_3();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_6();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_8() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    {
        sub_7();
    }
    {
        sub_3();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_13() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_11();
    } else {
        sub_12();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_11() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_12() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_14() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC87AF6928, 1F9FEC434101F9BA
// shader: 8B30, 8E9EB08CF0964433
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3DC61B7B4C43A19B, 8E9EB08CF0964433
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, 8E9EB08CF0964433
// shader: 8B30, 76B3240C587CB964
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 08EDF29A9193C73E, 76B3240C587CB964
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 76B3240C587CB964
// shader: 8B30, F5316E7B42A07A99
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3BD5A2EDF5D4CB79, F5316E7B42A07A99
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, F5316E7B42A07A99
// shader: 8B30, 91D4C1F48A22D214
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF9F00D8FE9, 91D4C1F48A22D214
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 91D4C1F48A22D214
// shader: 8B30, 58E49BCAB2D3765C
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1DCC05B70D82A993, 58E49BCAB2D3765C
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 58E49BCAB2D3765C
// shader: 8B30, 64490455A9C76C22
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68F5D4CB79, 64490455A9C76C22
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 64490455A9C76C22
// shader: 8B30, 94A2D2EBE04C061F
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6841F96C8BB01523, 94A2D2EBE04C061F
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 94A2D2EBE04C061F
// shader: 8B30, 6F07583F5B29E8A7
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5D6A108D3D552153, 6F07583F5B29E8A7
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, 6F07583F5B29E8A7
// shader: 8B30, AE32CC2578F6F520
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6841F96CE08547F6, AE32CC2578F6F520
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, AE32CC2578F6F520
// shader: 8B30, E15BC80C1DFAD735
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E681963207A, E15BC80C1DFAD735
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, E15BC80C1DFAD735
// shader: 8B30, 2EFFAC3C037EF206
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E5871A9F7BD079A5, 2EFFAC3C037EF206
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 2EFFAC3C037EF206
// shader: 8B30, ABE5189CDEEA62D2
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D0ACF37ECD354DD5, ABE5189CDEEA62D2
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, ABE5189CDEEA62D2
// shader: 8B30, 2639B42015D2571B
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E5871A9F10E52B70, 2639B42015D2571B
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 2639B42015D2571B
// shader: 8B30, 4DFD4FD1DEB715CC
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B6933CA02B727532, 4DFD4FD1DEB715CC
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 4DFD4FD1DEB715CC
// reference: E007CBAC9EAFAF10, A826CE682F8DE825
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 64490455A9C76C22
// reference: E007CBACBAC9EF31, 7F645D9DB605095C
// shader: 8B30, 06E5792E316D21E0
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F4748171F00D8FE9, 06E5792E316D21E0
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, 06E5792E316D21E0
// shader: 8B30, 7392AB18D3E2CEFC
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 8D450D8EFFCB62AA, 7392AB18D3E2CEFC
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 7392AB18D3E2CEFC
// shader: 8B30, B1BDF0F12DD94AA3
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68A98B29CC, B1BDF0F12DD94AA3
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, B1BDF0F12DD94AA3
// shader: 8B30, BEA687346CAE952D
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F4748171AC526D5C, BEA687346CAE952D
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, BEA687346CAE952D
// shader: 8B30, A3E2F4992CE41760
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68453CC2CF, A3E2F4992CE41760
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, A3E2F4992CE41760
// shader: 8B30, A69D600D515FF39C
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EE1B2FAC4E2340EE, A69D600D515FF39C
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, A69D600D515FF39C
// shader: 8B30, 357A308724C1F19A
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B6933CA0772D9787, 357A308724C1F19A
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 357A308724C1F19A
// shader: 8B30, 65EE0AC9F25FC8F7
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3BD5A2EDA98B29CC, 65EE0AC9F25FC8F7
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 65EE0AC9F25FC8F7
// shader: 8B30, 6CBB771A9DF940D3
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF9AC526D5C, 6CBB771A9DF940D3
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 6CBB771A9DF940D3
// shader: 8B30, D67214E35037883A
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1DCC05B751DD4B26, D67214E35037883A
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, D67214E35037883A
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, B1BDF0F12DD94AA3
// shader: 8B30, 2677FB87F93973E7
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 038E7DB1FFCB62AA, 2677FB87F93973E7
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 2677FB87F93973E7
// shader: 8B30, AB7F0445334581E3
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16, clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19, clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1.0) - (texcolor1.ggg)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4BAF5424CC871131, AB7F0445334581E3
// program: DE3CE5859EAAF945, 0329B9A5FB0C6ED4, AB7F0445334581E3
// shader: 8B30, C35A2E2CF75DE275
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF93E07A3F4, C35A2E2CF75DE275
// program: 1EDFC2D1E2736987, 0329B9A5FB0C6ED4, C35A2E2CF75DE275
// shader: 8B30, 0E7CBE5CC80DFFCF
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E687F8CDEB7, 0E7CBE5CC80DFFCF
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 0E7CBE5CC80DFFCF
// shader: 8B30, 83815F14C40FA2C1
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68933B35B4, 83815F14C40FA2C1
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 83815F14C40FA2C1
// shader: 8B30, 07469F62CD1719F8
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B6933CA04D9D8BFF, 07469F62CD1719F8
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 07469F62CD1719F8
// shader: 8B30, 99CB41CAE2057B62
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3BD5A2ED933B35B4, 99CB41CAE2057B62
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 99CB41CAE2057B62
// shader: 8B30, 3B8888B6CA12E873
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF996E27124, 3B8888B6CA12E873
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 3B8888B6CA12E873
// shader: 8B30, A32122E1B2FE9786
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1DCC05B76B6D575E, A32122E1B2FE9786
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, A32122E1B2FE9786
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 83815F14C40FA2C1
// shader: 8B31, 0C8F005BD3DA3F9F

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_5();
bool sub_6();
bool sub_2();
bool sub_9();
bool sub_3();
bool sub_4();
bool sub_7();
bool sub_8();
bool sub_1();
bool sub_0();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_5() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_6() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_3();
    } else {
        sub_4();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_2() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_3();
    } else {
        sub_4();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_9() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_3();
    } else {
        sub_4();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_3() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_4() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_7() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_8();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_8() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_1() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
bool sub_0() {
    uint jmp_to = 400u;
    while (true) {
        switch (jmp_to) {
        case 400u: {
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_1();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_2();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_5();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_6();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_7();
            }
            {
                sub_9();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_6();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: AE5334ECEA4E1110, 0C8F005BD3DA3F9F
// shader: 8B30, 29E2457DBD271049
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 91CA33AE963E09B8, 29E2457DBD271049
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 29E2457DBD271049
// shader: 8B30, 8EDB6DD0316CD08A
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1588FC1DCE0D59BE, 8EDB6DD0316CD08A
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 8EDB6DD0316CD08A
// shader: 8B30, 8487E8E20BFB15C5
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp(min((texcolor2.rgb) + (last_tex_env_out.aaa), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp(min((texcolor2.a) + (last_tex_env_out.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (const_color[4].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (const_color[4].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (texcolor1.r);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5EF0D5E9C44B4BAE, 8487E8E20BFB15C5
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 8487E8E20BFB15C5
// shader: 8B31, BE8EAE9B1635C70C

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_2();
bool sub_3();
bool sub_0();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_2();
    } else {
        sub_3();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_2() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_3() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 450u;
    while (true) {
        switch (jmp_to) {
        case 450u: {
            {
                sub_1();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: AE5334ECFE2F335B, BE8EAE9B1635C70C
// shader: 8B30, 1B7A7B31C5EE3988
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C19772B4E2CF9AF9, 1B7A7B31C5EE3988
// program: BE8EAE9B1635C70C, 0329B9A5FB0C6ED4, 1B7A7B31C5EE3988
// shader: 8B30, 52FF33C5C4572AA9
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (const_color[3].rgb) + (const_color[3].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[4].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = (combiner_buffer.rgb);
float alpha_output_5 = byteround(clamp((last_tex_env_out.r) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6412DCB7151EB849, 52FF33C5C4572AA9
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, 52FF33C5C4572AA9
// shader: 8B31, C1731AFDEB30446B

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_2();
bool sub_3();
bool sub_0();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_2();
    } else {
        sub_3();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_2() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_3() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 466u;
    while (true) {
        switch (jmp_to) {
        case 466u: {
            {
                sub_1();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: AE5334EC0AC830A5, C1731AFDEB30446B
// shader: 8B30, 6FE1F00CCAAE30C2
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (texcolor1.rgb), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((const_color[1].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3F7A3161B1A9BC5F, 6FE1F00CCAAE30C2
// program: C1731AFDEB30446B, 0329B9A5FB0C6ED4, 6FE1F00CCAAE30C2
// shader: 8B30, 0499F8533C670263
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0E13E2D35AC631EC, 0499F8533C670263
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 0499F8533C670263
// shader: 8B30, 2A34B28BC1A980D1
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7EC669E37ACCF570, 2A34B28BC1A980D1
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 2A34B28BC1A980D1
// reference: E007CBAC045A0F5A, 1F9FEC434101F9BA
// shader: 8B30, 7F69ACF94A0D6390
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = (last_tex_env_out.rgb);
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4377B0252B727532, 7F69ACF94A0D6390
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 7F69ACF94A0D6390
// shader: 8B31, 1FB05932263D976A

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_17();
bool sub_11();
bool sub_16();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_1();
bool sub_2();
bool sub_3();
bool sub_8();
bool sub_0();
bool sub_7();
bool sub_10();
bool sub_9();
bool sub_14();
bool sub_12();
bool sub_13();
bool sub_15();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_17() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_11() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_16() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_1() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_2();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_2() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_3() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_8() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 187u;
    while (true) {
        switch (jmp_to) {
        case 187u: {
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_3();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_7();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_3();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_8();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_9();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_9();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_11();
            }
            {
                sub_3();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_12();
            } else {
                sub_13();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_14();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_14();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_11();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_15();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_16();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_17();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_11();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_1();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_11();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_11();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_7() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_8();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_9() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    {
        sub_3();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_14() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_12();
    } else {
        sub_13();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_12() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_13() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_15() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334ECC6B72A73, 1FB05932263D976A
// shader: 8B30, 8FB162A2C5D5E326
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.r) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((combiner_buffer.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor0.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((texcolor0.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((texcolor2.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1.0) - (texcolor1.ggg)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 282CA6CB83AEF8DC, 8FB162A2C5D5E326
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, 8FB162A2C5D5E326
// shader: 8B30, 6DF6CAF127118D03
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68D61B57B7, 6DF6CAF127118D03
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, 6DF6CAF127118D03
// shader: 8B31, F3F6262BC4F7F65E

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 121u;
    while (true) {
        switch (jmp_to) {
        case 121u: {
            reg_tmp12 = mul_s(uniforms.f[16], vs_in_reg0.xyxy);
            reg_tmp12 = uniforms.f[13] + reg_tmp12;
            vs_out_attr2 = uniforms.f[12];
            reg_tmp14 = mul_s(uniforms.f[15], vs_in_reg1);
            reg_tmp13 = uniforms.f[93].yyyy + reg_tmp12.zwww;
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp13);
            reg_tmp14.y = (uniforms.f[14].wwww + reg_tmp14).y;
            reg_tmp13 = mul_s(uniforms.f[14], reg_tmp13);
            vs_out_attr0.xy = (reg_tmp12.xyyy).xy;
            vs_out_attr0.zw = (uniforms.f[93].xxxy).zw;
            vs_out_attr3.xyz = (reg_tmp13 + reg_tmp14).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_1();
            }
            reg_tmp0 = vs_in_reg1.xyyy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1 = vs_in_reg0.xyyy;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp13 = mul_s(uniforms.f[12], vs_in_reg2);
            vs_out_attr3.x = dot_3(uniforms.f[13].xyz, reg_tmp0.xyz);
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[14].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_7();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 494u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 500u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_7();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334ECECCD0D32, F3F6262BC4F7F65E
// shader: 8B30, 5DA391CFA442A52E
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;

vec3 color_output_1 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb) * (const_color[1].rrr) + (const_color[1].ggg), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a) + (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[2].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_2 = 0.0;
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (const_color[3].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((vec3(1.0) - combiner_buffer.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb) * (vec3(1.0) - (rounded_primary_color.bbb)), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((combiner_buffer.a) * (rounded_primary_color.a) + (last_tex_env_out.a) * (1.0 - (rounded_primary_color.a)), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rrr) + (const_color[5].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (rounded_primary_color.g);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4A6C58B94B836D0B, 5DA391CFA442A52E
// program: F3F6262BC4F7F65E, 0329B9A5FB0C6ED4, 5DA391CFA442A52E
// shader: 8B30, BE9F9A440FD2A848
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (rounded_primary_color.bbb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (const_color[2].a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 1DCC05B7B0200DAC, BE9F9A440FD2A848
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, BE9F9A440FD2A848
// shader: 8B30, C163C26CA35D5745
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FB6475BF11F6CD3E, C163C26CA35D5745
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, C163C26CA35D5745
// shader: 8B31, 1C22995C992A4787

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_4();
bool sub_5();
bool sub_6();
bool sub_2();
bool sub_3();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_5();
    } else {
        sub_6();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_6() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 145u;
    while (true) {
        switch (jmp_to) {
        case 145u: {
            {
                sub_1();
            }
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            if (uniforms.b[14]) {
                { jmp_to = 494u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_4();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_4();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_7();
            }
            {
                sub_4();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_4();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 494u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 500u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_4();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_7();
    }
    {
        sub_4();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC0B8388FE, 1C22995C992A4787
// shader: 8B30, DBAEDF8BAA7C1540
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (const_color[0].rgb);
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF958E85D39, DBAEDF8BAA7C1540
// program: 1C22995C992A4787, 0329B9A5FB0C6ED4, DBAEDF8BAA7C1540
// reference: E007CBAC69BB7762, 0C8F005BD3DA3F9F
// shader: 8B30, 80DB835415F60A4E
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.g) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (combiner_buffer.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (texcolor0.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((const_color[4].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5D6A108D9F3D52B8, 80DB835415F60A4E
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, 80DB835415F60A4E
// shader: 8B30, E308AD295D57D1F8
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17, clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18, clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23, clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((rounded_primary_color.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3 * 2.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6841F96C42ED341D, E308AD295D57D1F8
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, E308AD295D57D1F8
// shader: 8B31, A3A228AE7925C655

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_6();
bool sub_12();
bool sub_17();
bool sub_3();
bool sub_4();
bool sub_5();
bool sub_1();
bool sub_2();
bool sub_7();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_6() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_3() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_4();
    } else {
        sub_5();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_4() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_5() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_1() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_2();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_2() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_7() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 170u;
    while (true) {
        switch (jmp_to) {
        case 170u: {
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = uniforms.f[93].yyyy;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_3();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_7();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_3();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_1();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_3();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_3();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_3();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_1();
            }
            {
                sub_7();
            }
            {
                sub_3();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_7();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_6();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_1();
            }
            {
                sub_3();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_3();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_1();
    }
    {
        sub_7();
    }
    {
        sub_3();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334EC9D14BBCA, A3A228AE7925C655
// shader: 8B30, D6CDF1AE7C48097C
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = (const_color[0].a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0A45E4E68931B8A2, D6CDF1AE7C48097C
// program: A3A228AE7925C655, 0329B9A5FB0C6ED4, D6CDF1AE7C48097C
// shader: 8B31, 678C6FF713B2F8B8

#define mul_s(x, y) (x * y)
#define fma_s(x, y, z) fma(x, y, z)
#define rcp_s(x) (1.0 / x)
#define rsq_s(x) inversesqrt(x)
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};
layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;

out vec4 vs_out_attr0;
out vec4 vs_out_attr1;
out vec4 vs_out_attr2;
out vec4 vs_out_attr3;
out vec4 vs_out_attr4;
out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);
    exec_shader();
}
bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_1();
bool sub_12();
bool sub_17();
bool sub_5();
bool sub_6();
bool sub_7();
bool sub_2();
bool sub_3();
bool sub_4();
bool sub_9();
bool sub_0();
bool sub_8();
bool sub_11();
bool sub_10();
bool sub_15();
bool sub_13();
bool sub_14();
bool sub_16();

bool exec_shader() {
    sub_0();
    return true;
}

bool sub_1() {
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_12() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_6();
    } else {
        sub_7();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_17() {
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    vs_out_attr4 = -reg_tmp9;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_6();
    } else {
        sub_7();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_5() {
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    if (!conditional_code.x) {
        sub_6();
    } else {
        sub_7();
    }
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_6() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_7() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_2() {
    address_registers.x = (ivec2(reg_tmp8.xx)).x;
    reg_tmp8.z = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9 + address_registers.x], vs_in_reg0);
    reg_tmp8.x = dot_s(uniforms.f[8 + address_registers.x], vs_in_reg0);
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    reg_tmp7.z = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp7.x = dot_3(uniforms.f[8 + address_registers.x].xyz, reg_tmp12.xyz);
    reg_tmp9.z = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[6]);
    reg_tmp9.y = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[5]);
    reg_tmp9.x = dot_s(vec4(reg_tmp8.xyz, 1.0), uniforms.f[4]);
    reg_tmp9.w = (uniforms.f[93].yyyy).w;
    reg_tmp12.x = dot_3(reg_tmp7.xyz, reg_tmp7.xyz);
    reg_tmp13.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[3]);
    reg_tmp10.z = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[2]);
    reg_tmp10.y = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[1]);
    reg_tmp10.x = dot_s(vec4(reg_tmp9.xyz, 1.0), uniforms.f[0]);
    reg_tmp13.xy = (mul_s(uniforms.f[93].zyyy, -reg_tmp13.zzzz)).xy;
    reg_tmp12.x = rsq_s(reg_tmp12.x);
    vs_out_attr4 = -reg_tmp9;
    conditional_code.x = reg_tmp10.xxxx.x < reg_tmp13.xyyy.x;
    conditional_code.y = reg_tmp10.xxxx.y > reg_tmp13.xyyy.y;
    reg_tmp10.w = (reg_tmp13.zzzz).w;
    if (all(conditional_code)) {
        sub_3();
    }
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12.xxxx);
    vs_out_attr0 = reg_tmp10;
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_3() {
    reg_tmp10.x = (-reg_tmp13.zzzz).x;
    return false;
}
bool sub_4() {
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_9() {
    reg_tmp15 = max(uniforms.f[93].xxxx, reg_tmp12);
    reg_tmp14 = max(uniforms.f[93].xxxx, -reg_tmp12);
    reg_tmp15 = mul_s(reg_tmp15, reg_tmp15);
    reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
    reg_tmp13.xyz = (mul_s(uniforms.f[88], reg_tmp15.zzzz)).xyz;
    reg_tmp12.xyz = (mul_s(uniforms.f[89], reg_tmp14.zzzz)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.xxxx, uniforms.f[84], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.xxxx, uniforms.f[85], reg_tmp12)).xyz;
    reg_tmp13.xyz = (fma_s(reg_tmp15.yyyy, uniforms.f[86], reg_tmp13)).xyz;
    reg_tmp12.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[87], reg_tmp12)).xyz;
    return false;
}
bool sub_0() {
    uint jmp_to = 184u;
    while (true) {
        switch (jmp_to) {
        case 184u: {
            {
                sub_1();
            }
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[80], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[81], reg_tmp1)).xyz;
            {
                sub_4();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[82], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_5();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            if (uniforms.b[0]) {
                sub_8();
            }
            vs_out_attr5.zw = (fma_s(reg_tmp12.xyxy, reg_tmp13.xzxz, reg_tmp13.ywyw)).zw;
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            {
                sub_4();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            reg_tmp2 = reg_tmp12 + reg_tmp13;
            {
                sub_5();
            }
            reg_tmp3 = -reg_tmp1 + reg_tmp2;
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyxy);
            vs_out_attr2.xyz = (fma_s(reg_tmp3, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp1.xyz = (mul_s(uniforms.f[68], reg_tmp0.xxxx)).xyz;
            {
                sub_2();
            }
            reg_tmp1.xyz = (fma_s(reg_tmp0.yyyy, uniforms.f[69], reg_tmp1)).xyz;
            reg_tmp1.xyz = (fma_s(reg_tmp0.zzzz, uniforms.f[70], reg_tmp1)).xyz;
            {
                sub_5();
            }
            vs_out_attr3 = mul_s(uniforms.f[95].yyyy, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[95].yyyy, vs_in_reg2.xyyy)).xy;
            reg_tmp13 = mul_s(uniforms.f[95].yyyy, vs_in_reg3);
            reg_tmp14 = uniforms.f[71];
            reg_tmp13 = fma_s(reg_tmp13.yxxx, reg_tmp14.yxyx, reg_tmp14.wzwz);
            reg_tmp12 = vec4(rcp_s(reg_tmp10.w));
            reg_tmp12 = mul_s(reg_tmp10, reg_tmp12);
            reg_tmp14 = uniforms.f[72];
            reg_tmp12 = fma_s(reg_tmp12, reg_tmp14.yxyx, reg_tmp14.wzwz);
            vs_out_attr5.zw = (reg_tmp12.xyxy + reg_tmp13.xyxy).zw;
            vs_out_attr2.xyz = (fma_s(-reg_tmp1, reg_tmp0.wwww, reg_tmp1)).xyz;
            vs_out_attr2.w = (reg_tmp0.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_5();
            }
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            {
                sub_5();
            }
            reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
            reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
            reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
            reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            {
                sub_9();
            }
            reg_tmp15 = abs(reg_tmp1);
            reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
            reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
            reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            {
                sub_2();
            }
            {
                sub_4();
            }
            {
                sub_5();
            }
            reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            {
                sub_10();
            }
            vs_out_attr2 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_10();
            }
            reg_tmp2.x = (max(reg_tmp2.xxxx, reg_tmp2.yyyy)).x;
            vs_out_attr2.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12)).xyz;
            vs_out_attr2.w = (max(reg_tmp2.xxxx, reg_tmp2.zzzz)).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            vs_out_attr2.xyz = (mul_s(reg_tmp12, reg_tmp2)).xyz;
            vs_out_attr2.w = (reg_tmp12.wwww).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            {
                sub_11();
            }
            reg_tmp13.xyz = (mul_s(uniforms.f[95].zzzz, reg_tmp12.xyzz)).xyz;
            vs_out_attr2.w = (reg_tmp2.xxxx).w;
            vs_out_attr2.xyz = (fma_s(reg_tmp12.wwww, uniforms.f[83].xyzz, reg_tmp13.xyzz)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            {
                sub_4();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr2 = reg_tmp12 + reg_tmp13;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
            reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
            reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            reg_tmp9.w = (reg_tmp8.wwww).w;
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
            vs_out_attr4 = -reg_tmp9;
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
            reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            reg_tmp0 = abs(reg_tmp0);
            reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
            reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
            if (!conditional_code.x) {
                sub_13();
            } else {
                sub_14();
            }
            reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
            reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
            {
                sub_15();
            }
            reg_tmp15 = mul_s(uniforms.f[94].zzzz, vs_in_reg3);
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr2 = fma_s(reg_tmp0.wwww, uniforms.f[83], reg_tmp15);
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_15();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr2 = mul_s(uniforms.f[83], reg_tmp0.wwww);
            if (uniforms.b[14]) {
                { jmp_to = 490u; break; }
            }
            vs_out_attr0.x = dot_s(uniforms.f[8], vs_in_reg0);
            vs_out_attr0.y = dot_s(uniforms.f[9], vs_in_reg0);
            vs_out_attr0.z = dot_s(uniforms.f[10], vs_in_reg0);
            vs_out_attr0.w = dot_s(uniforms.f[11], vs_in_reg0);
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg1);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg5.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp0 = uniforms.f[13];
            reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
            reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
            reg_tmp12.x = log2(reg_tmp12.x);
            reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
            reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
            reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
            reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
            reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
            reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
            if (uniforms.b[0]) {
                sub_16();
            }
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            {
                sub_17();
            }
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_1();
            }
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[15].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            reg_tmp8.x = (vs_in_reg1.wwww).x;
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            {
                sub_2();
            }
            {
                sub_5();
            }
            reg_tmp0.x = (uniforms.f[83].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[84].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[85].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[86].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[83].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[84].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[85].xyz, reg_tmp1.xyz);
            vs_out_attr5.yzw = vec3(dot_3(uniforms.f[86].xyz, reg_tmp1.xyz));
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg4.xyxy)).zw;
            reg_tmp0.x = (uniforms.f[12].wwww + reg_tmp0.xxxx).x;
            reg_tmp0.y = (uniforms.f[13].wwww + reg_tmp0.yyyy).y;
            reg_tmp1.x = (uniforms.f[14].wwww + reg_tmp1.xxxx).x;
            reg_tmp1.y = (uniforms.f[15].wwww + reg_tmp1.yyyy).y;
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            vs_out_attr3.x = dot_3(uniforms.f[12].xyz, reg_tmp0.xyz);
            vs_out_attr3.yzw = vec3(dot_3(uniforms.f[13].xyz, reg_tmp0.xyz));
            vs_out_attr5.x = dot_3(uniforms.f[14].xyz, reg_tmp1.xyz);
            vs_out_attr5.y = dot_3(uniforms.f[15].xyz, reg_tmp1.xyz);
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            {
                sub_12();
            }
            vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg3);
            vs_out_attr2 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 504u; break; }
            }
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr1 = vs_in_reg1;
            vs_out_attr2 = uniforms.f[93].yyyy;
            vs_out_attr4 = uniforms.f[93].xxxx;
            if (uniforms.b[14]) {
                { jmp_to = 496u; break; }
            }
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            vs_out_attr0 = vs_in_reg0;
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            reg_tmp13.x = (-uniforms.f[13].yyyy + -reg_tmp9.zzzz).x;
            reg_tmp12.x = (uniforms.f[93].yyyy + -reg_tmp13.xxxx).x;
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            vs_out_attr3.x = (reg_tmp12.xxxx).x;
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            vs_out_attr0 = uniforms.f[93].xxxx;
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 487u: {
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 488u: {
            vs_out_attr4 = uniforms.f[93].xxxx;
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 490u: {
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 496u: {
            vs_out_attr3 = uniforms.f[93].xxxx;
            vs_out_attr5 = uniforms.f[93].xxxx;
            return true;
        }
        case 504u: {
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_8() {
    reg_tmp15.x = (uniforms.f[4].wwww).x;
    reg_tmp14.y = (uniforms.f[5].wwww).y;
    reg_tmp13.z = (uniforms.f[6].wwww).z;
    reg_tmp6.xyz = (mul_s(uniforms.f[4].xyzz, reg_tmp15.xxxx)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp14.yyyy, uniforms.f[5].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp6.xyz = (fma_s(reg_tmp13.zzzz, uniforms.f[6].xyzz, reg_tmp6.xyzz)).xyz;
    reg_tmp12 = reg_tmp8 + reg_tmp6;
    reg_tmp13.x = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp13.y = rsq_s(reg_tmp13.x);
    reg_tmp4 = mul_s(reg_tmp12, -reg_tmp13.yyyy);
    reg_tmp14.x = dot_3(reg_tmp4.xyz, reg_tmp7.xyz);
    reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
    reg_tmp5 = fma_s(reg_tmp14.yyyy, reg_tmp7, -reg_tmp4);
    reg_tmp12.xyz = (uniforms.f[93].xxyy + reg_tmp5.xyzz).xyz;
    reg_tmp12.w = dot_3(reg_tmp12.xyz, reg_tmp12.xyz);
    reg_tmp14.z = rsq_s(reg_tmp12.w);
    reg_tmp12.xy = (mul_s(reg_tmp5.xyzz, reg_tmp14.zzzz)).xy;
    reg_tmp13 = uniforms.f[83];
    return false;
}
bool sub_11() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    reg_tmp13 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    {
        sub_5();
    }
    reg_tmp13 = vec4(rsq_s(reg_tmp13.x));
    reg_tmp12.x = dot_3(uniforms.f[90].xyz, reg_tmp7.xyz);
    reg_tmp12.y = dot_3(uniforms.f[91].xyz, reg_tmp7.xyz);
    reg_tmp12.z = dot_3(uniforms.f[92].xyz, reg_tmp7.xyz);
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp13);
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    reg_tmp1 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    {
        sub_9();
    }
    reg_tmp15 = abs(reg_tmp1);
    reg_tmp14.w = (mul_s(uniforms.f[82].wwww, reg_tmp15.wwww)).w;
    reg_tmp14.w = (min(uniforms.f[93].yyyy, reg_tmp14.wwww)).w;
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    reg_tmp12.w = (uniforms.f[93].yyyy + -reg_tmp14.wwww).w;
    reg_tmp12.w = (mul_s(uniforms.f[83].wwww, reg_tmp12.wwww)).w;
    return false;
}
bool sub_10() {
    reg_tmp8.x = (vs_in_reg1.wwww).x;
    reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
    {
        sub_2();
    }
    {
        sub_4();
    }
    {
        sub_5();
    }
    reg_tmp12.xyz = (reg_tmp12.xyzz + reg_tmp13.xyzz).xyz;
    vs_out_attr3 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2);
    return false;
}
bool sub_15() {
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    reg_tmp8.x = dot_s(uniforms.f[8], vs_in_reg0);
    reg_tmp8.y = dot_s(uniforms.f[9], vs_in_reg0);
    reg_tmp8.z = dot_s(uniforms.f[10], vs_in_reg0);
    reg_tmp8.w = dot_s(uniforms.f[11], vs_in_reg0);
    reg_tmp7.x = dot_3(uniforms.f[8].xyz, reg_tmp12.xyz);
    reg_tmp7.y = dot_3(uniforms.f[9].xyz, reg_tmp12.xyz);
    reg_tmp7.z = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    reg_tmp9.w = (reg_tmp8.wwww).w;
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    reg_tmp0 = vec4(dot_3(reg_tmp9.xyz, reg_tmp9.xyz));
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    reg_tmp0 = vec4(rsq_s(reg_tmp0.x));
    vs_out_attr4 = -reg_tmp9;
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    reg_tmp0 = mul_s(reg_tmp9, reg_tmp0);
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    reg_tmp0 = vec4(dot_3(reg_tmp0.xyz, reg_tmp11.xyz));
    reg_tmp14 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    reg_tmp15 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
    reg_tmp0 = abs(reg_tmp0);
    reg_tmp14 = vec4(rsq_s(reg_tmp14.x));
    reg_tmp0.w = (mul_s(uniforms.f[82].wwww, reg_tmp0.wwww)).w;
    if (!conditional_code.x) {
        sub_13();
    } else {
        sub_14();
    }
    reg_tmp0.w = (min(uniforms.f[93].yyyy, reg_tmp0.wwww)).w;
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    reg_tmp0.w = (uniforms.f[93].yyyy + -reg_tmp0.wwww).w;
    reg_tmp0.w = (mul_s(uniforms.f[83].wwww, reg_tmp0.wwww)).w;
    return false;
}
bool sub_13() {
    vs_out_attr1.z = rcp_s(reg_tmp14.x);
    vs_out_attr1.xy = (mul_s(reg_tmp15, reg_tmp14)).xy;
    return false;
}
bool sub_14() {
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_16() {
    reg_tmp0 = uniforms.f[13];
    reg_tmp12.xy = (fma_s(vs_in_reg3.wwww, uniforms.f[12].xyyy, reg_tmp0.xyyy)).xy;
    reg_tmp12.x = (max(uniforms.f[94].wwww, reg_tmp12.xxxx)).x;
    reg_tmp12.x = log2(reg_tmp12.x);
    reg_tmp12.x = (fma_s(reg_tmp12.xxxx, uniforms.f[12].zzzz, reg_tmp0.zzzz)).x;
    reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
    reg_tmp12.y = (min(uniforms.f[93].yyyy, reg_tmp12.yyyy)).y;
    reg_tmp8.z = (fma_s(reg_tmp12.xxxx, reg_tmp12.yyyy, reg_tmp8.zzzz)).z;
    return false;
}
// reference: AE5334ECEC0B9AFB, 678C6FF713B2F8B8
// shader: 8B30, 50DD3316033017BC
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA79808D850C, 50DD3316033017BC
// program: 678C6FF713B2F8B8, 0329B9A5FB0C6ED4, 50DD3316033017BC
// shader: 8B30, 6967F29412FA7F5F
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E11FB89EB634CD24, 6967F29412FA7F5F
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 6967F29412FA7F5F
// shader: 8B30, 44B601F4149BC4B3
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA79AABF3B50, 44B601F4149BC4B3
// program: 678C6FF713B2F8B8, 0329B9A5FB0C6ED4, 44B601F4149BC4B3
// shader: 8B30, 06C1101CB68E3078
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.r) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((combiner_buffer.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor0.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((texcolor0.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((texcolor2.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1.0) - (texcolor1.ggg)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A83DC7FA6F5C0414, 06C1101CB68E3078
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, 06C1101CB68E3078
// shader: 8B30, 7CF5079E46C93668
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((last_tex_env_out.rgb) + (last_tex_env_out.aaa), vec3(1.0)) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp(min((last_tex_env_out.a) + (last_tex_env_out.a), 1.0) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((const_color[4].rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D99EFA32F235B561, 7CF5079E46C93668
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 7CF5079E46C93668
// shader: 8B30, 8F88D55C6878AD2E
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FB6475BFFD41263D, 8F88D55C6878AD2E
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 8F88D55C6878AD2E
// shader: 8B30, 801A5741487D50B6
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F0035C3B497554B1, 801A5741487D50B6
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 801A5741487D50B6
// shader: 8B30, 2555A909CA63A120
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 922CCCAC66B09A9D, 2555A909CA63A120
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 2555A909CA63A120
// shader: 8B30, BD5BA6ADBE31C77F
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 4.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A382C82A39F55E54, BD5BA6ADBE31C77F
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, BD5BA6ADBE31C77F
// shader: 8B30, 0FCF5EAE4BB50324
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) - (1.0 - rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = (last_tex_env_out.rgb);
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = (last_tex_env_out.rgb);
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 1.0, alpha_output_4 * 2.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A8E5E1AE6176C7DB, 0FCF5EAE4BB50324
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 0FCF5EAE4BB50324
// shader: 8B30, 0BBECABDDCB43404
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (texcolor1.rgb), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((const_color[1].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3F7A31619B9B0203, 0BBECABDDCB43404
// program: C1731AFDEB30446B, 0329B9A5FB0C6ED4, 0BBECABDDCB43404
// shader: 8B30, ECBF2CCAE86AF206
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A7F51560F00D8FE9, ECBF2CCAE86AF206
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, ECBF2CCAE86AF206
// shader: 8B30, 6B6FD0A4EF2C8950
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (const_color[4].a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E11FB89E18E43F08, 6B6FD0A4EF2C8950
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 6B6FD0A4EF2C8950
// shader: 8B30, 56E60111D5B99C68
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0 * 2.0, alpha_output_0 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (const_color[1].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor2.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((texcolor2.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2 * 2.0, alpha_output_2 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (combiner_buffer.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((primary_fragment_color.a) * (combiner_buffer.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((secondary_fragment_color.a) * (texcolor1.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a) * (const_color[5].a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 91CA33AE38EEFB94, 56E60111D5B99C68
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 56E60111D5B99C68
// shader: 8B30, 7E051B3EBEA161E9
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA79AF667FC0, 7E051B3EBEA161E9
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 7E051B3EBEA161E9
// shader: 8B30, 8A4EDFE20169EEA8
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA7943D194C3, 8A4EDFE20169EEA8
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 8A4EDFE20169EEA8
// shader: 8B30, 736BE176AEAA5498
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A7F51560AABF3B50, 736BE176AEAA5498
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, 736BE176AEAA5498
// shader: 8B30, BC2BB876B12CD771
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((last_tex_env_out.rgb) + (last_tex_env_out.aaa), vec3(1.0)) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp(min((last_tex_env_out.a) + (last_tex_env_out.a), 1.0) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((const_color[4].rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D99EFA325CE5474D, BC2BB876B12CD771
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, BC2BB876B12CD771
// shader: 8B30, 2CD20E96CC5EC438
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA79A98B29CC, 2CD20E96CC5EC438
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 2CD20E96CC5EC438
// shader: 8B30, 5C13658DEBD38E3D
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9DB0BA79453CC2CF, 5C13658DEBD38E3D
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 5C13658DEBD38E3D
// shader: 8B30, B250560446EC50E2
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((primary_fragment_color.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp(min((secondary_fragment_color.r) + (secondary_fragment_color.g), 1.0) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((rounded_primary_color.aaa) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.r) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((combiner_buffer.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor0.rgb) * (last_tex_env_out.aaa) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((texcolor0.a) * (last_tex_env_out.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((rounded_primary_color.rgb) * (texcolor0.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((rounded_primary_color.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4 * 2.0, alpha_output_4 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((texcolor2.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1.0) - (texcolor1.ggg)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A83DC7FAC18CF638, B250560446EC50E2
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, B250560446EC50E2
// shader: 8B30, 776CE0B39210F718
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) + (const_color[5].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5F95D310FDA77672, 776CE0B39210F718
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, 776CE0B39210F718
// shader: 8B30, 404F2B382DCAEC7C
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (const_color[1].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (const_color[1].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (const_color[3].rgb) + (const_color[3].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[4].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_4 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = (combiner_buffer.rgb);
float alpha_output_5 = byteround(clamp((last_tex_env_out.r) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 76CEBC757D725B0C, 404F2B382DCAEC7C
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, 404F2B382DCAEC7C
// shader: 8B30, 29FEAB2C700882A4
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C1AD58BD3AEF7828, 29FEAB2C700882A4
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 29FEAB2C700882A4
// shader: 8B30, 43274B8601691EC0
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb) + (const_color[0].aaa), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a) + (const_color[0].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp(vec3(dot((last_tex_env_out.rgb) - vec3(0.5), (const_color[1].rgb) - vec3(0.5)) * 4.0), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (texcolor0.a);
last_tex_env_out = vec4(color_output_1, alpha_output_1);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C1AD58BD3C022E24, 43274B8601691EC0
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 43274B8601691EC0
// shader: 8B30, DAC68937AC730750
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = (texcolor0.rgb);
float alpha_output_0 = (texcolor0.a);
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((primary_fragment_color.rgb) + (texcolor1.rgb), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((const_color[1].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3F7A31619D76540F, DAC68937AC730750
// program: C1731AFDEB30446B, 0329B9A5FB0C6ED4, DAC68937AC730750
// shader: 8B30, 98BC5E0414A73280
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (texcolor1.r), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) + (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = (rounded_primary_color.a);
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.aaa) * (const_color[3].rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3, alpha_output_3);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_4 = byteround(clamp((texcolor1.rrr) * (secondary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((const_color[4].a) * (texcolor0.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (const_color[5].rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = (last_tex_env_out.a);
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 82419ABC07DCEF60, 98BC5E0414A73280
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 98BC5E0414A73280
// shader: 8B30, 749CFFDD1341AAD0
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20, clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21, clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22, clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = (lut_scale_rg * LookupLightingLUTUnsigned(5, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.b = (lut_scale_rb * LookupLightingLUTUnsigned(4, max(dot(normal, normalize(half_vector)), 0.0)));
specular_sum.a = (lut_scale_fr * LookupLightingLUTUnsigned(3, max(dot(normal, normalize(view)), 0.0)));
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTUnsigned(0, max(dot(normal, normalize(half_vector)), 0.0))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb) + (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a) + (primary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = (secondary_fragment_color.a);
last_tex_env_out = vec4(color_output_1 * 2.0, alpha_output_1 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rgb) * (texcolor1.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_2, alpha_output_2);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (texcolor0.rgb) + (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (texcolor0.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_3 * 4.0, alpha_output_3 * 1.0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((last_tex_env_out.rgb) + (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a) + (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_4, alpha_output_4);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((texcolor0.rgb) * (texcolor1.ggg) + (last_tex_env_out.rgb) * (vec3(1.0) - (texcolor1.ggg)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a) * (texcolor1.g), 0.0, 1.0));
last_tex_env_out = vec4(color_output_5, alpha_output_5);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6820C9DD8578BEBF, 749CFFDD1341AAD0
// program: DE3CE5859EAAF945, 0329B9A5FB0C6ED4, 749CFFDD1341AAD0
// shader: 8B30, A315E9E1009A95BF
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24
struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};
layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.r) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = vec4(color_output_0, alpha_output_0);
last_tex_env_out = clamp(last_tex_env_out, vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
float fog_index = depth * 128.0;
int fog_i = int(fog_index);
float fog_f = fract(fog_index);
vec2 fog_lut_entry = texelFetch(texture_buffer_lut_lf, fog_i + fog_lut_offset).rg;
float fog_factor = fog_lut_entry.r + fog_lut_entry.g * fog_f;
fog_factor = clamp(fog_factor, 0.0, 1.0);
last_tex_env_out.rgb = mix(fog_color.rgb, last_tex_env_out.rgb, fog_factor);
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 43BA948969E32A9F, A315E9E1009A95BF
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, A315E9E1009A95BF
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 569F0C24FD954D9F
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, DE59F8025145F004
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, 8E9EB08CF0964433
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 76B3240C587CB964
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, F5316E7B42A07A99
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 91D4C1F48A22D214
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 58E49BCAB2D3765C
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 64490455A9C76C22
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 94A2D2EBE04C061F
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, 6F07583F5B29E8A7
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, AE32CC2578F6F520
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, E15BC80C1DFAD735
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 2EFFAC3C037EF206
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, ABE5189CDEEA62D2
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, 2639B42015D2571B
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 4DFD4FD1DEB715CC
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 64490455A9C76C22
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, 06E5792E316D21E0
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 7392AB18D3E2CEFC
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, B1BDF0F12DD94AA3
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, BEA687346CAE952D
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, A3E2F4992CE41760
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, A69D600D515FF39C
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 357A308724C1F19A
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 65EE0AC9F25FC8F7
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 6CBB771A9DF940D3
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, D67214E35037883A
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, B1BDF0F12DD94AA3
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 2677FB87F93973E7
// program: DE3CE5859EAAF945, 0329B9A5FB0C6ED4, AB7F0445334581E3
// program: 1EDFC2D1E2736987, 0329B9A5FB0C6ED4, C35A2E2CF75DE275
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 0E7CBE5CC80DFFCF
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 83815F14C40FA2C1
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 07469F62CD1719F8
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 99CB41CAE2057B62
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, 3B8888B6CA12E873
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, A32122E1B2FE9786
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 83815F14C40FA2C1
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 29E2457DBD271049
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 8EDB6DD0316CD08A
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 8487E8E20BFB15C5
// program: BE8EAE9B1635C70C, 0329B9A5FB0C6ED4, 1B7A7B31C5EE3988
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, 52FF33C5C4572AA9
// program: C1731AFDEB30446B, 0329B9A5FB0C6ED4, 6FE1F00CCAAE30C2
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 0499F8533C670263
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 2A34B28BC1A980D1
// program: 722E3F3D5CFE9006, 0329B9A5FB0C6ED4, 7F69ACF94A0D6390
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, 8FB162A2C5D5E326
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, 6DF6CAF127118D03
// program: F3F6262BC4F7F65E, 0329B9A5FB0C6ED4, 5DA391CFA442A52E
// program: A9B9C968F57E4A8E, 0329B9A5FB0C6ED4, BE9F9A440FD2A848
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, C163C26CA35D5745
// program: 1C22995C992A4787, 0329B9A5FB0C6ED4, DBAEDF8BAA7C1540
// program: 1F9FEC434101F9BA, 0329B9A5FB0C6ED4, 80DB835415F60A4E
// program: 43AF71EF8975113A, 0329B9A5FB0C6ED4, E308AD295D57D1F8
// program: A3A228AE7925C655, 0329B9A5FB0C6ED4, D6CDF1AE7C48097C
// program: 678C6FF713B2F8B8, 0329B9A5FB0C6ED4, 50DD3316033017BC
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 6967F29412FA7F5F
// program: 678C6FF713B2F8B8, 0329B9A5FB0C6ED4, 44B601F4149BC4B3
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, 06C1101CB68E3078
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 7CF5079E46C93668
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 8F88D55C6878AD2E
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 801A5741487D50B6
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 2555A909CA63A120
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, BD5BA6ADBE31C77F
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 0FCF5EAE4BB50324
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, ECBF2CCAE86AF206
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, 6B6FD0A4EF2C8950
// program: 0C8F005BD3DA3F9F, 0329B9A5FB0C6ED4, 56E60111D5B99C68
// program: 7F645D9DB605095C, 0329B9A5FB0C6ED4, 736BE176AEAA5498
// program: CAA6AEF9441DB982, 0329B9A5FB0C6ED4, BC2BB876B12CD771
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 2CD20E96CC5EC438
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 5C13658DEBD38E3D
// program: 1FB05932263D976A, 0329B9A5FB0C6ED4, B250560446EC50E2
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 7E051B3EBEA161E9
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 8A4EDFE20169EEA8
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, 776CE0B39210F718
// program: 7AB1BF347E31E0C3, 0329B9A5FB0C6ED4, 404F2B382DCAEC7C
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 29FEAB2C700882A4
// program: A826CE682F8DE825, 0329B9A5FB0C6ED4, 43274B8601691EC0
// program: C1731AFDEB30446B, 0329B9A5FB0C6ED4, 0BBECABDDCB43404
// program: C1731AFDEB30446B, 0329B9A5FB0C6ED4, DAC68937AC730750
