// shader: 8B31, 07440F333D3D809A

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_159_4096();
bool sub_175_195();
bool sub_209_218();

bool exec_shader() {
    sub_159_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_159_4096() {
    uint jmp_to = 159u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
        }
        case 159u: {
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
// reference: D711CBAA36443D92, 07440F333D3D809A
// shader: 8DD9, C6949C8D76FDEB0C

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

out vec4 primary_color;
out vec2 texcoord0;
out vec2 texcoord1;
out vec2 texcoord2;
out float texcoord0_w;
out vec4 normquat;
out vec3 view;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

 in vec4 vs_out_attr0[];
 in vec4 vs_out_attr1[];
 in vec4 vs_out_attr2[];
 in vec4 vs_out_attr3[];
 in vec4 vs_out_attr4[];
 in vec4 vs_out_attr5[];

struct Vertex {
    vec4 attributes[6];
};

vec4 GetVertexQuaternion(Vertex vtx) {
    return vec4(vtx.attributes[1].x, vtx.attributes[1].y, vtx.attributes[1].z, vtx.attributes[1].w);
}

void EmitVtx(Vertex vtx, bool quats_opposite) {
    vec4 vtx_pos = vec4(vtx.attributes[0].x, vtx.attributes[0].y, vtx.attributes[0].z, vtx.attributes[0].w);
    gl_Position = vtx_pos;
#if !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)
    gl_ClipDistance[0] = -vtx_pos.z;
    gl_ClipDistance[1] = dot(clip_coef, vtx_pos);
#endif // !defined(CITRA_GLES) || defined(GL_EXT_clip_cull_distance)

    vec4 vtx_quat = GetVertexQuaternion(vtx);
    normquat = mix(vtx_quat, -vtx_quat, bvec4(quats_opposite));

    vec4 vtx_color = vec4(vtx.attributes[2].x, vtx.attributes[2].y, vtx.attributes[2].z, vtx.attributes[2].w);
    primary_color = min(abs(vtx_color), vec4(1.0));

    texcoord0 = vec2(vtx.attributes[3].x, vtx.attributes[3].y);
    texcoord1 = vec2(vtx.attributes[5].x, vtx.attributes[5].y);

    texcoord0_w = vtx.attributes[3].w;
    view = vec3(vtx.attributes[4].x, vtx.attributes[4].y, vtx.attributes[4].z);

    texcoord2 = vec2(vtx.attributes[5].z, vtx.attributes[5].w);

    EmitVertex();
}

bool AreQuaternionsOpposite(vec4 qa, vec4 qb) {
    return (dot(qa, qb) < 0.0);
}

void EmitPrim(Vertex vtx0, Vertex vtx1, Vertex vtx2) {
    EmitVtx(vtx0, false);
    EmitVtx(vtx1, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx1)));
    EmitVtx(vtx2, AreQuaternionsOpposite(GetVertexQuaternion(vtx0), GetVertexQuaternion(vtx2)));
    EndPrimitive();
}

void main() {
    Vertex prim_buffer[3];
    prim_buffer[0].attributes = vec4[6](vs_out_attr0[0], vs_out_attr1[0], vs_out_attr2[0], vs_out_attr3[0], vs_out_attr4[0], vs_out_attr5[0]);
    prim_buffer[1].attributes = vec4[6](vs_out_attr0[1], vs_out_attr1[1], vs_out_attr2[1], vs_out_attr3[1], vs_out_attr4[1], vs_out_attr5[1]);
    prim_buffer[2].attributes = vec4[6](vs_out_attr0[2], vs_out_attr1[2], vs_out_attr2[2], vs_out_attr3[2], vs_out_attr4[2], vs_out_attr5[2]);
    EmitPrim(prim_buffer[0], prim_buffer[1], prim_buffer[2]);
}
// reference: A0CB59480533AF6A, C6949C8D76FDEB0C
// shader: 8B30, D8A369D59E3997EA

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2584B8EBD17F933D, D8A369D59E3997EA
// program: 07440F333D3D809A, C6949C8D76FDEB0C, D8A369D59E3997EA
// reference: 04920C5336443D92, 07440F333D3D809A
// shader: 8B31, 5B031FBA63FC5397

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_155_4096();
bool sub_175_195();
bool sub_209_218();

bool exec_shader() {
    sub_155_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_155_4096() {
    uint jmp_to = 155u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
        }
        case 155u: {
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
// reference: D711CBAAE6C57E4D, 5B031FBA63FC5397
// shader: 8B30, 9003BF984D8E6760

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68D17F933D, 9003BF984D8E6760
// program: 5B031FBA63FC5397, C6949C8D76FDEB0C, 9003BF984D8E6760
// shader: 8B31, 91BF95E5F4CCCBE0

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_218_4096();

bool exec_shader() {
    sub_218_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_218_4096() {
    uint jmp_to = 218u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
        }
        case 218u: {
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: D711CBAA2CFFEF70, 91BF95E5F4CCCBE0
// shader: 8B30, 5213DBEBC54CDCCA

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 7A18D35B29D616F8, 5213DBEBC54CDCCA
// program: 91BF95E5F4CCCBE0, C6949C8D76FDEB0C, 5213DBEBC54CDCCA
// reference: 04920C53C1B4DEC4, 91BF95E5F4CCCBE0
// shader: 8B31, 43426DC6D4038D79

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_144_4096();
bool sub_175_195();
bool sub_209_218();

bool exec_shader() {
    sub_144_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_144_4096() {
    uint jmp_to = 144u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
        }
        case 144u: {
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
// reference: 04920C535B417E8E, 43426DC6D4038D79
// shader: 8B30, F8C7191BF79C7A66

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68D97C7BB5, F8C7191BF79C7A66
// program: 43426DC6D4038D79, C6949C8D76FDEB0C, F8C7191BF79C7A66
// shader: 8B31, 1AFF87880D434FB6

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_423_4096();

bool exec_shader() {
    sub_423_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_423_4096() {
    uint jmp_to = 423u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
        }
        case 423u: {
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C5329AD8433, 1AFF87880D434FB6
// shader: 8B30, D78E82539AF722DD

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4609680CD97C7BB5, D78E82539AF722DD
// program: 1AFF87880D434FB6, C6949C8D76FDEB0C, D78E82539AF722DD
// reference: 04920C530B8E4FF9, 5B031FBA63FC5397
// shader: 8B30, 4A8A014214673BAC

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E683012D426, 4A8A014214673BAC
// program: 5B031FBA63FC5397, C6949C8D76FDEB0C, 4A8A014214673BAC
// shader: 8B30, 7D03C725FB5FD6D4

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68DCA53F25, 7D03C725FB5FD6D4
// program: 5B031FBA63FC5397, C6949C8D76FDEB0C, 7D03C725FB5FD6D4
// shader: 8B31, 747AD5F8B654FD1A

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_366_4096();

bool exec_shader() {
    sub_366_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_366_4096() {
    uint jmp_to = 366u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
        }
        case 366u: {
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C5353189205, 747AD5F8B654FD1A
// shader: 8B30, 077A79DCAD4C53E8

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((const_color[3].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 6FB6A9CFF55366E9, 077A79DCAD4C53E8
// program: 747AD5F8B654FD1A, C6949C8D76FDEB0C, 077A79DCAD4C53E8
// shader: 8B31, 5D55EF5559950FCC

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_315_4096();

bool exec_shader() {
    sub_315_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_315_4096() {
    uint jmp_to = 315u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
        }
        case 315u: {
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53BD444319, 5D55EF5559950FCC
// shader: 8B30, BFE0DD4DB344DD76

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1.0) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1.0) - (vec3(1.0) - texcolor2.aaa)), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1.0)) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 873C4D108C8B25A0, BFE0DD4DB344DD76
// program: 5D55EF5559950FCC, C6949C8D76FDEB0C, BFE0DD4DB344DD76
// shader: 8B31, 8D607ED475583530

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_288_4096();

bool exec_shader() {
    sub_288_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_288_4096() {
    uint jmp_to = 288u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
        }
        case 288u: {
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53196C7190, 8D607ED475583530
// program: 8D607ED475583530, C6949C8D76FDEB0C, 077A79DCAD4C53E8
// shader: 8B30, 000DF67C5DFDA4FB

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 417FDD591098CDE2, 000DF67C5DFDA4FB
// program: 91BF95E5F4CCCBE0, C6949C8D76FDEB0C, 000DF67C5DFDA4FB
// shader: 8B30, 5D3237CC1A2114E3

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B1E589F5E28A25B3, 5D3237CC1A2114E3
// program: 91BF95E5F4CCCBE0, C6949C8D76FDEB0C, 5D3237CC1A2114E3
// shader: 8B31, 390AE326B576D5B0

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_230_4096();

bool exec_shader() {
    sub_230_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_230_4096() {
    uint jmp_to = 230u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
        }
        case 230u: {
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53AD1E1EA7, 390AE326B576D5B0
// shader: 8B30, 981BBB48500DA4CC

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 5BBA4DC855B6C27F, 981BBB48500DA4CC
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, 981BBB48500DA4CC
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, 000DF67C5DFDA4FB
// shader: 8B30, 6A00E0D955A2682F

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C673596295CB7955, 6A00E0D955A2682F
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, 6A00E0D955A2682F
// shader: 8B30, BC4B390CD62E2821

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 36E90DCE67D99104, BC4B390CD62E2821
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, BC4B390CD62E2821
// shader: 8B31, 67BB82F25B4EACD6

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_454_4096();

bool exec_shader() {
    sub_454_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_454_4096() {
    uint jmp_to = 454u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
        }
        case 454u: {
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53D12814B3, 67BB82F25B4EACD6
// shader: 8B30, E4480FEE6392426B

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3F49E9FAD8C03A8C, E4480FEE6392426B
// program: 67BB82F25B4EACD6, C6949C8D76FDEB0C, E4480FEE6392426B
// shader: 8B30, EA980555E25AA2F3

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F4486373B0A9534B, EA980555E25AA2F3
// program: 67BB82F25B4EACD6, C6949C8D76FDEB0C, EA980555E25AA2F3
// shader: 8B30, 5BACB25EDAC5B5A1

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: CE312E68CF138F9D, 5BACB25EDAC5B5A1
// program: 43426DC6D4038D79, C6949C8D76FDEB0C, 5BACB25EDAC5B5A1
// shader: 8B31, C579EB40345EBB8C

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_427_4096();

bool exec_shader() {
    sub_427_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_427_4096() {
    uint jmp_to = 427u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
        }
        case 427u: {
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53835F4613, C579EB40345EBB8C
// program: C579EB40345EBB8C, C6949C8D76FDEB0C, EA980555E25AA2F3
// shader: 8B31, 3364016E9942273A

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_418_4096();

bool exec_shader() {
    sub_418_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_418_4096() {
    uint jmp_to = 418u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
        }
        case 418u: {
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53566855AB, 3364016E9942273A
// shader: 8B30, 76F64FC7BC44C56D

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3 * 2.0, alpha_output_3 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1.0) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1.0) - (vec3(1.0) - const_color[5].aaa)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 3D5370B30AB6B7C0, 76F64FC7BC44C56D
// program: 3364016E9942273A, C6949C8D76FDEB0C, 76F64FC7BC44C56D
// shader: 8B31, 25227EA48D9BEBDB

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_452_4096();

bool exec_shader() {
    sub_452_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_452_4096() {
    uint jmp_to = 452u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
        }
        case 452u: {
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C5354D0367C, 25227EA48D9BEBDB
// shader: 8B30, 69EB53926B4DD843

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF97F7717E1, 69EB53926B4DD843
// program: 25227EA48D9BEBDB, C6949C8D76FDEB0C, 69EB53926B4DD843
// shader: 8B31, 5CA73F800C077212

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_105_134();
bool sub_476_4096();

bool exec_shader() {
    sub_476_4096();
    return true;
}

bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_476_4096() {
    uint jmp_to = 476u;
    while (true) {
        switch (jmp_to) {
        case 476u: {
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53DA44B47D, 5CA73F800C077212
// shader: 8B30, 5D80716244EA2512

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2F96C4C47977DF73, 5D80716244EA2512
// program: 5CA73F800C077212, C6949C8D76FDEB0C, 5D80716244EA2512
// shader: 8B30, CE5E20AAB22E3991

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: F4486373A6C6A763, CE5E20AAB22E3991
// program: 67BB82F25B4EACD6, C6949C8D76FDEB0C, CE5E20AAB22E3991
// shader: 8B31, 1EA329896BFE7826

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_0_4096();
bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();

bool exec_shader() {
    sub_0_4096();
    return true;
}

bool sub_0_4096() {
    uint jmp_to = 0u;
    while (true) {
        switch (jmp_to) {
        case 0u: {
            // 0: call
            {
                sub_9_21();
            }
            // 1: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
        }
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
// reference: 04920C53655A7B84, 1EA329896BFE7826
// shader: 8B30, CEA8B21231FC2428

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF97440EDF5, CEA8B21231FC2428
// program: 1EA329896BFE7826, C6949C8D76FDEB0C, CEA8B21231FC2428
// program: C579EB40345EBB8C, C6949C8D76FDEB0C, CE5E20AAB22E3991
// program: 25227EA48D9BEBDB, C6949C8D76FDEB0C, CEA8B21231FC2428
// shader: 8B30, F7F169D3B22E3991

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((texcolor1.a) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a) * (const_color[2].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: B771AF9EA6C6A763, F7F169D3B22E3991
// program: C579EB40345EBB8C, C6949C8D76FDEB0C, F7F169D3B22E3991
// shader: 8B31, 5C7077AD3C424188

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_470_4096();

bool exec_shader() {
    sub_470_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_470_4096() {
    uint jmp_to = 470u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
        }
        case 470u: {
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C5325CF174D, 5C7077AD3C424188
// program: 5C7077AD3C424188, C6949C8D76FDEB0C, 5D80716244EA2512
// shader: 8B30, 01880BD57291DC24

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((const_color[3].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 84033F4CF55366E9, 01880BD57291DC24
// program: 747AD5F8B654FD1A, C6949C8D76FDEB0C, 01880BD57291DC24
// program: 8D607ED475583530, C6949C8D76FDEB0C, 01880BD57291DC24
// shader: 8B31, 9340F6F2A6A06CB5

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_198_4096();
bool sub_209_218();

bool exec_shader() {
    sub_198_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_198_4096() {
    uint jmp_to = 198u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
        }
        case 198u: {
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
// reference: 04920C539FA11F1A, 9340F6F2A6A06CB5
// shader: 8B30, FA92031249913714

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3 * 2.0, alpha_output_3 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 518ED5EF3D9D4162, FA92031249913714
// program: 9340F6F2A6A06CB5, C6949C8D76FDEB0C, FA92031249913714
// reference: 04920C53DB0F0C26, 07440F333D3D809A
// shader: 8B30, 46F3A07B08750384

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2584B8EBD792C531, 46F3A07B08750384
// program: 07440F333D3D809A, C6949C8D76FDEB0C, 46F3A07B08750384
// reference: D711CBAA370F85C9, 5CA73F800C077212
// shader: 8B30, 158CA561EF6E7815

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: C42352477977DF73, 158CA561EF6E7815
// program: 5CA73F800C077212, C6949C8D76FDEB0C, 158CA561EF6E7815
// shader: 8B30, 6174F8A2751551D4

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

if (int(last_tex_env_out.a * 255.0) <= alphatest_ref) discard;
gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2584B8EB3B252E32, 6174F8A2751551D4
// program: 5B031FBA63FC5397, C6949C8D76FDEB0C, 6174F8A2751551D4
// shader: 8B31, 12E8F96D39057340

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_359_4096();

bool exec_shader() {
    sub_359_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_359_4096() {
    uint jmp_to = 359u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
        }
        case 359u: {
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: D711CBAA6B64B009, 12E8F96D39057340
// reference: 04920C536B64B009, 12E8F96D39057340
// shader: 8B31, 12393ED9905481CB

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_265_4096();

bool exec_shader() {
    sub_265_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_265_4096() {
    uint jmp_to = 265u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
        }
        case 265u: {
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C5313AF5221, 12393ED9905481CB
// shader: 8B31, 0FE38B3285CEFD3C

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_228_4096();

bool exec_shader() {
    sub_228_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_228_4096() {
    uint jmp_to = 228u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
        }
        case 228u: {
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C53C5AD0DDC, 0FE38B3285CEFD3C
// shader: 8B31, CEF0242AEDB4A8E3

struct pica_uniforms {
    bool b[16];
    uvec4 i[4];
    vec4 f[96];
};

bool exec_shader();

#define uniforms vs_uniforms
layout (std140) uniform vs_config {
    pica_uniforms uniforms;
};

layout(location = 0) in vec4 vs_in_reg0;
layout(location = 1) in vec4 vs_in_reg1;
layout(location = 2) in vec4 vs_in_reg2;
layout(location = 3) in vec4 vs_in_reg3;
layout(location = 4) in vec4 vs_in_reg4;
layout(location = 5) in vec4 vs_in_reg5;
layout(location = 6) in vec4 vs_in_reg6;
layout(location = 7) in vec4 vs_in_reg7;
layout(location = 8) in vec4 vs_in_reg8;
layout(location = 9) in vec4 vs_in_reg9;
layout(location = 10) in vec4 vs_in_reg10;
layout(location = 11) in vec4 vs_in_reg11;

 out vec4 vs_out_attr0;
 out vec4 vs_out_attr1;
 out vec4 vs_out_attr2;
 out vec4 vs_out_attr3;
 out vec4 vs_out_attr4;
 out vec4 vs_out_attr5;

void main() {
    vs_out_attr0 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr1 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr2 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr3 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr4 = vec4(0.0, 0.0, 0.0, 1.0);
    vs_out_attr5 = vec4(0.0, 0.0, 0.0, 1.0);

    exec_shader();
}


#define mul_s(x, y) mix(x * y, vec4(0.0), isnan(x * y))
#define fma_s(x, y, z) (mix(x * y, vec4(0.0), isnan(x * y)) + z)
float rcp_s(float x) {
    if (x == 0.0) return x;
    return 1.0 / x;
}
float rsq_s(float x) {
    if (x > 0.0) return inversesqrt(x);
    return 0.0;
}
#define dot_s(x, y) dot(x, y)
#define dot_3(x, y) dot(x, y)

bvec2 conditional_code = bvec2(false);
ivec3 address_registers = ivec3(0);
vec4 reg_tmp0 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp1 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp2 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp3 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp4 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp5 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp6 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp7 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp8 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp9 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp10 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp11 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp12 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp13 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp14 = vec4(0.0, 0.0, 0.0, 1.0);
vec4 reg_tmp15 = vec4(0.0, 0.0, 0.0, 1.0);

bool sub_9_21();
bool sub_13_21();
bool sub_21_55();
bool sub_26_55();
bool sub_45_55();
bool sub_51_53();
bool sub_53_54();
bool sub_55_74();
bool sub_74_105();
bool sub_105_134();
bool sub_114_134();
bool sub_115_134();
bool sub_134_144();
bool sub_175_195();
bool sub_209_218();
bool sub_286_4096();

bool exec_shader() {
    sub_286_4096();
    return true;
}

bool sub_9_21() {
    // 9: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 10: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 11: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 12: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_13_21() {
    // 13: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 14: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 15: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 16: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 17: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 18: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 19: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 20: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    return false;
}
bool sub_21_55() {
    // 21: mul
    reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
    // 22: dp4
    reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
    // 23: dp4
    reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
    // 24: dp4
    reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
    // 25: dp4
    reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_26_55() {
    // 26: dp3
    reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
    // 27: dp3
    reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
    // 28: dp3
    reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
    // 29: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 30: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 31: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 32: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 33: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 34: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 35: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 36: mov
    vs_out_attr4 = -reg_tmp9;
    // 37: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 38: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 39: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 40: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    // 41: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 42: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 43: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 44: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_45_55() {
    // 45: add
    reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
    // 46: mul
    reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
    // 47: cmp
    conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
    // 48: mul
    reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
    // 49: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 50: ifc
    if (!conditional_code.x) {
        sub_51_53();
    } else {
        sub_53_54();
    }
    // 54: mov
    vs_out_attr1.w = (uniforms.f[93].xxxx).w;
    return false;
}
bool sub_51_53() {
    // 51: rcp
    vs_out_attr1.z = rcp_s(reg_tmp12.x);
    // 52: mul
    vs_out_attr1.xy = (mul_s(reg_tmp13, reg_tmp12)).xy;
    return false;
}
bool sub_53_54() {
    // 53: mov
    vs_out_attr1.xyz = (uniforms.f[93].yxxx).xyz;
    return false;
}
bool sub_55_74() {
    // 55: dp3
    reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
    // 56: rcp
    reg_tmp9.w = rcp_s(reg_tmp9.w);
    // 57: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
    // 58: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 59: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 60: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 61: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 62: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 63: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 64: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 65: mova
    address_registers.x = (ivec2(reg_tmp12.ww)).x;
    // 66: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 67: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 68: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 69: mov
    reg_tmp10.w = (uniforms.f[93].yyyy).w;
    // 70: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 71: dp4
    reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
    // 72: dp4
    reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
    // 73: dp4
    reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
    return false;
}
bool sub_74_105() {
    // 74: flr
    reg_tmp0 = floor(reg_tmp12);
    // 75: flr
    reg_tmp1 = floor(reg_tmp13);
    // 76: flr
    reg_tmp2 = floor(reg_tmp14);
    // 77: mul
    reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
    // 78: add
    reg_tmp3 = reg_tmp12 + -reg_tmp0;
    // 79: add
    reg_tmp4 = reg_tmp13 + -reg_tmp1;
    // 80: add
    reg_tmp5 = reg_tmp14 + -reg_tmp2;
    // 81: mul
    reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
    // 82: mul
    reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
    // 83: mul
    reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
    // 84: mul
    reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
    // 85: mad
    reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
    // 86: mul
    reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
    // 87: mul
    reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
    // 88: mul
    reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
    // 89: mov
    reg_tmp12 = uniforms.f[95].xxxx;
    // 90: mad
    reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
    // 91: mad
    reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
    // 92: max
    reg_tmp3 = abs(reg_tmp3);
    // 93: max
    reg_tmp4 = abs(reg_tmp4);
    // 94: max
    reg_tmp5 = abs(reg_tmp5);
    // 95: madi
    reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
    // 96: madi
    reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
    // 97: madi
    reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
    // 98: mad
    reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
    // 99: mad
    reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
    // 100: mad
    reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
    // 101: mad
    reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
    // 102: mad
    reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
    // 103: mad
    reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
    // 104: add
    reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
    return false;
}
bool sub_105_134() {
    uint jmp_to = 105u;
    while (true) {
        switch (jmp_to) {
        case 105u: {
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
        }
        default: return false;
        }
    }
    return false;
}
bool sub_114_134() {
    // 114: call
    {
        sub_55_74();
    }
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_115_134() {
    // 115: dp3
    reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
    // 116: dp3
    reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
    // 117: dp3
    reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
    // 118: dp4
    reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
    // 119: dp4
    reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
    // 120: dp4
    reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
    // 121: mov
    reg_tmp9.w = (reg_tmp8.wwww).w;
    // 122: dp3
    reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
    // 123: dp4
    vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
    // 124: dp4
    vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
    // 125: dp4
    vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
    // 126: dp4
    vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
    // 127: rsq
    reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
    // 128: mov
    vs_out_attr4 = -reg_tmp9;
    // 129: mul
    reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
    // 130: mov
    reg_tmp11.w = (uniforms.f[93].xxxx).w;
    // 131: dp3
    reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
    // 132: dp3
    reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
    // 133: dp3
    reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
    return false;
}
bool sub_134_144() {
    // 134: dp3
    reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
    // 135: mov
    reg_tmp13.y = (reg_tmp11.zzzz).y;
    // 136: rsq
    reg_tmp15.x = rsq_s(reg_tmp15.x);
    // 137: mul
    reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
    // 138: dp3
    reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
    // 139: mad
    reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
    // 140: min
    reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
    // 141: max
    reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
    // 142: mul
    reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
    // 143: mov
    vs_out_attr2 = reg_tmp13;
    return false;
}
bool sub_175_195() {
    // 175: mov
    reg_tmp8 = vs_in_reg3;
    // 176: mul
    reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
    // 177: mova
    address_registers.xy = ivec2(reg_tmp8.xy);
    // 178: mul
    reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
    // 179: mul
    reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
    // 180: mul
    reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
    // 181: mad
    reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 182: mad
    reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 183: mad
    reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 184: mova
    address_registers.xy = ivec2(reg_tmp8.zw);
    // 185: mad
    reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
    // 186: mad
    reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
    // 187: mad
    reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
    // 188: mad
    reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
    // 189: mad
    reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
    // 190: mad
    reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
    // 191: mov
    reg_tmp8.w = (uniforms.f[93].yyyy).w;
    // 192: dp4
    reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
    // 193: dp4
    reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
    // 194: dp4
    reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
    return false;
}
bool sub_209_218() {
    // 209: add
    reg_tmp14 = -uniforms.f[14] + reg_tmp8;
    // 210: dp3
    reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
    // 211: rsq
    reg_tmp14.x = rsq_s(reg_tmp13.y);
    // 212: madi
    reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
    // 213: mul
    reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
    // 214: madi
    reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
    // 215: min
    reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
    // 216: mul
    reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
    // 217: mad
    reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
    return false;
}
bool sub_286_4096() {
    uint jmp_to = 286u;
    while (true) {
        switch (jmp_to) {
        case 2u: {
            // 2: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 3: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 4: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 5: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 6: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 7: call
            {
                sub_13_21();
            }
            // 8: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 9: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 10: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 11: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 12: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 13: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 14: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 15: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 16: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 17: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 18: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 19: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 20: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 21: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 22: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 23: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 24: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 25: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 26: dp3
            reg_tmp7.x = dot_3(uniforms.f[10].xyz, reg_tmp12.xyz);
            // 27: dp3
            reg_tmp7.y = dot_3(uniforms.f[11].xyz, reg_tmp12.xyz);
            // 28: dp3
            reg_tmp7.z = dot_3(uniforms.f[12].xyz, reg_tmp12.xyz);
            // 29: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 30: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 31: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 32: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 33: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 34: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 35: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 36: mov
            vs_out_attr4 = -reg_tmp9;
            // 37: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 38: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 39: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 40: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 41: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 42: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 43: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 44: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 45: add
            reg_tmp12 = uniforms.f[93].yyyy + reg_tmp11.zzzz;
            // 46: mul
            reg_tmp13 = mul_s(uniforms.f[95].zzzz, reg_tmp11);
            // 47: cmp
            conditional_code = equal(-uniforms.f[93].yy, reg_tmp11.zz);
            // 48: mul
            reg_tmp12 = mul_s(uniforms.f[95].zzzz, reg_tmp12);
            // 49: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 50: ifc
            if (!conditional_code.x) {
                sub_51_53();
            } else {
                sub_53_54();
            }
            // 54: mov
            vs_out_attr1.w = (uniforms.f[93].xxxx).w;
            // 55: dp3
            reg_tmp9.w = dot_3(uniforms.f[93].yyy, reg_tmp9.xyz);
            // 56: rcp
            reg_tmp9.w = rcp_s(reg_tmp9.w);
            // 57: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp9.wwww);
            // 58: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 59: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 60: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 61: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 62: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 63: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 64: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 65: mova
            address_registers.x = (ivec2(reg_tmp12.ww)).x;
            // 66: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 67: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 68: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 69: mov
            reg_tmp10.w = (uniforms.f[93].yyyy).w;
            // 70: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 71: dp4
            reg_tmp8.x = dot_s(reg_tmp10, reg_tmp13);
            // 72: dp4
            reg_tmp8.y = dot_s(reg_tmp10, reg_tmp14);
            // 73: dp4
            reg_tmp8.z = dot_s(reg_tmp10, reg_tmp15);
            // 74: flr
            reg_tmp0 = floor(reg_tmp12);
            // 75: flr
            reg_tmp1 = floor(reg_tmp13);
            // 76: flr
            reg_tmp2 = floor(reg_tmp14);
            // 77: mul
            reg_tmp8 = mul_s(reg_tmp8, reg_tmp11);
            // 78: add
            reg_tmp3 = reg_tmp12 + -reg_tmp0;
            // 79: add
            reg_tmp4 = reg_tmp13 + -reg_tmp1;
            // 80: add
            reg_tmp5 = reg_tmp14 + -reg_tmp2;
            // 81: mul
            reg_tmp9 = mul_s(reg_tmp9, reg_tmp11);
            // 82: mul
            reg_tmp0 = mul_s(uniforms.f[93].wwww, reg_tmp0);
            // 83: mul
            reg_tmp1 = mul_s(uniforms.f[93].wwww, reg_tmp1);
            // 84: mul
            reg_tmp2 = mul_s(uniforms.f[93].wwww, reg_tmp2);
            // 85: mad
            reg_tmp10.xyz = (fma_s(reg_tmp0, reg_tmp8.xxxx, reg_tmp10)).xyz;
            // 86: mul
            reg_tmp15.x = (mul_s(reg_tmp0.wwww, reg_tmp8.wwww)).x;
            // 87: mul
            reg_tmp15.y = (mul_s(reg_tmp1.wwww, reg_tmp8.wwww)).y;
            // 88: mul
            reg_tmp15.z = (mul_s(reg_tmp2.wwww, reg_tmp8.wwww)).z;
            // 89: mov
            reg_tmp12 = uniforms.f[95].xxxx;
            // 90: mad
            reg_tmp10.xyz = (fma_s(reg_tmp1, reg_tmp8.yyyy, reg_tmp10)).xyz;
            // 91: mad
            reg_tmp15.xyz = (fma_s(reg_tmp2, reg_tmp8.zzzz, reg_tmp15)).xyz;
            // 92: max
            reg_tmp3 = abs(reg_tmp3);
            // 93: max
            reg_tmp4 = abs(reg_tmp4);
            // 94: max
            reg_tmp5 = abs(reg_tmp5);
            // 95: madi
            reg_tmp3 = fma_s(reg_tmp3, reg_tmp12, -uniforms.f[93].yyyy);
            // 96: madi
            reg_tmp4 = fma_s(reg_tmp4, reg_tmp12, -uniforms.f[93].yyyy);
            // 97: madi
            reg_tmp5 = fma_s(reg_tmp5, reg_tmp12, -uniforms.f[93].yyyy);
            // 98: mad
            reg_tmp10.xyz = (fma_s(reg_tmp3, reg_tmp9.xxxx, reg_tmp10)).xyz;
            // 99: mad
            reg_tmp12.x = (fma_s(reg_tmp3.wwww, reg_tmp9.wwww, reg_tmp15.xxxx)).x;
            // 100: mad
            reg_tmp12.y = (fma_s(reg_tmp4.wwww, reg_tmp9.wwww, reg_tmp15.yyyy)).y;
            // 101: mad
            reg_tmp12.z = (fma_s(reg_tmp5.wwww, reg_tmp9.wwww, reg_tmp15.zzzz)).z;
            // 102: mad
            reg_tmp10.xyz = (fma_s(reg_tmp4, reg_tmp9.yyyy, reg_tmp10)).xyz;
            // 103: mad
            reg_tmp15.xyz = (fma_s(reg_tmp5, reg_tmp9.zzzz, reg_tmp12)).xyz;
            // 104: add
            reg_tmp10.xyz = (reg_tmp10 + reg_tmp15).xyz;
            // 105: mova
            address_registers.x = (ivec2(reg_tmp8.xx)).x;
            // 106: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 107: dp4
            reg_tmp8.x = dot_s(uniforms.f[10 + address_registers.x], vs_in_reg0);
            // 108: dp4
            reg_tmp8.y = dot_s(uniforms.f[11 + address_registers.x], vs_in_reg0);
            // 109: dp4
            reg_tmp8.z = dot_s(uniforms.f[12 + address_registers.x], vs_in_reg0);
            // 110: dp3
            reg_tmp7.x = dot_3(uniforms.f[10 + address_registers.x].xyz, reg_tmp12.xyz);
            // 111: dp3
            reg_tmp7.y = dot_3(uniforms.f[11 + address_registers.x].xyz, reg_tmp12.xyz);
            // 112: dp3
            reg_tmp7.z = dot_3(uniforms.f[12 + address_registers.x].xyz, reg_tmp12.xyz);
            // 113: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 118u; break; }
            }
            // 114: call
            {
                sub_55_74();
            }
            // 115: dp3
            reg_tmp7.x = dot_3(reg_tmp12.xyz, reg_tmp13.xyz);
            // 116: dp3
            reg_tmp7.y = dot_3(reg_tmp12.xyz, reg_tmp14.xyz);
            // 117: dp3
            reg_tmp7.z = dot_3(reg_tmp12.xyz, reg_tmp15.xyz);
        }
        case 118u: {
            // 118: dp4
            reg_tmp9.x = dot_s(uniforms.f[4], reg_tmp8);
            // 119: dp4
            reg_tmp9.y = dot_s(uniforms.f[5], reg_tmp8);
            // 120: dp4
            reg_tmp9.z = dot_s(uniforms.f[6], reg_tmp8);
            // 121: mov
            reg_tmp9.w = (reg_tmp8.wwww).w;
            // 122: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp7.xyz, reg_tmp7.xyz));
            // 123: dp4
            vs_out_attr0.x = dot_s(uniforms.f[0], reg_tmp9);
            // 124: dp4
            vs_out_attr0.y = dot_s(uniforms.f[1], reg_tmp9);
            // 125: dp4
            vs_out_attr0.z = dot_s(uniforms.f[2], reg_tmp9);
            // 126: dp4
            vs_out_attr0.w = dot_s(uniforms.f[3], reg_tmp9);
            // 127: rsq
            reg_tmp12 = vec4(rsq_s(reg_tmp12.x));
            // 128: mov
            vs_out_attr4 = -reg_tmp9;
            // 129: mul
            reg_tmp7 = mul_s(reg_tmp7, reg_tmp12);
            // 130: mov
            reg_tmp11.w = (uniforms.f[93].xxxx).w;
            // 131: dp3
            reg_tmp11.x = dot_3(uniforms.f[4].xyz, reg_tmp7.xyz);
            // 132: dp3
            reg_tmp11.y = dot_3(uniforms.f[5].xyz, reg_tmp7.xyz);
            // 133: dp3
            reg_tmp11.z = dot_3(uniforms.f[6].xyz, reg_tmp7.xyz);
            // 134: dp3
            reg_tmp15.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 135: mov
            reg_tmp13.y = (reg_tmp11.zzzz).y;
            // 136: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 137: mul
            reg_tmp15 = mul_s(reg_tmp9, reg_tmp15.xxxx);
            // 138: dp3
            reg_tmp13.x = dot_3(-reg_tmp15.xyz, reg_tmp11.xyz);
            // 139: mad
            reg_tmp13.xzw = (fma_s(reg_tmp13.xxxx, reg_tmp12.xxxz, reg_tmp12.yyyw)).xzw;
            // 140: min
            reg_tmp13 = min(uniforms.f[93].yyyy, reg_tmp13);
            // 141: max
            reg_tmp13 = max(uniforms.f[93].xxxx, reg_tmp13);
            // 142: mul
            reg_tmp13.xw = (mul_s(reg_tmp13.xwww, reg_tmp13.xwww)).xw;
            // 143: mov
            vs_out_attr2 = reg_tmp13;
            // 144: call
            {
                sub_9_21();
            }
            // 145: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 146: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 147: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 148: mov
            reg_tmp8 = vs_in_reg3;
            // 149: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 150: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 151: call
            {
                sub_55_74();
            }
            // 152: call
            {
                sub_13_21();
            }
            // 153: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xyz;
            // 154: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 155: call
            {
                sub_9_21();
            }
            // 156: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 157: mov
            vs_out_attr3.xyz = (vs_in_reg1).xyz;
            // 158: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 159: call
            {
                sub_9_21();
            }
            // 160: mov
            reg_tmp0 = vs_in_reg1.xyyy;
            // 161: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 162: mov
            reg_tmp1 = vs_in_reg0.xyyy;
            // 163: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 164: mul
            reg_tmp13 = mul_s(uniforms.f[18], vs_in_reg2);
            // 165: dp3
            vs_out_attr3.x = dot_3(uniforms.f[14].xyz, reg_tmp0.xyz);
            // 166: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[15].xyz, reg_tmp0.xyz));
            // 167: dp3
            vs_out_attr5.x = dot_3(uniforms.f[16].xyz, reg_tmp1.xyz);
            // 168: dp3
            vs_out_attr5.y = dot_3(uniforms.f[17].xyz, reg_tmp1.xyz);
            // 169: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, reg_tmp13);
            // 170: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 493u; break; }
            }
            // 171: call
            {
                sub_9_21();
            }
            // 172: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg1);
            // 173: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
            // 174: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 175: mov
            reg_tmp8 = vs_in_reg3;
            // 176: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 177: mova
            address_registers.xy = ivec2(reg_tmp8.xy);
            // 178: mul
            reg_tmp13 = mul_s(uniforms.f[10 + address_registers.x], reg_tmp9.xxxx);
            // 179: mul
            reg_tmp14 = mul_s(uniforms.f[11 + address_registers.x], reg_tmp9.xxxx);
            // 180: mul
            reg_tmp15 = mul_s(uniforms.f[12 + address_registers.x], reg_tmp9.xxxx);
            // 181: mad
            reg_tmp13 = fma_s(reg_tmp9.yyyy, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 182: mad
            reg_tmp14 = fma_s(reg_tmp9.yyyy, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 183: mad
            reg_tmp15 = fma_s(reg_tmp9.yyyy, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 184: mova
            address_registers.xy = ivec2(reg_tmp8.zw);
            // 185: mad
            reg_tmp13 = fma_s(reg_tmp9.zzzz, uniforms.f[10 + address_registers.x], reg_tmp13);
            // 186: mad
            reg_tmp14 = fma_s(reg_tmp9.zzzz, uniforms.f[11 + address_registers.x], reg_tmp14);
            // 187: mad
            reg_tmp15 = fma_s(reg_tmp9.zzzz, uniforms.f[12 + address_registers.x], reg_tmp15);
            // 188: mad
            reg_tmp13 = fma_s(reg_tmp9.wwww, uniforms.f[10 + address_registers.y], reg_tmp13);
            // 189: mad
            reg_tmp14 = fma_s(reg_tmp9.wwww, uniforms.f[11 + address_registers.y], reg_tmp14);
            // 190: mad
            reg_tmp15 = fma_s(reg_tmp9.wwww, uniforms.f[12 + address_registers.y], reg_tmp15);
            // 191: mov
            reg_tmp8.w = (uniforms.f[93].yyyy).w;
            // 192: dp4
            reg_tmp8.x = dot_s(vs_in_reg0, reg_tmp13);
            // 193: dp4
            reg_tmp8.y = dot_s(vs_in_reg0, reg_tmp14);
            // 194: dp4
            reg_tmp8.z = dot_s(vs_in_reg0, reg_tmp15);
            // 195: call
            {
                sub_175_195();
            }
            // 196: call
            {
                sub_13_21();
            }
            // 197: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 198: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 199: call
            {
                sub_175_195();
            }
            // 200: call
            {
                sub_115_134();
            }
            // 201: call
            {
                sub_45_55();
            }
            // 202: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 203: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 204: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 205: call
            {
                sub_21_55();
            }
            // 206: mov
            vs_out_attr3.xyz = (vs_in_reg2).xyz;
            // 207: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 208: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
            // 209: add
            reg_tmp14 = -uniforms.f[14] + reg_tmp8;
            // 210: dp3
            reg_tmp13.y = dot_3(reg_tmp14.xyz, reg_tmp14.xyz);
            // 211: rsq
            reg_tmp14.x = rsq_s(reg_tmp13.y);
            // 212: madi
            reg_tmp13.z = (fma_s(reg_tmp14.xxxx, reg_tmp13.yyyy, -uniforms.f[14].wwww)).z;
            // 213: mul
            reg_tmp13.z = (mul_s(uniforms.f[16].xxxx, reg_tmp13.zzzz)).z;
            // 214: madi
            reg_tmp13.z = (fma_s(reg_tmp13.zzzz, reg_tmp13.zzzz, -uniforms.f[16].yyyy)).z;
            // 215: min
            reg_tmp15 = min(uniforms.f[93].xxxx, reg_tmp13.zzzz);
            // 216: mul
            reg_tmp13.w = (mul_s(reg_tmp15, reg_tmp15)).w;
            // 217: mad
            reg_tmp8 = fma_s(reg_tmp13.wwww, uniforms.f[15], reg_tmp8);
            // 218: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 219: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 220: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 221: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 222: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 223: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 224: call
            {
                sub_26_55();
            }
            // 225: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 226: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 227: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 228: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 229: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 230: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 231: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 232: call
            {
                sub_105_134();
            }
            // 233: call
            {
                sub_45_55();
            }
            // 234: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 235: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg3.xyxy)).zw;
            // 236: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 499u; break; }
            }
            // 237: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 238: dp4
            reg_tmp8.x = dot_s(uniforms.f[10], vs_in_reg0);
            // 239: dp4
            reg_tmp8.y = dot_s(uniforms.f[11], vs_in_reg0);
            // 240: dp4
            reg_tmp8.z = dot_s(uniforms.f[12], vs_in_reg0);
            // 241: dp4
            reg_tmp8.w = dot_s(uniforms.f[13], vs_in_reg0);
            // 242: callu
            if (uniforms.b[0]) {
                sub_209_218();
            }
            // 243: call
            {
                sub_26_55();
            }
            // 244: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 245: mul
            vs_out_attr2 = mul_s(uniforms.f[17], reg_tmp12);
        }
        case 246u: {
            // 246: dp3
            reg_tmp13.x = dot_3(reg_tmp9.xyz, reg_tmp9.xyz);
            // 247: rsq
            reg_tmp13.y = rsq_s(reg_tmp13.x);
            // 248: mul
            reg_tmp0 = mul_s(reg_tmp9, -reg_tmp13.yyyy);
            // 249: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
            // 250: dp3
            reg_tmp14.x = dot_3(reg_tmp0.xyz, reg_tmp11.xyz);
            // 251: mul
            reg_tmp14.y = (mul_s(uniforms.f[95].xxxx, reg_tmp14.xxxx)).y;
            // 252: mad
            reg_tmp1 = fma_s(reg_tmp14.yyyy, reg_tmp11, -reg_tmp0);
            // 253: add
            reg_tmp12.xy = (uniforms.f[93].yyyy + reg_tmp1.xyyy).xy;
            // 254: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[95].zwzw, reg_tmp12.xyxy)).zw;
            // 255: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 256: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 257: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 258: mov
            reg_tmp8 = vs_in_reg3.wwww;
            // 259: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 260: call
            {
                sub_105_134();
            }
            // 261: call
            {
                sub_45_55();
            }
            // 262: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 263: mul
            vs_out_attr2 = mul_s(uniforms.f[91], reg_tmp12);
            // 264: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 246u; break; }
            }
            // 265: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 266u: {
            // 266: mov
            reg_tmp8 = vs_in_reg3;
            // 267: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 268: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 269: call
            {
                sub_55_74();
            }
            // 270: call
            {
                sub_13_21();
            }
            // 271: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 484u; break; }
            }
            // 272: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 273u: {
            // 273: mov
            reg_tmp8 = vs_in_reg3;
            // 274: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 275: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 276: call
            {
                sub_114_134();
            }
            // 277: mov
            reg_tmp12 = uniforms.f[85];
            // 278: call
            {
                sub_134_144();
            }
            // 279: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 280: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 487u; break; }
            }
            // 281: call
            {
                sub_21_55();
            }
            // 282: mov
            reg_tmp12 = uniforms.f[14];
            // 283: call
            {
                sub_134_144();
            }
            // 284: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xyz;
            // 285: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 488u; break; }
            }
        }
        case 286u: {
            // 286: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 287: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 288: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 289: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 290: mov
            reg_tmp0 = uniforms.f[91];
            // 291: mov
            reg_tmp1 = uniforms.f[92];
        }
        case 292u: {
            // 292: mov
            reg_tmp8 = vs_in_reg3;
            // 293: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 294: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 295: call
            {
                sub_114_134();
            }
            // 296: add
            reg_tmp3 = reg_tmp0 + -reg_tmp8;
            // 297: max
            reg_tmp14 = max(uniforms.f[93].xxxx, reg_tmp7.zzzz);
            // 298: dp4
            reg_tmp15.x = dot_s(reg_tmp3, reg_tmp3);
            // 299: min
            reg_tmp14 = min(uniforms.f[93].yyyy, reg_tmp14);
            // 300: call
            {
                sub_45_55();
            }
            // 301: rsq
            reg_tmp15.x = rsq_s(reg_tmp15.x);
            // 302: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 303: dp3
            reg_tmp12 = vec4(dot_3(reg_tmp1.xyz, reg_tmp8.xyz));
            // 304: mul
            reg_tmp15 = mul_s(reg_tmp3, reg_tmp15.xxxx);
            // 305: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 306: dp3
            reg_tmp4 = vec4(dot_3(reg_tmp7.xyz, reg_tmp15.xyz));
            // 307: mul
            reg_tmp14 = mul_s(reg_tmp14, reg_tmp14);
            // 308: add
            reg_tmp12 = reg_tmp12 + reg_tmp1.wwww;
            // 309: max
            reg_tmp4 = max(uniforms.f[93].xxxx, reg_tmp4);
            // 310: mul
            reg_tmp14 = mul_s(uniforms.f[95].zzzz, reg_tmp14);
            // 311: min
            reg_tmp4 = min(uniforms.f[93].yyyy, reg_tmp4);
            // 312: sge
            vs_out_attr2.w = (vec4(greaterThanEqual(uniforms.f[93].xxxx, reg_tmp12))).w;
            // 313: mad
            vs_out_attr2.xyz = (fma_s(reg_tmp4, reg_tmp1, reg_tmp14)).xyz;
            // 314: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 315: mov
            reg_tmp12 = uniforms.f[87];
            // 316: mov
            reg_tmp0 = uniforms.f[85];
            // 317: mov
            reg_tmp1 = uniforms.f[86];
            // 318: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 319: mad
            vs_out_attr5.xy = (fma_s(vs_in_reg2.xyyy, uniforms.f[94].xxxx, reg_tmp12.xyyy)).xy;
            // 320: mul
            vs_out_attr5.zw = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy)).zw;
            // 321: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 322: call
            {
                sub_21_55();
            }
            // 323: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 324: mul
            reg_tmp12 = mul_s(uniforms.f[15].xxxx, vs_in_reg3);
            // 325: add
            vs_out_attr2 = uniforms.f[15].yyyy + reg_tmp12;
            // 326: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 327: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 328: mov
            reg_tmp8 = uniforms.f[87];
            // 329: mov
            reg_tmp9 = uniforms.f[89];
            // 330: mov
            reg_tmp6 = uniforms.f[88];
            // 331: mov
            reg_tmp7 = uniforms.f[90];
        }
        case 332u: {
            // 332: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
        }
        case 333u: {
            // 333: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 334: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 335: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 336: call
            {
                sub_74_105();
            }
            // 337: mov
            reg_tmp8 = reg_tmp6;
            // 338: mov
            reg_tmp9 = reg_tmp7;
            // 339: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 340: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 341: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 342: call
            {
                sub_74_105();
            }
            // 343: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 266u; break; }
            }
            // 344: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 345: mov
            reg_tmp11 = uniforms.f[91].xxxx;
            // 346: mov
            reg_tmp8 = uniforms.f[87];
            // 347: mov
            reg_tmp9 = uniforms.f[89];
            // 348: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 349: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 350: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 351: call
            {
                sub_74_105();
            }
            // 352: mov
            reg_tmp8 = uniforms.f[88];
            // 353: mov
            reg_tmp9 = uniforms.f[90];
            // 354: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 355: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 356: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 357: call
            {
                sub_74_105();
            }
            // 358: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 273u; break; }
            }
            // 359: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 360: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 361: mov
            reg_tmp8 = uniforms.f[85];
            // 362: mov
            reg_tmp9 = uniforms.f[87];
            // 363: mov
            reg_tmp6 = uniforms.f[86];
            // 364: mov
            reg_tmp7 = uniforms.f[88];
            // 365: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 333u; break; }
            }
            // 366: mul
            reg_tmp10 = mul_s(uniforms.f[95].yyyy, vs_in_reg0);
            // 367: mov
            reg_tmp11 = uniforms.f[89].xxxx;
            // 368: mov
            reg_tmp8 = uniforms.f[85];
            // 369: mov
            reg_tmp9 = uniforms.f[87];
            // 370: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 371: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 372: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 373: call
            {
                sub_74_105();
            }
            // 374: mov
            reg_tmp8 = uniforms.f[86];
            // 375: mov
            reg_tmp9 = uniforms.f[88];
            // 376: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 377: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 378: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 379: call
            {
                sub_74_105();
            }
            // 380: mov
            reg_tmp15.x = (uniforms.f[93].xxxx).x;
            // 381: mov
            reg_tmp15.y = (uniforms.f[90].xxxx).y;
            // 382: mov
            reg_tmp0 = uniforms.f[91];
            // 383: mov
            reg_tmp1 = uniforms.f[92];
            // 384: mad
            vs_out_attr5 = fma_s(vs_in_reg2.xyxy, uniforms.f[94].xxxx, reg_tmp15.xyxy);
            // 385: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 292u; break; }
            }
            // 386: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 387: mov
            reg_tmp8 = uniforms.f[88];
            // 388: mov
            reg_tmp9 = uniforms.f[90];
            // 389: mov
            reg_tmp6 = uniforms.f[89];
            // 390: mov
            reg_tmp7 = uniforms.f[91];
            // 391: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 332u; break; }
            }
            // 392: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 393: mov
            reg_tmp11 = uniforms.f[92].xxxx;
            // 394: mov
            reg_tmp8 = uniforms.f[88];
            // 395: mov
            reg_tmp9 = uniforms.f[90];
            // 396: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
            // 397: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg6);
            // 398: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg7);
            // 399: call
            {
                sub_74_105();
            }
            // 400: mov
            reg_tmp8 = uniforms.f[89];
            // 401: mov
            reg_tmp9 = uniforms.f[91];
            // 402: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg8);
            // 403: mul
            reg_tmp13 = mul_s(uniforms.f[94].yyyy, vs_in_reg9);
            // 404: mul
            reg_tmp14 = mul_s(uniforms.f[94].yyyy, vs_in_reg10);
            // 405: call
            {
                sub_74_105();
            }
            // 406: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg11);
            // 407: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 410u; break; }
            }
            // 408: mul
            reg_tmp10 = mul_s(uniforms.f[93].zzzz, vs_in_reg0);
            // 409: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg5);
        }
        case 410u: {
            // 410: mov
            reg_tmp8 = vs_in_reg3;
            // 411: mul
            reg_tmp9 = mul_s(uniforms.f[94].wwww, vs_in_reg4);
            // 412: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwwy, vs_in_reg1);
            // 413: call
            {
                sub_114_134();
            }
            // 414: call
            {
                sub_45_55();
            }
            // 415: jmpu
            if (uniforms.b[0]) {
                { jmp_to = 246u; break; }
            }
            // 416: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 417: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 418: call
            {
                sub_21_55();
            }
            // 419: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 420: mul
            reg_tmp12 = mul_s(uniforms.f[94].yyyy, vs_in_reg3);
            // 421: mul
            vs_out_attr2 = mul_s(uniforms.f[14], reg_tmp12);
            // 422: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 423: call
            {
                sub_9_21();
            }
            // 424: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg2);
            // 425: mul
            vs_out_attr3.xyz = (mul_s(uniforms.f[94].xxxx, vs_in_reg1)).xyz;
            // 426: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 486u; break; }
            }
            // 427: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 428: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 429: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 430: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 431: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 432: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 433: call
            {
                sub_21_55();
            }
            // 434: dp3
            vs_out_attr3.x = dot_3(uniforms.f[16].xyz, reg_tmp0.xyz);
            // 435: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[17].xyz, reg_tmp0.xyz));
            // 436: dp3
            vs_out_attr5.x = dot_3(uniforms.f[18].xyz, reg_tmp1.xyz);
            // 437: dp3
            vs_out_attr5.y = dot_3(uniforms.f[19].xyz, reg_tmp1.xyz);
            // 438: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 439: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 440: dphi
            reg_tmp9.z = dot_s(vec4(vs_in_reg0.xyz, 1.0), uniforms.f[6]);
            // 441: mov
            vs_out_attr0 = vs_in_reg0;
            // 442: mov
            vs_out_attr3.yz = (uniforms.f[93].xxxx).yz;
            // 443: add
            reg_tmp13.x = (uniforms.f[14].yyyy + reg_tmp9.zzzz).x;
            // 444: rcp
            reg_tmp12.x = rcp_s(-reg_tmp9.z);
            // 445: mul
            reg_tmp13.x = (mul_s(uniforms.f[14].xxxx, reg_tmp13.xxxx)).x;
            // 446: mul
            reg_tmp12.xy = (mul_s(uniforms.f[15].ywww, reg_tmp12.xxxx)).xy;
            // 447: madi
            reg_tmp12.xy = (fma_s(reg_tmp12.xyyy, reg_tmp13.xxxx, uniforms.f[15].xzzz)).xy;
            // 448: max
            reg_tmp12.xy = (max(uniforms.f[93].xxxx, reg_tmp12.xyyy)).xy;
            // 449: min
            reg_tmp12.xy = (min(uniforms.f[93].yyyy, reg_tmp12.xyyy)).xy;
            // 450: min
            vs_out_attr3.x = (min(reg_tmp12.xxxx, reg_tmp12.yyyy)).x;
            // 451: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 485u; break; }
            }
            // 452: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 453: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 454: mul
            reg_tmp0.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2)).xy;
            // 455: mul
            reg_tmp1.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg3)).xy;
            // 456: mov
            reg_tmp0.z = (uniforms.f[93].yyyy).z;
            // 457: mov
            reg_tmp1.z = (uniforms.f[93].yyyy).z;
            // 458: add
            reg_tmp0.y = (-uniforms.f[93].yyyy + reg_tmp0.yyyy).y;
            // 459: add
            reg_tmp1.y = (-uniforms.f[93].yyyy + reg_tmp1.yyyy).y;
            // 460: mov
            reg_tmp8 = vs_in_reg4.wwww;
            // 461: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 462: call
            {
                sub_105_134();
            }
            // 463: call
            {
                sub_45_55();
            }
            // 464: dp3
            vs_out_attr3.x = dot_3(uniforms.f[87].xyz, reg_tmp0.xyz);
            // 465: dp3
            vs_out_attr3.yz = vec2(dot_3(uniforms.f[88].xyz, reg_tmp0.xyz));
            // 466: dp3
            vs_out_attr5.x = dot_3(uniforms.f[89].xyz, reg_tmp1.xyz);
            // 467: dp3
            vs_out_attr5.y = dot_3(uniforms.f[90].xyz, reg_tmp1.xyz);
            // 468: mul
            vs_out_attr2 = mul_s(uniforms.f[94].yyyy, vs_in_reg4);
            // 469: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 495u; break; }
            }
            // 470: call
            {
                sub_21_55();
            }
            // 471: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 472: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 473: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 474: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 475: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 2u; break; }
            }
            // 476: add
            reg_tmp8 = uniforms.f[95].zzzz + vs_in_reg1.wwww;
            // 477: mul
            reg_tmp12 = mul_s(uniforms.f[93].wwww, vs_in_reg1);
            // 478: call
            {
                sub_105_134();
            }
            // 479: call
            {
                sub_45_55();
            }
            // 480: mul
            vs_out_attr5 = mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyxy);
            // 481: mov
            vs_out_attr2 = uniforms.f[93].yyyy;
            // 482: jmpu
            if (uniforms.b[14]) {
                { jmp_to = 500u; break; }
            }
            // 483: mov
            vs_out_attr0 = uniforms.f[93].xxxx;
        }
        case 484u: {
            // 484: mov
            vs_out_attr3.xyz = (uniforms.f[93].xxxx).xyz;
        }
        case 485u: {
            // 485: mov
            vs_out_attr2 = uniforms.f[93].xxxx;
        }
        case 486u: {
            // 486: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
        }
        case 487u: {
            // 487: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 488u: {
            // 488: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 489: mov
            vs_out_attr5.xy = (uniforms.f[93].xxxx).xy;
            // 490: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 491: end
            return true;
        }
        case 493u: {
            // 493: mov
            vs_out_attr4 = uniforms.f[93].xxxx;
            // 494: mov
            vs_out_attr1 = uniforms.f[93].xxxx;
        }
        case 495u: {
            // 495: mov
            vs_out_attr3.w = (uniforms.f[93].xxxx).w;
            // 496: mov
            vs_out_attr5.zw = (uniforms.f[93].xxxx).zw;
            // 497: end
            return true;
        }
        case 499u: {
            // 499: mul
            vs_out_attr5.xy = (mul_s(uniforms.f[94].xxxx, vs_in_reg2.xyyy)).xy;
        }
        case 500u: {
            // 500: dp4
            vs_out_attr3.x = dot_s(-uniforms.f[7], reg_tmp8);
            // 501: dp4
            vs_out_attr3.yz = vec2(dot_s(-uniforms.f[8], reg_tmp8));
            // 502: dp4
            vs_out_attr3.w = dot_s(-uniforms.f[9], reg_tmp8);
            // 503: end
            return true;
        }
        default: return false;
        }
    }
    return false;
}
// reference: 04920C531D75A288, CEF0242AEDB4A8E3
// reference: 04920C5388114A30, 1EA329896BFE7826
// shader: 8B30, EE7F66AA11563333

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * 1.0;
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: EDCDA78999A4FA83, EE7F66AA11563333
// program: 91BF95E5F4CCCBE0, C6949C8D76FDEB0C, EE7F66AA11563333
// shader: 8B30, F06D4D1B4BB83B79

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((const_color[3].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 4DFFDB75B1A04D55, F06D4D1B4BB83B79
// program: 747AD5F8B654FD1A, C6949C8D76FDEB0C, F06D4D1B4BB83B79
// shader: 8B30, 7C917AB845BC1432

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1.0) - texcolor2.aaa) + (texcolor2.rgb) * (vec3(1.0) - (vec3(1.0) - texcolor2.aaa)), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a) * (texcolor2.a) + (texcolor2.a) * (1.0 - (texcolor2.a)), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((const_color[2].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp(min((primary_fragment_color.rgb) + (const_color[3].rgb), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp(min((primary_fragment_color.a) + (const_color[3].a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((last_tex_env_out.rgb) + (rounded_primary_color.rgb), vec3(1.0)) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A5753FAAC8780E1C, 7C917AB845BC1432
// program: 5D55EF5559950FCC, C6949C8D76FDEB0C, 7C917AB845BC1432
// program: 8D607ED475583530, C6949C8D76FDEB0C, F06D4D1B4BB83B79
// shader: 8B30, 872A47CD536511A0

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 82A605528527392C, 872A47CD536511A0
// program: 91BF95E5F4CCCBE0, C6949C8D76FDEB0C, 872A47CD536511A0
// shader: 8B30, FB151D7F09CE5CBA

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 723C51FE7735D17D, FB151D7F09CE5CBA
// program: 91BF95E5F4CCCBE0, C6949C8D76FDEB0C, FB151D7F09CE5CBA
// shader: 8B30, 042EF479FCAA8542

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((const_color[2].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 986395C3C00936B1, 042EF479FCAA8542
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, 042EF479FCAA8542
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, 872A47CD536511A0
// shader: 8B30, 0998843ABB44E098

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0C4474D700748D9B, 0998843ABB44E098
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, 0998843ABB44E098
// shader: 8B30, 8F6A1C540028B298

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rrr) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.g) * (secondary_fragment_color.g), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((last_tex_env_out.rgb) * (texcolor2.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((last_tex_env_out.rgb) * (primary_fragment_color.rgb) + (last_tex_env_out.aaa), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_3 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[3].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((combiner_buffer.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((const_color[5].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5 * 2.0, alpha_output_5 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FCDE207BF26665CA, 8F6A1C540028B298
// program: 390AE326B576D5B0, C6949C8D76FDEB0C, 8F6A1C540028B298
// shader: 8B30, C7E1393162AE0FA6

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[1].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((const_color[3].a) * (combiner_buffer.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3 * 2.0, alpha_output_3 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((last_tex_env_out.rgb) * (vec3(1.0) - const_color[5].aaa) + (const_color[5].rgb) * (vec3(1.0) - (vec3(1.0) - const_color[5].aaa)), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: FE8AA8B89F09430E, C7E1393162AE0FA6
// program: 3364016E9942273A, C6949C8D76FDEB0C, C7E1393162AE0FA6
// shader: 8B30, DFE46DA4A4C6F647

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 0DDFB67E3D84F4CF, DFE46DA4A4C6F647
// program: 5CA73F800C077212, C6949C8D76FDEB0C, DFE46DA4A4C6F647
// program: 5C7077AD3C424188, C6949C8D76FDEB0C, DFE46DA4A4C6F647
// shader: 8B30, BDB93FEBB67BB9B1

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a) * (secondary_fragment_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp(min((const_color[1].rgb) + (primary_fragment_color.rgb), vec3(1.0)) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp(min((const_color[1].a) + (primary_fragment_color.a), 1.0) * (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((rounded_primary_color.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((rounded_primary_color.a) + (last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((texcolor1.rgb) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((const_color[3].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

vec3 color_output_5 = byteround(clamp((secondary_fragment_color.ggg) * (texcolor2.rgb) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_5 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_5, alpha_output_5), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: A64A4DF6B1A04D55, BDB93FEBB67BB9B1
// program: 747AD5F8B654FD1A, C6949C8D76FDEB0C, BDB93FEBB67BB9B1
// program: 8D607ED475583530, C6949C8D76FDEB0C, BDB93FEBB67BB9B1
// shader: 8B30, 1CFCCBD42C9CC633

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_1 = byteround(clamp((const_color[1].rgb) * (secondary_fragment_color.rrr), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_2 = byteround(clamp((primary_fragment_color.rgb) * (vec3(1.0) - last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a) * (const_color[3].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3 * 2.0, alpha_output_3 * 1.0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_4 = byteround(clamp(min((const_color[4].rgb) + (primary_fragment_color.aaa), vec3(1.0)) * (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_4 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_4, alpha_output_4), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 92570DE4A822B5AC, 1CFCCBD42C9CC633
// program: 9340F6F2A6A06CB5, C6949C8D76FDEB0C, 1CFCCBD42C9CC633
// shader: 8B30, FB8400E7B7BC30A7

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = vec4(1.0);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 9B143AAD64E2CCA4, FB8400E7B7BC30A7
// program: 5CA73F800C077212, C6949C8D76FDEB0C, FB8400E7B7BC30A7
// shader: 8B30, AF1F90683C075BE7

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor1 = textureLod(tex1, texcoord1, getLod(texcoord1 * vec2(textureSize(tex1, 0))));
vec4 texcolor2 = textureLod(tex2, texcoord2, getLod(texcoord2 * vec2(textureSize(tex2, 0))));

vec4 diffuse_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec4 specular_sum = vec4(0.0, 0.0, 0.0, 1.0);
vec3 light_vector = vec3(0.0);
vec3 refl_value = vec3(0.0);
vec3 spot_dir = vec3(0.0);
vec3 half_vector = vec3(0.0);
float dot_product = 0.0;
float clamp_highlights = 1.0;
float geo_factor = 1.0;
vec3 surface_normal = vec3(0.0, 0.0, 1.0);
vec3 surface_tangent = vec3(1.0, 0.0, 0.0);
vec4 normalized_normquat = normalize(normquat);
vec3 normal = quaternion_rotate(normalized_normquat, surface_normal);
vec3 tangent = quaternion_rotate(normalized_normquat, surface_tangent);
vec4 shadow = shadowTexture(texcoord0, texcoord0_w);
light_vector = normalize(light_src[0].position + view);
spot_dir = light_src[0].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[0].diffuse * dot_product) + light_src[0].ambient) * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[0].specular_0) + (refl_value * light_src[0].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(16,clamp(light_src[0].dist_atten_scale * length(-view - light_src[0].position) + light_src[0].dist_atten_bias, 0.0, 1.0)) * 1.0;
light_vector = normalize(light_src[1].position + view);
spot_dir = light_src[1].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[1].diffuse * dot_product) + light_src[1].ambient) * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[1].specular_0) + (refl_value * light_src[1].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(17,clamp(light_src[1].dist_atten_scale * length(-view - light_src[1].position) + light_src[1].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(9, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[2].position + view);
spot_dir = light_src[2].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[2].diffuse * dot_product) + light_src[2].ambient) * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[2].specular_0) + (refl_value * light_src[2].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(18,clamp(light_src[2].dist_atten_scale * length(-view - light_src[2].position) + light_src[2].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(10, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[3].position + view);
spot_dir = light_src[3].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[3].diffuse * dot_product) + light_src[3].ambient) * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[3].specular_0) + (refl_value * light_src[3].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(19,clamp(light_src[3].dist_atten_scale * length(-view - light_src[3].position) + light_src[3].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(11, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[4].position + view);
spot_dir = light_src[4].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[4].diffuse * dot_product) + light_src[4].ambient) * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[4].specular_0) + (refl_value * light_src[4].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(20,clamp(light_src[4].dist_atten_scale * length(-view - light_src[4].position) + light_src[4].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(12, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[5].position + view);
spot_dir = light_src[5].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[5].diffuse * dot_product) + light_src[5].ambient) * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[5].specular_0) + (refl_value * light_src[5].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(21,clamp(light_src[5].dist_atten_scale * length(-view - light_src[5].position) + light_src[5].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(13, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[6].position + view);
spot_dir = light_src[6].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[6].diffuse * dot_product) + light_src[6].ambient) * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[6].specular_0) + (refl_value * light_src[6].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(22,clamp(light_src[6].dist_atten_scale * length(-view - light_src[6].position) + light_src[6].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(14, max(dot(light_vector, spot_dir), 0.0)));
light_vector = normalize(light_src[7].position + view);
spot_dir = light_src[7].spot_direction;
half_vector = normalize(view) + light_vector;
dot_product = max(dot(light_vector, normal), 0.0);
refl_value.r = (lut_scale_rr * LookupLightingLUTUnsigned(6, max(dot(normal, normalize(half_vector)), 0.0)));
refl_value.g = refl_value.r;
refl_value.b = refl_value.r;
diffuse_sum.rgb += ((light_src[7].diffuse * dot_product) + light_src[7].ambient) * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
specular_sum.rgb += (((lut_scale_d0 * LookupLightingLUTSigned(0, dot(light_vector, normal))) * light_src[7].specular_0) + (refl_value * light_src[7].specular_1)) * clamp_highlights * LookupLightingLUTUnsigned(23,clamp(light_src[7].dist_atten_scale * length(-view - light_src[7].position) + light_src[7].dist_atten_bias, 0.0, 1.0)) * (lut_scale_sp * LookupLightingLUTUnsigned(15, max(dot(light_vector, spot_dir), 0.0)));
diffuse_sum.a *= shadow.a;
diffuse_sum.rgb += lighting_global_ambient;
primary_fragment_color = clamp(diffuse_sum, vec4(0.0), vec4(1.0));
secondary_fragment_color = clamp(specular_sum, vec4(0.0), vec4(1.0));

vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor1.rgb) * (primary_fragment_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor1.a) * (const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_1 = byteround(clamp((texcolor2.rgb) * (secondary_fragment_color.ggg) + (last_tex_env_out.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_1 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_1, alpha_output_1), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

vec3 color_output_2 = byteround(clamp((secondary_fragment_color.rrr) * (const_color[2].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_2 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_2, alpha_output_2), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

vec3 color_output_3 = byteround(clamp((vec3(1.0) - last_tex_env_out.rgb) * (combiner_buffer.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_3 = byteround(clamp((last_tex_env_out.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_3, alpha_output_3), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: E66A20FD3D84F4CF, AF1F90683C075BE7
// program: 5CA73F800C077212, C6949C8D76FDEB0C, AF1F90683C075BE7
// reference: D711CBAAC5AD0DDC, 0FE38B3285CEFD3C
// shader: 8B30, 6DC319571CA5EBEF

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
if (!(gl_FragCoord.x >= float(scissor_x1) && gl_FragCoord.y >= float(scissor_y1) && gl_FragCoord.x < float(scissor_x2) && gl_FragCoord.y < float(scissor_y2))) discard;
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((const_color[0].rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((const_color[0].a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D4F4BEF9622F19DD, 6DC319571CA5EBEF
// program: 25227EA48D9BEBDB, C6949C8D76FDEB0C, 6DC319571CA5EBEF
// reference: D711CBAAB99B07C8, 25227EA48D9BEBDB
// shader: 8B30, 9A7E3AC0A821785F

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((vec3(1.0) - texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: D060346ED792C531, 9A7E3AC0A821785F
// program: 07440F333D3D809A, C6949C8D76FDEB0C, 9A7E3AC0A821785F
// shader: 8B30, 58483E0585EBAEDA

precision highp int;
precision highp float;
precision highp samplerBuffer;
precision highp usampler2D;
precision highp uimage2D;
in vec4 primary_color;
in vec2 texcoord0;
in vec2 texcoord1;
in vec2 texcoord2;
in float texcoord0_w;
in vec4 normquat;
in vec3 view;

#ifndef CITRA_GLES
in vec4 gl_FragCoord;
#endif // CITRA_GLES
out vec4 color;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform samplerCube tex_cube;
uniform samplerBuffer texture_buffer_lut_lf;
uniform samplerBuffer texture_buffer_lut_rg;
uniform samplerBuffer texture_buffer_lut_rgba;

#define NUM_TEV_STAGES 6
#define NUM_LIGHTS 8
#define NUM_LIGHTING_SAMPLERS 24

struct LightSrc {
    vec3 specular_0;
    vec3 specular_1;
    vec3 diffuse;
    vec3 ambient;
    vec3 position;
    vec3 spot_direction;
    float dist_atten_bias;
    float dist_atten_scale;
};

layout (std140) uniform shader_data {
    int alphatest_ref;
    float depth_scale;
    float depth_offset;
    float shadow_bias_constant;
    float shadow_bias_linear;
    int scissor_x1;
    int scissor_y1;
    int scissor_x2;
    int scissor_y2;
    int fog_lut_offset;
    int proctex_noise_lut_offset;
    int proctex_color_map_offset;
    int proctex_alpha_map_offset;
    int proctex_lut_offset;
    int proctex_diff_lut_offset;
    float proctex_bias;
    vec3 fog_color;
    vec2 proctex_noise_f;
    vec2 proctex_noise_a;
    vec2 proctex_noise_p;
    vec4 const_color[NUM_TEV_STAGES];
    vec4 tev_combiner_buffer_color;
    vec4 clip_coef;
};

layout (std140) uniform shader_light_data {
    ivec4 lighting_lut_offset[NUM_LIGHTING_SAMPLERS / 4];
    vec3 lighting_global_ambient;
    LightSrc light_src[NUM_LIGHTS];
    float lut_scale_d0;
    float lut_scale_d1;
    float lut_scale_sp;
    float lut_scale_fr;
    float lut_scale_rb;
    float lut_scale_rg;
    float lut_scale_rr;
    int shadow_texture_bias;
};

// Rotate the vector v by the quaternion q
vec3 quaternion_rotate(vec4 q, vec3 v) {
    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

float LookupLightingLUT(int lut_index, int index, float delta) {
    vec2 entry = texelFetch(texture_buffer_lut_lf, lighting_lut_offset[lut_index >> 2][lut_index & 3] + index).rg;
    return entry.r + entry.g * delta;
}

float LookupLightingLUTUnsigned(int lut_index, float pos) {
    int index = clamp(int(pos * 256.0), 0, 255);
    float delta = pos * 256.0 - float(index);
    return LookupLightingLUT(lut_index, index, delta);
}

float LookupLightingLUTSigned(int lut_index, float pos) {
    int index = clamp(int(pos * 128.0), -128, 127);
    float delta = pos * 128.0 - float(index);
    if (index < 0) index += 256;
    return LookupLightingLUT(lut_index, index, delta);
}

float byteround(float x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec2 byteround(vec2 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec3 byteround(vec3 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

vec4 byteround(vec4 x) {
    return round(x * 255.0) * (1.0 / 255.0);
}

// PICA's LOD formula for 2D textures.
// This LOD formula is the same as the LOD lower limit defined in OpenGL.
// f(x, y) >= max{m_u, m_v, m_w}
// (See OpenGL 4.6 spec, 8.14.1 - Scale Factor and Level-of-Detail)
float getLod(vec2 coord) {
    vec2 d = max(abs(dFdx(coord)), abs(dFdy(coord)));
    return log2(max(d.x, d.y));
}

vec4 shadowTexture(vec2 uv, float w) {
    return vec4(1.0);
}

vec4 shadowTextureCube(vec2 uv, float w) {
    return vec4(1.0);
}

void main() {
vec4 rounded_primary_color = byteround(primary_color);
vec4 primary_fragment_color = vec4(0.0);
vec4 secondary_fragment_color = vec4(0.0);
float z_over_w = 2.0 * gl_FragCoord.z - 1.0;
float depth = z_over_w * depth_scale + depth_offset;
vec4 texcolor0 = textureLod(tex0, texcoord0, getLod(texcoord0 * vec2(textureSize(tex0, 0))));
vec4 combiner_buffer = vec4(0.0);
vec4 next_combiner_buffer = tev_combiner_buffer_color;
vec4 last_tex_env_out = vec4(0.0);
vec3 color_output_0 = byteround(clamp((texcolor0.rgb) * (rounded_primary_color.rgb), vec3(0.0), vec3(1.0)));
float alpha_output_0 = byteround(clamp((texcolor0.a) * (rounded_primary_color.a), 0.0, 1.0));
last_tex_env_out = clamp(vec4(color_output_0, alpha_output_0), vec4(0.0), vec4(1.0));
combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;
next_combiner_buffer.rgb = last_tex_env_out.rgb;
next_combiner_buffer.a = last_tex_env_out.a;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

combiner_buffer = next_combiner_buffer;

gl_FragDepth = depth;
color = byteround(last_tex_env_out);
}
// reference: 2584B8EBDCA53F25, 58483E0585EBAEDA
// program: 07440F333D3D809A, C6949C8D76FDEB0C, 58483E0585EBAEDA
// reference: D711CBAA88114A30, 1EA329896BFE7826
